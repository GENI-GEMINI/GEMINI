			           perfSONAR Skeleton MP Service

--------------------------------------------------------------------------------

About:
------

This service is a generic perfSONAR service.  It is meant to be used as a
starting point for the development of new services.  

This skeleton has been developed with the following use case in mind.
Measurements are collected regularly independent of external interaction. 
Measurements are configured in a store file (see below) with their NWMG
representation and any necessary parameters. The service reads the store 
file on startup and every 'maintenance_interval' seconds. The /makeMeasurement/
method is called every 'collection_interval' seconds to perform the configured
measurements. Results are stored on a temporary database (e.g. in memory, file,
etc) to serve future MeasurementRequest messages from clients. This database
is keyed in some way by each measurement's description in the store file.

Thus, in this scenario, when users send a MeasurementRequest message it
does not actually triggers a new measurement. Instead, the service will
match the metadata in the request with its store file. If there is a match,
the service will then fetch the corresponding data from the temporary database
and construct the MeasurementResponse message. MeasurementRequest messages
are handled by the /handleEvent/ method which in turn calls
/measurementRequestRetrieveMetadataData/ to do the matching with the store.
/handleData/ will then be called with the matching metadata; this method
is responsible for fetching the data from the database and constructing
the response.

Note that this is just one example of how an MP could be implemented.
Developers are free to change the message flow and internal representations.
Please refer to the DEVELOPMENT_README for explicit instructions.

Installation:
-------------

Please read the INSTALL file for instructions
  
Configuration:
--------------

The Skeleton comes with a base configuration via the installation procedure.
This is meant to allow for immediate testing as well as serve as a guide for
customizing the service.  

There are several files that may be adjusted manually to configure this service
for a specific use case:

  - etc/daemon.conf: 
  
    Contains information that identifies the service uniquely and allows it to
    run in a given environment.  There are several options that should be
    changed:  
   
      service_accesspoint      - Change the "hostname" from localhost
      service_description      - Identifying information about the service
      service_name             - Service Name (short)  

    There are also several options that may be changed for a configuration:

      port                     - Port the service listens on
      endpoint                 - Endpoint to contact the service
      ls_registration_interval - Length of time (minutes) between contacting LS 
      enable_registration      - Turn on or off LS registration
      maintenance_interval     - Length of time (in seconds) to 'refresh' the
                                 configuration file
      collection_interval      - Length of time (in seconds) to run the
                                 measurement collection
    
    The rest of the items are normally not to be adjusted.
    
  - etc/daemon_logger.conf:

    Contains information related to logging, there are three modes:
    
      Log::Dispatch::Screen     - Log messages to screen (useful for debugging)
      Log::Dispatch::Syslog     - Log messages to syslog facility
      Log::Dispatch::FileRotate - Log messages to specified file

    Each logging mode is achieved by commenting/uncommenting specific lines in
    the file.  Refer to the file for instructions.

    The rest of the items are normally not to be adjusted.

  - /var/lib/perfsonar/skeleton_mp/data: 
    
    This file holds a 'frozen' perl hash that contains the data the collection
    portion of the service generates.  

  - /var/lib/perfsonar/skeleton_mp/store.xml: 

    This file represents the data that is offered by the service.  It is used
    by two portions of the service:
       
        - The 'collection' component will read this, and perform necessary
          measurements.  
    
        - The 'web service' component will read this, and match requests against
          it.
            
Starting/Stopping:
------------------

The service comes with init scripts that may be used to start and stop
operation:

  (sudo) /etc/init.d/skeleton_mp start
  (sudo) /etc/init.d/skeleton_mp stop
  (sudo) /etc/init.d/skeleton_mp restart

The service can also be run in a manual fashion (useful for debugging):

  (sudo) perl bin/daemon.pl --verbose --conf=etc/daemon.conf --logger=etc/daemon_logger.conf
  
Before doing this, be sure to edit "etc/daemon_logger.conf" to enable "Screen"
debugging.

Testing:
--------

The service comes with a client application and several test messages that can
be used to test functionality.  The client application sends the XML file
specified on the command line as a request to the URL specified on the command
line.  The XML response from the server is returned. There are many messages
provided as examples, to test the service only one is recommended:

  (sudo) perl bin/client.pl http://localhost:9989/perfSONAR_PS/services/SkeletonMP etc/requests/EchoRequest.xml

These two will test the major functions of this service. To test:

  1) Ensure the service is started, this can be done two ways:
  
    a) Start the service via the init script - you will not be able to monitor
       the service 'live', but log files may be examined to determine if things
       are working.  
  
    b) Start the service in 'debug' mode:
    
       (sudo) perl bin/daemon.pl --verbose --conf=etc/daemon.conf --logger=etc/daemon_logger.conf
       
       Be sure that logging is configured to the use the "Screen" so you may
       monitor the service's activities.

  2) Run the client:
  
     perl bin/client.pl URL FILENAME
  
  3) The results of the first test will be an XML message that indicates the service
     is working:
     
<?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
  <SOAP-ENV:Header/>
  <SOAP-ENV:Body>
<nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
messageIdRef="EchoMessage1" id="message.12780503" type="EchoResponse"><nmwg:metadata
metadataIdRef="metadata1"
id="metadata.5353493"><nmwg:eventType>success.echo</nmwg:eventType></nmwg:metadata><nmwg:data
metadataIdRef="metadata.5353493" id="data.1643179"><nmwgr:datum
xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">The echo request has
passed.</nmwgr:datum></nmwg:data><nmwg:metadata
xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="metadata1">
    <nmwg:eventType>http://schemas.perfsonar.net/tools/admin/echo/2.0</nmwg:eventType>
  </nmwg:metadata></nmwg:message>  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>

  4) In a similar manner, it is possible to test other messages:

  (sudo) perl bin/client.pl http://localhost:9989/perfSONAR_PS/services/SkeletonMP etc/requests/EchoRequest.xml
  (sudo) perl bin/client.pl http://localhost:9989/perfSONAR_PS/services/SkeletonMP etc/requests/MeasurementRequest.xml

     The response to these messages may differ from service to service, so they
     will not be enumerated here.  
       
  5) If everything looks OK, return logging to normal and restart service via
     the init system.  



Maintenance:
------------

Subscribe to the user mailing lists if you are seeking help on some problem
related to this software.  Announcements regarding availability of new releases
will also be sent to these locations

  perfSONAR-PS Users Group - https://lists.internet2.edu/sympa/info/perfsonar-ps-users
  perfSONAR-PS Announcements - https://lists.internet2.edu/sympa/info/perfsonar-ps-users

  Performance Node Users - https://lists.internet2.edu/sympa/info/performance-node-users
  Performance Node Announcements - https://lists.internet2.edu/sympa/info/performance-node-announce

Also if you are using package management software and have installed the
Internet2 software repository, a typical upgrade should download new releases:

  (sudo) yum update
  
Finally, check the following websites for news of software releases:

  http://software.internet2.edu
  http://www.internet2.edu/performance

--------------------------------------------------------------------------------

Tue Dec 14 10:59:52 EST 2010
