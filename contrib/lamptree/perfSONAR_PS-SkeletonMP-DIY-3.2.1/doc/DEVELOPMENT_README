Navigating the Skeleton MP DIY Package

Tue Dec 14 20:20:00 EST 2010
--------------------------------------------------------------------------------

Important Files:
-----------------------
    The following files should be read or will need to be edited.  A brief
    description of each follows.  

    1) Applications
        bin/client.pl            - Application to communicate with a web
                                   service.  It is unlikely you will need to
                                   change this, but will use it when testing
                                   your service.  Usage: 
                                   ./client.pl URL_OF_SERVICE /PATH/TO/XML/FILE

        bin/daemon.pl            - Application that runs the perfSONAR service.
                                   It is very unlikely you will need to change
                                   this file at all, but it will be used to
                                   execute the library containing modifications.
                                   Example Usage (useful for debugging): 
                                   ./daemon.pl --verbose --config=/PATH/TO/CONFIG --logger=/PATH/TO/LOGGER/CONFIG

        bin/psConfigureDaemon.pl - Application to generate a config file.  It is
                                   likely that modification will be required to
                                   assist in the generation of config files.
                                   Alternate approach is to just edit
                                   configuration files by hand (e.g.
                                   'etc/daemon.conf').

        scripts/skeleton_mp      - Sample script to be installed in the linux
                                   init.d directory.  Use the 'chkconfig'
                                   application to install this.  It is likely
                                   that this file will need minor modifications
                                   if the name is changed away from 'skeleton'.  

        scripts/makeStore.pl     - Application to create a 'store' file for the 
                                   service.  It is expected that this process
                                   could be automated, if not the store file
                                   will need to be created by hand.  

    2) Documentation
        doc/INSTALL - Installation instructions for RPMs and Tar GZ files.
                      Please read this before installing.  

        doc/README  - Documentation that outlines configuration options and how
                      to execute the service.  

    3) Configuration Files
        etc/daemon.conf        - Main configuration file for the service.  It is
                                 very likely this will need to be edited.  If 
                                 adding new elements is required, be sure to 
                                 alter the configuration generator 
                                 (bin/psConfigureDaemon.pl) as well as the 
                                 library's init function 
                                 (lib/perfSONAR_PS/Services/MP/Skeleton.pm)

        etc/daemon_logger.conf - Logging configuration file.  This does not need
                                 to be edited often, but it can be used to
                                 switch between 'screen based' logging and file
                                 logging.  

    4) XML Requests
        etc/requests/EchoRequest.xml        - Example 'echo' message, will not
                                              need to be changed.  

        etc/requests/MeasurementRequest.xml - Example 'MeasurementRequest'
                                              message.  Will need to be changed
                                              for specific measurements.  

    5) Library
        lib/perfSONAR_PS/Services/MP/Skeleton.pm - The library, contains several
                                                   functions that will need to
                                                   be changed.  Most of the work
                                                   is in this file.  

Not as Important files: 
-----------------------
    1) Files needed to create/package the software.  
        perl-perfSONAR_PS-SkeletonMP-DIY.spec
        Makefile
        MANIFEST
        dependencies
        scripts/install_dependencies.sh
        scripts/prepare_environment.sh

    2) Documentation        
        doc/Changes
        doc/LICENSE

    3) Supporting libraries.  Most likely will not need to be changed.   
        lib/perfSONAR_PS/Messages.pm
        lib/perfSONAR_PS/RequestHandler.pm
        lib/perfSONAR_PS/Transport.pm
        lib/perfSONAR_PS/Request.pm
        lib/perfSONAR_PS/Error_compat.pm
        lib/perfSONAR_PS/Error.pm
        lib/perfSONAR_PS/EventTypeEquivalenceHandler.pm
        lib/perfSONAR_PS/Common.pm
        lib/perfSONAR_PS/XML/Document.pm
        lib/perfSONAR_PS/DB/File.pm
        lib/perfSONAR_PS/Services/MA/General.pm
        lib/perfSONAR_PS/Services/Base.pm
        lib/perfSONAR_PS/Services/Echo.pm
        lib/perfSONAR_PS/Client/gLS.pm
        lib/perfSONAR_PS/Client/Echo.pm
        lib/perfSONAR_PS/Client/LS.pm
        lib/perfSONAR_PS/Client/LS/Remote.pm
        lib/perfSONAR_PS/Utils/ParameterValidation.pm


--------------------------------------------------------------------------------
Instructions/Tours For Each File
--------------------------------------------------------------------------------

The following sections will outline important parts of each file.  There will
be references to the 'perfSONAR_PS-SkeletonMP' package, which contains a
functioning service, from time to time.  

lib/perfSONAR_PS/Services/MP/Skeleton.pm
-----------------------------------------

    Global Modifications
Line 5:   Define any global variables.  These will be accessed as 
          '$self->{VAR_NAME}' from in the library.  

Line 22:  Add additional perl libraries as needed.  

    init() Modifications
Line 88:  Init function.  Global variables should be initialized here.  Checks
          of the config file (to be sure values were set) or other sanity checks
          before the service gets going.  If items are added to
          'etc/daemon.conf' or 'bin/psConfigureDaemon.pl', a check of that item
          should occur here as well.  

Line 98:  An example of addressing a 'global' value in the configuration file: 
          $self->{CONF}->{"root_hints_url"}

Line 114: An example of addressing a value that is specific to a service (e.g.
          the 'skeleton' service) in the configuration file:
          $self->{CONF}->{"skeleton"}->{"data_file"}          
          
Line 262: This is how a new message type is registered.  The
          'MeasurementRequest' message is already registered, but other messages
          are possible.  After adding a new type here, around Line 522 more
          modifications will be needed.  

    makeMeasurement() Function Modifications
Line 387: This function should contain the logic to measure something.  It is
          designed to run on a periodic basis (controlled by the 
          'collection_interval' variable in the 'etc/daemon.conf' file).
          Normally measurements are stored in some form of storage (a database
          like SQLite, MySQL, or RRD files), but it is possible to do other
          forms of 'temporary' storage.  A data structure that allows for single
          storage of data could be defined as a global and shared, a temporary
          file solution (see 
          'perfSONAR_PS-SkeletonMP/lib/perfSONAR_PS/Services/MP/Skeleton.pm'
          Line 367 for an example), or other methods to temporarily buffer data.
          
          If having the daemon control the measurement is not valuable, set
          'collection_interval' to 0 to disable this function, and define an
          external script to collect/store data.  

    handleEvent() Function Modifications
Line 522: After adding a new message handler near Line 262, add in the
          appropriate logic to handle the new message.

    handleData() Function Modifications
Line 676: The logic to read the data storage that was utilized in the
          'makeMeasurement' function (Line 387) will be entered here.  The
          purpose of this function is to prepare the datum elements (starting at
          Line 723) to be returned in the response message.  See
          'perfSONAR_PS-SkeletonMP/lib/perfSONAR_PS/Services/MP/Skeleton.pm'
          Line 707 for an example of how this function could be created.  

Line 723: This is an important section - it used to create the XML.  It should
          be modified slightly to meet the needs of the project, but should keep
          the same general form.  Note that 'createElement' creates a single
          datum, it can be used many times to make more if required.  

etc/requests/MeasurementRequest.xml
-----------------------------------------

Line 3: Add in additional namespaces as needed.  LAMP will help with this part.  

Line 9: Add in the 'structure' of the request.  This should match what the 
        'store.xml' file contains (slightly). The service uses XPATH  (an XML
        query language) to match the request to what is stored in the store
        file.  LAMP will assist with this portion.  

scripts/makeStore.pl
-----------------------------------------

Line 44: Based on the structure of the XML used in
         'etc/requests/MeasurementRequest.xml', this script can be modified to
         generate a 'store.xml' file.  See also
         'perfSONAR_PS-SkeletonMP/scripts/makeStore.pl' to see an example of a
         basic store file.  

bin/psConfigureDaemon.pl
-----------------------------------------

The entire script is used to generate a file similar to 'etc/daemon.conf'.  The following lines will need to be examined (to see how to add in a new type):

Line 237: The line that defines the 'namespace' (e.g. name of the library, see
          Line 1 in 'lib/perfSONAR_PS/Services/MP/Skeleton.pm').  Add more as
          needed.  

Line 244: 
Line 247: Both of these lines are needed to 'select' what we are configuring.  

Line 258: Lines that will be used to call the correct configuration function.

Line 265: A configuration function, use as an example.  

etc/daemon.conf
-----------------------------------------

This file contains commentary on each field.  If new fields are needed be sure
to edit 'bin/psConfigureDaemon.pl' and the 'init' function in
'lib/perfSONAR_PS/Services/MP/Skeleton.pm'


