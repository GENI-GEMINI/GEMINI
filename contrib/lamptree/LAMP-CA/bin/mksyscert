#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2010 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Long;

#
# Load the Testbed support stuff.
#
use lib "/usr/testbed/lib";

use GeniUtil;

#
# Create system SSL certificates.
# 
sub usage()
{
    print("Usage: mksyscert [-d] [-o file] [-p password] [-e email] [-t days] ".
	  "[-u url] [-i urn] [-k keyfile] [-a authority] <orgunit> [uuid]\n");
    exit(-1);
}
my $debug    = 0;
my $printcert= 0;
my $outfile;
my $password = "";
my $email;
my @urls;
my $urn;
my $expiration;
my $oldkeyfile;
my $authority;
my %optlist = ( "debug" => \$debug,
		"password=s" => \$password,
		"output=s" => \$outfile,
		"verbose" => \$printcert,
		"email=s" => \$email,
		"url=s" => \@urls,
		"identifier=s" => \$urn,
		"timeexp=s" => \$expiration,
		"keyfile=s" => \$oldkeyfile,
		"authority=s" => \$authority );

#
# Configure variables
#
my $TB		= "/usr/testbed";

# Locals
my $SSLDIR      = "$TB/lib/ssl";
my $TEMPLATE    = "$SSLDIR/syscert.cnf";
my $CACONFIG    = "$SSLDIR/ca.cnf";
my $EMULAB_CERT = "$TB/etc/emulab.pem";
my $EMULAB_KEY  = "$TB/etc/emulab.key";
my $OPENSSL     = "/usr/bin/openssl";
my $WORKDIR     = "$TB/ssl";
my $SAVEUID	= $UID;
my $certfile    = $EMULAB_CERT;
my $keyfile     = $EMULAB_KEY;

# Locals
my $encrypted   = 0;
my $sh_password = "";

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Function prototypes
#
sub fatal($);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
GetOptions( %optlist ) or usage();

if( defined( $outfile ) ) {
    if ($outfile =~ /^([-\w\.\/]+)$/) {
	$outfile = $1;
    }
    else {
	die("Tainted arguments: $outfile\n");
    }
   
}
if( defined( $oldkeyfile ) ) {
    if ($oldkeyfile =~ /^([-\w\.\/]+)$/) {
	$oldkeyfile = $1;
    }
    else {
	die("Tainted arguments: $oldkeyfile\n");
    }
   
}
if( defined( $authority ) ) {
    if ($authority =~ /^([-\w\.\/]+)$/) {
	$authority = $1;
    }
    else {
	die("Tainted arguments: $authority\n");
    }
    $certfile = $authority;
    $keyfile  = $authority;
}
if( $password ) {
    #
    # Make sure its all escaped since any printable char is allowed.
    #
    if ($password =~ /^([\040-\176]*)$/) {
	$password = $1;
    }
    else {
	die("Tainted argument: $password\n");
    }
    $sh_password = $password;
    $sh_password =~ s/\'/\'\\\'\'/g;
    $sh_password = "$sh_password";
    $encrypted = 1;
}
if (@ARGV < 1) {
    usage();
}
my $orgunit = shift(@ARGV);
my $uuid    = (@ARGV ? shift(@ARGV) : undef);

# Generate/confirm uuid
if (!defined($uuid)) {
    $uuid = NewUUID();
    if (!defined($uuid)) {
	fatal("Could not generate a new uuid");
    }
}
if (!defined($email)) {
    $email = "lamp\@pg.dasmlab.org";
}

if ( $expiration and $expiration =~ /([0-9]{12}Z)/ ) {
    $expiration = $1;
}
else {
    $expiration = undef;
}

#
# CD to the workdir, and then serialize on the lock file since there is
# some shared goop that the ssl tools muck with (serial number, index, etc.).
# 
chdir("$WORKDIR") or
    fatal("Could not chdir to $WORKDIR: $!");

#
# Need an index file, which is the openssl version of the DB.
#
if (! -e "index.txt") {
    open(IND, ">index.txt")
	or fatal("Could not create index.txt");
    close(IND);
}

#
# We have to figure out what the next serial number will be and write
# that into the file. We could let "ca' keep track, but with devel
# trees, we might end up with duplicate serial numbers.
#
# XXX Shared with mkusercert ...
#
open(SER, "< serial");
my $serial = <SER>;
chomp $serial;
$serial = (hex $serial) + 1;
close(SER);

open(SER, ">serial")
    or fatal("Could not create new serial file");
printf SER "%08x\n", $serial;
close(SER);

#
# Create a template conf file.
#
system("cp -f $TEMPLATE syscert.cnf") == 0
    or fatal("Could not copy $TEMPLATE to current dir");

open(TEMP, ">>syscert.cnf")
    or fatal("Could not open $TEMPLATE for append: $!");

if (@urls) {
    my $count = 0;
    foreach( @urls ) {
	# unregistered OID 2.25.305821105408246119474742976030998643995
	# (corresponding to UUID e61300a0-c4c5-11de-b14e-0002a5d5c51b)
	# is used to indicate generic ProtoGENI XMLRPC servers.
	print TEMP "authorityInfoAccess=2.25.305821105408246119474742976030998643995;URI:$_\n";
    }
}

print TEMP "\n";
print TEMP "[ req_distinguished_name ]\n";
print TEMP "C\t\t=US\n";
print TEMP "ST\t\t=Delaware\n";
print TEMP "L\t\t=Newark\n";
print TEMP "O\t\t=GENI LAMP\n";
print TEMP "OU\t\t=\"$orgunit\"\n";
print TEMP "CN\t\t=$uuid\n";
print TEMP "emailAddress\t= $email\n";

print TEMP "\n";
print TEMP "[ req_altname ]\n";
print TEMP "URI=$urn\n" if defined( $urn );
print TEMP "\n";

close(TEMP)
    or fatal("Could not close syscert.cnf: $!");

# Redirect output unless in debugging mode.
my $outline = ($debug ? "" : ">/dev/null 2>&1");

if( defined( $oldkeyfile ) ) {
    #
    # Create a certificate request using the specified key.
    #
    system("$OPENSSL req -text -new -key $oldkeyfile -config syscert.cnf ".
	   ($encrypted ? " -passout 'pass:${sh_password}' " : " -nodes ") .
	   " -out syscert_req.pem $outline") == 0
	   or fatal("Could not create certificate request");
    system("cp $oldkeyfile syscert_key.pem");
} else {
    #
    # Create a client side private key and certificate request.
    #
    system("$OPENSSL req -text -new -config syscert.cnf ".
	   ($encrypted ? " -passout 'pass:${sh_password}' " : " -nodes ") .
	   " -keyout syscert_key.pem -out syscert_req.pem $outline") == 0
	   or fatal("Could not create certificate request");
}

#
# Sign the client cert request, creating a client certificate.
#
$UID = 0;
my $cmd = "$OPENSSL ca -batch -policy policy_sslxmlrpc ".
       ($expiration ? " -enddate $expiration " : " " ) .
       " -name CA_syscerts -config $CACONFIG ".
       " -out syscert_cert.pem -cert $certfile -keyfile $keyfile ".
       " -infiles syscert_req.pem $outline";
system( $cmd ) == 0
    or fatal("Could not sign certificate request");
$UID = $SAVEUID;

#
# Combine the key and the certificate into one file
#
if (defined($outfile)) {
    system("cat syscert_key.pem syscert_cert.pem > $outfile") == 0
	or fatal("Could not combine cert and key into one file");

    if ($printcert) {
	system("cat syscert_cert.pem");
    }    
}
else {
    system("cat syscert_key.pem syscert_cert.pem") == 0
	or fatal("Could not combine cert and key");
}

exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
