#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2008-2009 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;
use XML::LibXML;
use Data::Dumper;

#
# Verify a GENI credential.
# 
sub usage()
{
    print("Usage: verifygenicred [-d] [-o file] <credfile>\n");
    exit(-1);
}
my $optlist = "do:";
my $debug   = 0;
my $outfile;
my $xmlfile;

#
# Configure variables
#

#
# Turn off line buffering on output
#
$| = 1;

# Locals
my $PGDIR       = "/usr/local/etc/protogeni";
my $GENICERTS   = "$PGDIR/ssl/genicacerts";
my $REVOKED     = "$PGDIR/ssl/genicrl.serials";
my $SCHEMA      = "$PGDIR/schema/credential.xsd";
# The next three programs should be in the PATH (see PATH below)
my $OPENSSL     = "openssl";
my $XMLLINT     = "xmllint";
my $XMLSEC1     = "xmlsec1";
my $certfile;
my $keyfile;
my $deletefiles = 0;
my $certificate;
my $privkey;
my %credentials = ();

#
# We don't want to run this script unless its the real version.
#
#if ($EUID != 0) {
#    die("*** $0:\n".
#	"    Must be setuid! Maybe its a development version?\n");
#}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root!\n");
}

#
# Untaint the path
#
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Function prototypes
#
sub fatal($);
sub cleanup();
sub lookup($$);

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"o"})) {
    $outfile = $options{"o"};
    
    if ($outfile =~ /^([-\w\.\/]+)$/) {
	$outfile = $1;
    }
    else {
	fatal("Tainted filename: $outfile");
    }
}
usage()
    if (!@ARGV);
$xmlfile = shift(@ARGV);
if ($xmlfile =~ /^([-\w\.\/]+)$/) {
    $xmlfile = $1;
}
else {
    fatal("Tainted filename: $xmlfile");
}
# Use realpath to resolve any symlinks.
my $translated = `realpath $xmlfile`;
if ($translated =~ /^(\/tmp\/[-\w\.\/]+)$/) {
    $xmlfile = $1;
}
else {
    fatal("Bad data in translated pathname: $xmlfile");
}

#
# Verify that the credential conforms to the schema. The wrinkle is that it
# might already be a signed credential and we just need to add another
# signature to it, but either way it should still pass the schema check.
#
if (system("$XMLLINT -noout -schema $SCHEMA $xmlfile > /dev/null 2>&1")) {
    fatal("$xmlfile does not conform to schema $SCHEMA");
}

#
# Bring in the credential file so we can mess with it.
#
my $parser = XML::LibXML->new;
my $doc    = $parser->parse_file($xmlfile);
my $root   = $doc->documentElement();

#
# Find the credential node, and then break up the hierarchy so that we
# can look at each part and then verify the chain of delegations.
#
my ($credentials_node) = $root->getElementsByTagName("credential");
my ($signatures_node)  = $root->getElementsByTagName("signatures");

if (! (defined($credentials_node) && defined($signatures_node))) {
    fatal("Malformed signed credentials input");
}
# Record the outermost credential in the array, indexed by name.
my ($xmlid_attribute) = $credentials_node->attributes();
my $xmlid = $xmlid_attribute->getValue();
$credentials{$xmlid} = { "node" => $credentials_node };

# Remember the leaf node, and the root which might change below.
my $leaf_xmlid = $xmlid;
my $leaf_cred  = $credentials_node;
my $root_xmlid = $leaf_xmlid;
my $root_cred  = $leaf_cred;

#
# The last child of the credentials node will be a parent credential,
# if there is a parent. Loop through finding each parent and place it
# in the credentials array. This is basically a doubly linked list of
# structures, each one pointing to its parent and child credentials. 
#
my $temp = $credentials_node;
while (defined($temp)) {
    my @childnodes  = $temp->childNodes();
    undef($temp);

    foreach my $child (@childnodes) {
	if (defined($child->localname) && $child->localname eq "parent") {
	    my ($parent_cred) = $child->getElementsByTagName("credential");
	    #print $parent_cred->toString() . "\n";

	    my ($xmlid_attribute) = $parent_cred->attributes();
	    my $parent_xmlid = $xmlid_attribute->getValue();
	    $credentials{$parent_xmlid} = { "node"        => $parent_cred,
					    "child_xmlid" => $xmlid,
					    "child_cred"  => $temp };

	    # Add this to the last credential info
	    $credentials{$xmlid}->{"parent_xmlid"} = $parent_xmlid;
	    $credentials{$xmlid}->{"parent_cred"}  = $parent_cred;
	    $xmlid = $parent_xmlid;
	    $temp  = $parent_cred;

	    # Remember this, might be root.
	    $root_xmlid = $xmlid;
	    $root_cred  = $temp;
	    last;
	}
    }
}

# Check that credentials have been delegated correctly: at each level,
# the privileges must be a subset of the parent, and the target GIDs
# must be equal.  The "can_delegate" flag must be set in the parent on
# all privileges which are delegated.  We should also check that the
# owner GID is correctly identified and authenticated by the included
# X.509 certificate, but this is NOT yet implemented!

foreach my $credential ( keys( %credentials ) ) {
    my $node = $credentials{$credential}->{"node"};

    if( $node != $root_cred ) {
	my $parent = $credentials{$credential}->{"parent_cred"};

	my $gid = lookup( $node, "target_gid" )->textContent;
	my $parent_gid = lookup( $parent, "target_gid" )->textContent;

	$gid =~ s/\s//;
	$parent_gid =~ s/\s//;

	fatal( "invalid delegation (GID mismatch)" )
	    if $gid ne $parent_gid;

	my $type = lookup( $node, "type" )->textContent;
	my $parent_type = lookup( $parent, "type" )->textContent;

	fatal( "invalid delegation (type mismatch)" )
	    if $type ne $parent_type;

	if( $type eq "privilege" ) {
	    my @privs = grep( $_->nodeName eq "privilege",
			      lookup( $node, "privileges" )->childNodes );
	    my @parent_privs = grep( $_->nodeName eq "privilege",
				     lookup( $parent, 
					     "privileges" )->childNodes );
	    my %allowed = ();
	    $allowed{ lookup( $_, "name" )->textContent } = 1
		foreach grep( lookup( $_, "can_delegate" )->textContent == 1,
			      @parent_privs );

	    foreach my $priv ( @privs ) {
		my $name = lookup( $priv, "name" )->textContent;

		fatal( "invalid delegation (privilege not available)" )
		    unless $allowed{ $name } or $allowed{ "*" };
	    }		
	}

	my $expiry = lookup( $node, "expires" )->textContent;
	my $parent_expiry = lookup( $parent, "expires" )->textContent;
	my $dateregexp = '^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d$';

	fatal( "invalid delegation (malformed expiry)" )
	    if $expiry !~ $dateregexp or $parent_expiry !~ $dateregexp;

	fatal( "invalid delegation (expiry violation)" )
	    if $expiry gt $parent_expiry;
    }
}

# Read in all entries from CRLs.
my %revoked = ();
if( -r $REVOKED ) {
    open( SERIALS, $REVOKED ) or fatal( "Cannot read $REVOKED" );
    while( <SERIALS> ) {
	chomp;
	$revoked{ $_ } = 1;
    }
    close( SERIALS );
}

#
# The certficate used to sign the credential was either the Emulab certificate
# or that of the user delegating the credential. For now we just worry about
# the emulab credentials. We have the trusted roots cached, so generate a list
# of them.
#
opendir(DIR, "$GENICERTS") or
    fatal("Cannot opendir $GENICERTS: $!");
my @pemfiles = grep {/^.*\.pem$/} readdir(DIR);
closedir(DIR);

my $certarg = " " . join(" ", map("--trusted-pem $GENICERTS/$_", @pemfiles));

#
# Lets first make sure that the data has not been messed with; for each
# credential in the hierarchy check the signature. Remember, the signature
# covers the credential and all the parents up to the top.
#
foreach my $sigid (keys(%credentials)) {
    my $cmd = "$XMLSEC1 --verify --store-signatures ";
    $cmd .= "--print-debug "
	if ($debug);
    $cmd .= "--node-id Sig_$sigid $certarg $xmlfile";
    print STDERR "$cmd\n"
	if ($debug);

    open(SEC, "$cmd 2>&1 |")
	or fatal("Could not start xmlsec1 on $xmlfile");

    #
    # xmlsec1 is really braindead. It returns zero status if the signature
    # verifies, even if the cert chain fails to verify. So, must get a single
    # line back, "OK" for us to consider it really okay.
    #
    my $bad  = 0;
    my $line = <SEC>;
    if (!defined($line) || !($line =~ /^OK$/)) {
	$bad = 1;
    }
    print STDERR $line
	if (defined($line) && $debug);
    my $issuer = undef;
    while (<SEC>) {
	print STDERR $_
	    if ($debug);
	$issuer = $1 if m{^==== Issuer Name:.+/CN=([^/]+)/};
	if( m{^==== Issuer Serial: (.+)} ) {
	    $issuer and $revoked{ "$issuer $1" } and
		fatal( "Certificate $issuer $1 has been revoked" );		
	    $issuer = undef;
	}
    }
    close(SEC) or
	fatal($! ? "Error closing $XMLSEC1 pipe: $!"
	         : "Exit status $? from $XMLSEC1");
    fatal("$sigid in $xmlfile did not verify!")
	if ($bad);
}
exit(0);

sub cleanup()
{
}

sub fatal($)
{
    my($mesg) = $_[0];
    cleanup();
    die("*** $0:\n".
	"    $mesg\n");
}

# Look up an element (which must exist exactly once) within a node.
sub lookup($$)
{
    my( $node, $name ) = @_;

    my @cnodes = grep( $_->nodeName eq $name, $node->childNodes );

    fatal( "invalid credential (found " . scalar( @cnodes ) . " $name " .
	   "nodes, expecting 1)" )
	if scalar( @cnodes ) != 1;

    return $cnodes[ 0 ];
}
