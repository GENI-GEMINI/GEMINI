<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://docbook.org/xml/4.2/docbookx.dtd">
<article>

  <articleinfo>
    <title>perfSONAR LS Protocol</title>

    <author>
      <firstname>J.</firstname>
      <surname>Zurawski</surname>
      <affiliation>
        <orgname>Internet2</orgname>
        <address>   
          <email>zurawski@internet2.edu</email>
        </address>
      </affiliation>
    </author>

    <copyright>
      <year>2007</year>
      <year>2008</year>
      <holder>Internet2</holder>
    </copyright>

  </articleinfo>

  <section id="changes" xreflabel="Document Changes">
    <title>Document Changes</title>

    <table frame="all" align="center" halign="center" width="80%"  id="table.1">
      <title>Change Log</title>
      <tgroup cols="1" align="left" colsep="1" rowsep="1">
        <colspec colnum="1" colname="c1" width="10%"/>
        <colspec colnum="2" colname="c2" width="10%"/>
        <colspec colnum="3" colname="c3" width="50%"/>
        <colspec colnum="4" colname="c4" width="30%"/>
        <thead>
          <row>
            <entry>Version</entry>
            <entry>Date</entry>
            <entry>Description</entry>
            <entry>Author(s)</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>1.0</entry>
            <entry>1/4/2008</entry>
            <entry>Initial Preparation</entry>
            <entry>J. Zurawski</entry>
          </row>
          <row>
            <entry>1.0</entry>
            <entry>1/11/2008</entry>
            <entry>Corrections to Registration, adding more content</entry>
            <entry>J. Zurawski</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
   
  </section>


  <section id="introduction" xreflabel="Introduction">
    <title>Introduction</title>
    
    <para>
      The <command>Lookup Service</command> is an example of an
      <emphasis>infrastructure</emphasis> component of the
      <citation>perfSONAR</citation> framework; the primary goal being to aid
      in the discovery of datasets and to unburden otherwise busy
      <command>Measurement Archive</command> and
      <command>Measurement Point</command> services from answering exhaustive 
      queries from client software.  This work describes the communication
      protocol used by the <command>LS</command> to manage (i.e. 
      <emphasis>register</emphasis>, <emphasis>deregister</emphasis>, 
      and <emphasis>update</emphasis>) and locate (i.e. 
      <emphasis>query</emphasis>) datasets. The tasks undertaken by this
      critical component rely on communication protocols based on the same
      <citation>XML</citation> formats used to exchange and store measurement
      data as defined by the <citation>NM-WG</citation> in the
      <citation>OGF</citation>.
    </para>

    <para>
      The <emphasis>LS Protocol</emphasis> is not used by the
      <command>LS</command> alone, portions are currently used by client
      applications as well as other services to register and maintain data, as
      well as ascertain the <emphasis>contents</emphasis> of a running
      <command>LS</command> instance.  All current services contain bindings
      that permit them to transfer data to and from <command>LS</command>
      instances to better balance the discovery in the framework; through
      extension is is also possible for <command>LS</command> instances to
      register and exchange information between themselves (see the 
      <emphasis>Distributed Lookup Service</emphasis> document).
    </para>

    <para>  
      The remainder of this document will explain the origins of this command
      protocol in <xref linkend="architecture" />, detailed descriptions
      regarding syntax and semantics in <xref linkend="protocol" />, an overview
      of status in <xref linkend="result_codes" />, and finally points of
      extension will be discussed in <xref linkend="protocol_extension" />.
    </para>
    
  </section>

  <section id="architecture" xreflabel="Architecture">
    <title>System Architecture</title>
      
    <para>
      Locating resources within dynamic software deployments such as
      <emphasis>perfSONAR</emphasis> is a challenging prospect.  Service
      instances may feature limited lifetime data, and themselves may join and
      leave the framework without <emphasis>a priori</emphasis> notification to
      other affiliated framework components.  The
      <command>Lookup Service</command> was constructed to help mange this
      discovery problem by offering a static location where service instances
      may register and maintain data sets, and client applications and other
      services may query a known location to find recent information.  
    </para>
    
    <para>
      There are four primary types of message in the <command>LS</command>
      protocol, all dealing with the management of data, albeit from
      potentially different actors.  
    </para>
          
    <itemizedlist mark='opencircle'>
      <listitem>
        <para><command>Registration</command> - initiated by services that
        manage data sets in the <emphasis>perfSONAR</emphasis> framework such as
        <command>Measurement Archives</command>.  This message is generally sent
        when a service first comes online and establishes itself within the
        framework as the location of specific information.</para>
      </listitem>
      <listitem>
        <para><command>Deregistration</command> - opposite effect to that of
        <emphasis>Registration</emphasis>; services let the
        <command>LS</command> know that specific data or perhaps the service
        itself is unavailable.</para>
      </listitem>
      <listitem>
        <para><command>Keepalive</command> - initiated by already running
        services and involves <emphasis>refreshing</emphasis> the already
        registered data to signify that it is still valid.</para>
      </listitem>
      <listitem>
        <para><command>Query</command> - initiated by clients or other 
        services to check the existence and location of data sets.</para>
      </listitem>
    </itemizedlist> 
 
    <para>
      The basic protocol as presented here can be extended to similar services
      and extensions to that of the basic <command>LS</command>.  Services that
      handle the registration and discovery of similar sets (such as the
      <command>Topology Service</command>) may also benefit from this protocol
      draft.
    </para>
      
  </section>

  <section id="protocol" xreflabel="LS Protocol">
    <title>LS Protocol</title>
    
    <para>
      The core functionality of the <emphasis>LS Protocol</emphasis> is to 
      provide a set of messages (in <emphasis>request</emphasis> and
      <emphasis>response</emphasis> pairs) that drive the actions of data
      management and discovery.  We present an overview of each of these
      message sets used in this protocol, including both schematic designs and
      examples for the <xref linkend="register_messages" />, 
      <xref linkend="deregister_messages" />, 
      <xref linkend="keepalive_messages" />, and 
      <xref linkend="query_messages" />.  We conclude with brief descriptions
      of where extensions are possible followed by some current examples in 
      <xref linkend="protocol_extension" />.  
    </para>
    
    <para>
      All protocols used within <emphasis>perfSONAR</emphasis> are based on
      recommendations from the <emphasis>OGF</emphasis>'s
      <emphasis>NM-WG</emphasis>, and have been initially described
      in <citation>Zurawski06Scalable</citation>.  The basic format described
      in this work for measurements has been adapted as a template for use in
      service communication as well, keeping the concept of 
      <xref linkend="metadata" /> and <xref linkend="data" /> intact.  
    </para>

<!-- ======================================================================= -->
<!-- REGISTRATION -->
<!-- ======================================================================= -->

    <section id="register_messages" xreflabel="Registration Messages">
      <title>Registration Messages</title>

      <para>
        The <emphasis>registration</emphasis> messages are used by services
        (such as <emphasis>Measurement Archives</emphasis> or
        <emphasis>Measurement Points</emphasis>) to register or update local
        data with an <command>LS</command> instance within a
        <emphasis>perfSONAR</emphasis> deployment.  Note that in this version of
        the <command>LS  Protocol</command> does not feature an explicit message
        type for the operation of <emphasis>updating</emphasis> already
        registered information.  This functionality is included in the
        <emphasis>registration</emphasis> message by simply indicating to the
        <command>LS</command> that the service is already registered.
      </para>
      
      <para>
        The <emphasis>request</emphasis> message typically consists of
        identification information (service data in some enumerated fashion or
        a previously issued <emphasis>key</emphasis> from the
        <command>LS</command>) and data that the service contains and wishes to
        make available.  The <emphasis>response</emphasis> must contain result
        code information for each
        <emphasis>metadata</emphasis>/<emphasis>data</emphasis> pair that was
        sent in the <emphasis>request</emphasis> message.  The results codes, as
        discussed in <xref linkend="result_codes" />, must report the success or
        failure of the <emphasis>Registration</emphasis> message and will
        reflect the current state of the <command>LS</command>.
      </para>

      <section id="register_request_message" xreflabel="LSRegisterRequest Message">
        <title>LSRegisterRequest Message</title>

        <para>
          The message consists of at least two parts that are linked, the 
          first being at least one <emphasis>metadata</emphasis> element, the 
          second being at least one <emphasis>data</emphasis> element.  The 
          <emphasis>metadata</emphasis> block(s) must contain service identification
          information that uniquely describes the submitting service, while the
          <emphasis>data</emphasis> section(s) contain
          representative bits from the services data set.  It is understood
          that these are the <emphasis>metadata</emphasis> from this service
          only.  It is possible to offer either the complete representation
          exactly how it appears in the service or a summarized version that
          may omit certain extraneous details.  
        </para>

        <section id="register_request_examples" xreflabel="LSRegisterRequest Examples">
          <title>LSRegisterRequest Examples</title>

          <para>
            The following <command>LSRegisterRequest</command> message
            illustrates the general <emphasis>first time</emphasis> format that
            an <command>LS</command> will be expecting.  The data section,
            which does left blank to not mandate a specific metadata structure
            to be submitted; this will different from service to service.  
          </para>
          
          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message type="LSRegisterRequest"
                            id="msg1"
                            xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                <nmwg:metadata id="serviceLookupInfo">
                  <perfsonar:subject id="commonParameters" 
                                     xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/">
                    <psservice:service id="serviceParameters" 
                                       xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                      <psservice:serviceName>My_test_MA</psservice:serviceName>
                      <psservice:accessPoint>http://localhost:8080/axis/services/snmpMA</psservice:accessPoint>
                      <psservice:serviceType>MA</psservice:serviceType>
                      <psservice:serviceDescription>This is my testing MA</psservice:serviceDescription>
                    </psservice:service>
                  </perfsonar:subject>
                </nmwg:metadata>
    
                <nmwg:data id="data" metadataIdRef="serviceLookupInfo">
                  <!-- content -->
                </nmwg:data>
 
              </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            All attributes and elements, as listed, are required and in the
            proper namespaces.  There are two special cases to this base
            message that are used to <emphasis>update</emphasis> existing
            data.  Case one can be interpreted as
            <emphasis>update by replacement</emphasis> while case two will
            <emphasis>update</emphasis> by augmenting new data to anything that
            already exists.  Case one is discussed first.
          </para>

          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message type="LSRegisterRequest"
                            id="msg1"
                            xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                <nmwg:metadata id="serviceLookupInfo">
                  
                  <nmwg:key id="key1">
                    <nmwg:parameters id="param1">
                      <nmwg:parameter name="lsKey">http://localhost:8080/axis/services/snmpMA</nmwg:parameter>
                    </nmwg:parameters>
                  </nmwg:key>                    
               
                  <perfsonar:subject id="commonParameters" 
                                     xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/">
                    <psservice:service id="serviceParameters" 
                                       xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                      <psservice:serviceName>My_test_MA_2</psservice:serviceName>
                      <psservice:accessPoint>http://localhost:8081/axis/services/snmpMA</psservice:accessPoint>
                      <psservice:serviceType>MA</psservice:serviceType>
                      <psservice:serviceDescription>This is a new deployment of the MA.</psservice:serviceDescription>
                    </psservice:service>
                  </perfsonar:subject>

                </nmwg:metadata>
    
                <nmwg:data id="data" metadataIdRef="serviceLookupInfo">
                  <!-- maybe new content, maybe old ... -->
                </nmwg:data>
 
              </nmwg:message>
            ]]>
          </programlisting>  
          
          <para>
            Note that this metadata features both the <emphasis>key</emphasis>
            structure (signifying this service should be known to the
            <command>LS</command>) and a <emphasis>service subject</emphasis>.
            The <emphasis>service subject</emphasis> may be the same, or could
            contain different information.  The important thing to note is that
            when both of these items are present and valid, the following will
            happen internal to the service:
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para>All data associated with the previous service definition
              will be removed.</para>
            </listitem>
            <listitem>
              <para>The service definition will be removed.</para>
            </listitem>
            <listitem>
              <para>The (potentially) new service definition will be added.</para>
            </listitem>
            <listitem>
              <para>All new data will be added.</para>
            </listitem>
            <listitem>
              <para>Response will contain status of all above steps.</para>
            </listitem>
          </itemizedlist>   

          <para>
            Contrasting to the approach of <emphasis>removal</emphasis> of
            old data, the other available <emphasis>update</emphasis> method
            is more concerned with inserting <emphasis>additional</emphasis>
            information.
          </para>

          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message type="LSRegisterRequest"
                            id="msg1"
                            xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                <nmwg:metadata id="serviceLookupInfo">
                  
                  <nmwg:key id="key1">
                    <nmwg:parameters id="param1">
                      <nmwg:parameter name="lsKey">http://localhost:8081/axis/services/snmpMA</nmwg:parameter>
                    </nmwg:parameters>
                  </nmwg:key>                    

                </nmwg:metadata>
    
                <nmwg:data id="data" metadataIdRef="serviceLookupInfo">
                  <!-- new data... -->
                </nmwg:data>
 
              </nmwg:message>
            ]]>
          </programlisting>  
          
          <para>
            This method features <emphasis>only</emphasis> the returned
            <emphasis>key</emphasis> from the <command>LS</command> in the 
            <emphasis>subject</emphasis> element, and lets the service know
            that the enclosed data should be added to the records for the
            service.  We will now present a description of each element, as
            well as related attributes for the previous messages.
          </para>

          <section id="register_request_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSRegisterRequest"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                
                  <nmwg:metadata />
                
                  <nmwg:data />
               
                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>message</emphasis> element serves as a container that
              all information of a <emphasis>LSRegisterRequest</emphasis>
              communication must travel in.  There are valuable attributes as
              well as enclosed elements that are required for this particular
              message.
            </para>
          
            <para>
              There are two acceptable attributes for this message: 
              <emphasis>id</emphasis> and <emphasis>type</emphasis>.  The
              <emphasis>id</emphasis> attribute can be used to track message
              state while the <emphasis>type</emphasis> is used to route the
              message through a service that is capable of handling several.
              The <emphasis>type</emphasis> <command>should</command> be either
              the simple string <command>LSRegisterRequest</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSRegisterRequest/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSRegisterRequest/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                
                  <!-- ... -->
                
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="register_request_schema_metadata" /> and 
              <xref linkend="register_request_schema_data" />.  
            </para>

          </section>

          <section id="register_request_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                               
                  <nmwg:key />
                  
                  <perfsonar:subject xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" />
                
                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, subject</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element normally contains the 
              <emphasis>static</emphasis> information regarding measurements, and
              in the case of the <emphasis>LSRegisterRequest</emphasis> message, 
              it will contain some other form of static service information:
              identification of a service by service description
              or stored a stored key.  As with the
              <xref linkend="register_request_schema_message" />, there are
              specific pieces of information required for this element to be
              correct.
            </para>
          
            <para>
              There is only one acceptable attribute: <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the corresponding
              <xref linkend="register_request_schema_data" />.  Inside of the
              element there can be a 
              <xref linkend="register_request_schema_key" /> or a 
              <xref linkend="register_request_schema_subject" /> (sometimes both
              depending on what specific type of
              <emphasis>registration</emphasis> this element is performing).
            </para>       

          </section>

          <section id="register_request_schema_key" xreflabel="Key Element">
            <title>Key Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:key xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                          id="STRING">
                        
                  <nmwg:parameters id="STRING" />

                </nmwg:key> 
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - key</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>required</command> - no</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>key</command> element encloses a
              <command>parameters</command> structure that will be used to 
              describe some internal system state (i.e. an identification
              that is known to the <command>LS</command>).  In this
              case we are passing back to the <command>LS</command> the name of
              an already registered service that has been previously issued.
              The <emphasis>key</emphasis> itself does not serve
              an explicit purpose other than to offer a container for the
              <xref linkend="register_request_schema_parameters" /> element.
              The namespace of this object is always the same and the object
              <command>is</command> required.  There must always be an 
              <emphasis>id</emphasis> attribute for this message.
            </para>

          </section>           

          <section id="register_request_schema_parameters" xreflabel="Parameters Element">
            <title>Parameters Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:parameters id="STRING"
                                 xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                               
                  <nmwg:parameter name="STRING">STRING</nmwg:parameter>

                </nmwg:parameters>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameters</command> element encloses a series of 
              <xref linkend="register_request_schema_parameter" /> structures 
              that are normally used to describe variable elements.  In this
              particular case we are using this structure to denote some state
              information that passes between the registering service, and the
              <command>LS</command>.  The namespace of this object is always
              the same and the object <command>is</command> required.  There 
              must always be an <emphasis>id</emphasis> attribute with this
              element.
            </para>

          </section>  
        
          <section id="register_request_schema_parameter" xreflabel="Parameter Element">
            <title>Parameter Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:parameter name="STRING"
                                value="STRING"
                                xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:parameter>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - name, value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameter</command> element is meant to describe
              a physical aspect of some variable in terms of both name and
              value.  The value can be an attribute (appropriately named
              <emphasis>value</emphasis>) or in the form of a text element.
              There is only one recognized values for the
              <emphasis>name</emphasis> attribute at the current time,
              although we leave the possibility that other elements may be
              necessary in the future.  
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para>lsKey - Specifies the <emphasis>key</emphasis> value used
                in identifying an <command>LS</command> instance, for now this
                is simply the <emphasis>accessPoint</emphasis>.</para>
              </listitem>
            </itemizedlist>
 
            <para>
              The <emphasis>name</emphasis> attribute is required for this element, 
              the <emphasis>value</emphasis> attribute is an option instead of using
              a internal text element.  The namespace should always be that of
              the base.  
            </para>        
        
          </section>

          <section id="register_request_schema_subject" xreflabel="Subject Element">
            <title>Subject Element</title>
            
            <programlisting>
              <![CDATA[
                <perfsonar:subject id="STRING" 
                                   xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/">

                  <psservice:service xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" />

                </perfsonar:subject>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - subject</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - service</para>
              </listitem>
              <listitem>
                <para><command>required</command> - no</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>subject</emphasis> element normally is used to
              describe the <emphasis>noun</emphasis> of a measurement, the
              entity that is the source or destination of a specific
              measurement.  In this case we are extending this notion to a
              <emphasis>service</emphasis> that is registering information
              with an <command>LS</command> instance.  
            </para> 
            
            <para>
              This element must contain an <emphasis>id</emphasis> attribute and
              a nested <emphasis>service</emphasis> element as described in
              <xref linkend="register_request_schema_service" />.  Note that the
              namespace of this element is not the standard
              <emphasis>NM-WG</emphasis> namespace; this is by design due to the
              specific nature of the content it contains.
            </para>

          </section>

          <section id="register_request_schema_service" xreflabel="Service Element">
            <title>Service Element</title>
            
            <programlisting>
              <![CDATA[
                <psservice:service id="STRING" 
                                   xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                  
                  <psservice:serviceName />
                
                  <psservice:accessPoint />
                
                  <psservice:serviceType />
                
                  <psservice:serviceDescription />
                
                </psservice:service>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - service</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - serviceName, accessPoint, serviceType, serviceDescription</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>service</emphasis> element consists of nested
              elements that are capable of describing unique information about
              a given <emphasis>perfSONAR</emphasis> service.  This element's
              notation is not only seen when dealing with an 
              <command>LS</command>, but may also be seen in other
              infrastructure like services such as <emphasis>Topology</emphasis>
              and <emphasis>Authentication</emphasis> to describe which service
              we are interested in.
            </para> 

            <para>
              This element must contain an <emphasis>id</emphasis> attribute and
              the <emphasis>accessPoint</emphasis> and
              <emphasis>serviceType</emphasis> elements.  It may contain the
              <emphasis>serviceName</emphasis> and
              <emphasis>serviceDescription</emphasis> elements as well although
              these are not required.
            </para>

          </section>
          
          <section id="register_request_schema_serviceName" xreflabel="serviceName Element">
            <title>serviceName Element</title>
            
            <programlisting>
              <![CDATA[
                <psservice:serviceName xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                  STRING
                </psservice:serviceName>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - serviceName</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - no</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>serviceName</emphasis> element gives a textual
              name to a specific <emphasis>service</emphasis>.  It should be
              noted that this name should be as descriptive as possible and
              reflect reality, as it may become search criteria for interested
              parties.  This element must contain only a text description
              and nothing else; it is not mandated.
            </para> 

          </section>
          
          <section id="register_request_schema_accessPoint" xreflabel="accessPoint Element">
            <title>accessPoint Element</title>
            
            <programlisting>
              <![CDATA[
                <psservice:accessPoint xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                  STRING
                </psservice:accessPoint> 
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - accessPoint</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>accessPoint</emphasis> element gives the
              <emphasis>contact string</emphasis> or a particular
              <emphasis>service</emphasis> (URL).  This element must contain
              only a text description and nothing else.  This element is
              required, or the <command>LS</command> may reject the message.
            </para>  

          </section>
          
          <section id="register_request_schema_serviceType" xreflabel="serviceType Element">
            <title>serviceType Element</title>
            
            <programlisting>
              <![CDATA[
                <psservice:serviceType xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                  STRING
                </psservice:serviceType>               
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - serviceType</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>serviceType</emphasis> element gives a textual
              description of the <emphasis>service</emphasis>, for instance
              <emphasis>MA</emphasis> best describing how to classify the
              service in the whole of the framework.  It should be noted that
              this type should be as descriptive as possible and reflect reality,
              as it may become search criteria for interested parties.  This
              element must contain only a text description and nothing else.
              This element is required, omitting it may cause the
              <command>LS</command> to reject the message.
            </para> 

          </section>

          <section id="register_request_schema_serviceDescription" xreflabel="serviceDescription Element">
            <title>serviceDescription Element</title>
            
            <programlisting>
              <![CDATA[
                <psservice:serviceDescription xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                  STRING
                </psservice:serviceDescription>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - serviceDescription</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - no</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>serviceDescription</emphasis> element gives a
              textual description for a specific <emphasis>service</emphasis>.
              This element must contain only a text description and nothing
              else. This element is not required.
            </para> 

          </section>

          <section id="register_request_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING"
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <!-- contents -->

                </nmwg:data>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - yes</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>data</emphasis> element is reserved for the more 
              <emphasis>dynamic</emphasis> aspects of measurements, namely 
              <emphasis>time</emphasis> and <emphasis>value</emphasis> pairs.
              Although we are not reporting a measurement in this case, we are
              sending some form of <emphasis>data</emphasis> in the form of
              <emphasis>metadata</emphasis> descriptions from a service.
            </para>
          
            <para>
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.  
              We are leaving out an exhaustive description of the possible
              elements that may exist inside of this element due to the ever
              changing nature of <emphasis>perfSONAR</emphasis>.  Any
              <emphasis>metadata</emphasis> description that a service may be
              taking care of should be accepted.
            </para>    

          </section>
          
        </section>

        <section id="register_request_schema" xreflabel="LSRegisterRequest Schema">
          <title>LSRegisterRequest Schema</title>

          <para>
            An XML <xref linkend="schema" /> is typically used to describe 
            the structure and internal content of a given XML instance.  This 
            description can sometimes be expressed in XML itself.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="register_request_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
              the RELAX-NG schema language.  This tool, unlike similar XML schema 
              languages, does not utilize XML markup.  The syntax is similar 
              to that of a regular language, and allows for a rather compact 
              description.  The following describes the 
              <command>LSRegisterRequest</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSRegisterRequest</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                namespace perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/"
                namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute type { 
                      "LSRegisterRequest" |
                      "http://schemas.perfsonar.net/messages/LSRegisterRequest/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      element nmwg:key {
                        attribute id { xsd:string } &
                        element nmwg:parameters {
                          attribute id { xsd:string } &
                          element nmwg:parameter {
                            attribute name { "lsKey" } &
                            (
                              text |
                              attribute value { xsd:string }
                            )
                          }
                        }
                      }? &
                      element perfsonar:subject {
                        attribute id { xsd:string } &
                        element psservice:service {
                          attribute id { xsd:string } &
                          element psservice:serviceName { xsd:string }? &
                          element psservice:accessPoint { xsd:string } &
                          element psservice:serviceType { xsd:string } &
                          element psservice:serviceDescription { xsd:string }?                        
                        }
                      }?
                      
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      anyElement+
                    }
                  }

                anyElement = 
                  element * { 
                    anyThing 
                  }

                anyAttribute = 
                  attribute * { text }

                anyThing = 
                  ( 
                    anyElement | 
                    anyAttribute | 
                    text 
                  )*
              ]]>
            </programlisting>  

          </section>

          <section id="register_request_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <para>
              <command>register_request.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                           xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                           xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" 
                             schemaLocation="perfsonar.xsd"/>
                  <xs:import namespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                             schemaLocation="psservice.xsd"/>
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSRegisterRequest"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSRegisterRequest/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="nmwg:key"/>
                        <xs:element ref="perfsonar:subject"/>
                      </xs:choice>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="key">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:parameters"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="parameters">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:parameter"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="parameter">
                    <xs:complexType mixed="true">
                      <xs:attribute name="name" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="lsKey"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                      <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:group minOccurs="1" maxOccurs="unbounded" ref="nmwg:anyElement"/>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:group name="anyElement">
                    <xs:sequence>
                      <xs:any processContents="skip"/>
                    </xs:sequence>
                  </xs:group>
                  <xs:attributeGroup name="anyAttribute">
                    <xs:anyAttribute processContents="skip"/>
                  </xs:attributeGroup>
                  <xs:group name="anyThing">
                    <xs:sequence>
                      <xs:group minOccurs="0" maxOccurs="unbounded" ref="nmwg:anyElement"/>
                    </xs:sequence>
                  </xs:group>
                  <xs:attributeGroup name="anyThing">
                    <xs:attributeGroup ref="nmwg:anyAttribute"/>
                  </xs:attributeGroup>
                </xs:schema>
              ]]>
            </programlisting>  

            <para>
              <command>perfsonar.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" 
                           xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                           xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="register_request.xsd"/>
                  <xs:import namespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" schemaLocation="psservice.xsd"/>
                  <xs:element name="subject">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="psservice:service"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting>  

            <para>
              <command>psservice.xsd</command>:
            </para>
            
            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                           xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                           xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="register_request.xsd"/>
                  <xs:import namespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" schemaLocation="perfsonar.xsd"/>
                  <xs:element name="service">
                    <xs:complexType>
                      <xs:all>
                        <xs:element minOccurs="0" ref="psservice:serviceName"/>
                        <xs:element ref="psservice:accessPoint"/>
                        <xs:element ref="psservice:serviceType"/>
                        <xs:element minOccurs="0" ref="psservice:serviceDescription"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="serviceName" type="xs:string"/>
                  <xs:element name="accessPoint" type="xs:string"/>
                  <xs:element name="serviceType" type="xs:string"/>
                  <xs:element name="serviceDescription" type="xs:string"/>
                </xs:schema>
              ]]>
            </programlisting>  
 
          </section>
        
        </section>

      </section>    

      <section id="register_response_message" xreflabel="LSRegisterResponse Message">
        <title>LSRegisterResponse Message</title>

        <para>
          The <command>LSRegisterResponse</command> message is a reply to a given
          <command>LSRegisterRequest</command> message from a client application or
          service.  As discussed in <xref linkend="register_response_message" />, 
          this response message is also based on recommendations from the 
          <emphasis>NM-WG</emphasis>.
        </para>

        <section id="register_response_examples" xreflabel="LSRegisterResponse Examples">
          <title>LSRegisterResponse Examples</title>

          <programlisting>
            <![CDATA[
              <?xml version="1.0"?>

              <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                            id="message.10508492" 
                            messageIdRef="msg1" 
                            type="LSRegisterResponse">

                <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                               id="metadata.8864627" 
                               metadataIdRef="serviceLookupInfo">

                  <nmwg:key xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                            id="key.16862305">
                    <nmwg:parameters id="param.5587477">
                      <nmwg:parameter name="lsKey">
                        http://localhost:8080/axis/services/snmpMA
                      </nmwg:parameter>
                    </nmwg:parameters>
                  </nmwg:key>
                  
                  <nmwg:eventType>success.ls.register</nmwg:eventType>

                </nmwg:metadata>
              
                <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                           id="data.12743213" 
                           metadataIdRef="metadata.8864627">
                  <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/"
                         value="[1] Data elements have been registered with key [http://localhost:8080/axis/services/snmpMA]"/>
                </nmwg:data>
              
              </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            This example illustrates the most basic of 
            <command>LSRegisterResponse</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="register_response_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSRegisterResponse"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, messageIdRef, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              Like in <xref linkend="register_request_schema_message" />, this
              message element serves as the outer layer that all other
              information in the communication will travel in.  There
              are valuable attributes as well as enclosed elements that are
              required for this particular message.
            </para>
          
            <para>
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, all of which are present in the
              request message: <emphasis>id</emphasis>,
              <emphasis>messageIdRef</emphasis>,  and 
              <emphasis>type</emphasis>.  The <emphasis>id</emphasis> and 
              <emphasis>messageIdRef</emphasis> attributes 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSRegisterResponse</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSRegisterResponse/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSRegisterResponse/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="register_response_schema_metadata" /> and 
              <xref linkend="register_response_schema_data" />.  
            </para>

          </section>

          <section id="register_response_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               metadatIdRef="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:key />

                  <nmwg:eventType />

                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, eventType</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element will contain the
              results of the execution of the
              <command>LSRegisterRequest</command>.  As with the message there
              are specific pieces of information required for this element to
              be effective.
            </para>
          
            <para>
              There is only one acceptable attribute: <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the
              <xref linkend="register_response_schema_data" />.  Inside
              of the element there can only be an
              <xref linkend="register_response_schema_key" /> or an 
              <xref linkend="register_response_schema_eventType" />.
            </para>     

          </section>

          <section id="register_response_schema_key" xreflabel="Key Element">
            <title>Key Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:key xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                          id="STRING">
                        
                  <nmwg:parameters id="STRING" />

                </nmwg:key> 
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - key</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              As in <xref linkend="register_request_schema_key" /> this
              <command>key</command> element encloses a
              <command>parameters</command> 
              structure that is used to describe state.  The key does not serve
              an explicit purpose other than to offer a container for the
              additional <emphasis>parameters</emphasis>.  The namespace of this
              object is always the same and the object <command>is</command>
              required.
            </para>

            <para>
              The <xref linkend="register_response_schema_parameters" /> elements and 
              <emphasis>id</emphasis> attribute are also required for this element.
            </para>
        
          </section>           

          <section id="register_response_schema_parameters" xreflabel="Parameters Element">
            <title>Parameters Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:parameters id="STRING"
                                 xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                               
                  <nmwg:parameter name="STRING">STRING</nmwg:parameter>

                </nmwg:parameters>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameters</command> element encloses a series of 
              <command>parameter</command> structures that are used to describe 
              the state.  The namespace of this object is always the same
              and the object <command>is</command> required.  The
              <xref linkend="register_response_schema_parameter" /> elements and 
              <emphasis>id</emphasis> attribute are also required for this
              element.
            </para>
        
          </section>  
        
          <section id="register_response_schema_parameter" xreflabel="Parameter Element">
            <title>Parameter Element</title>

            <programlisting>
              <![CDATA[

                <nmwg:parameter name="STRING"
                                xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:parameter>

              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - name, value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              Just as described in
              <xref linkend="register_request_schema_parameter" />, the
              <command>parameter</command> element is meant to describe
              state in terms of both name and value.  The value can be an
              attribute (appropriately named <emphasis>value</emphasis>) or in
              the form of a text element.  The same named parameter, 
              <command>lsKey</command>, is also the only parameter that will
              be valid.  The namespace should always be the base.  
            </para>        
        
          </section>   

          <section id="register_response_schema_eventType" xreflabel="eventType Element">
            <title>eventType Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:eventType>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - eventType</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>eventType</emphasis> element is normally used to
              specify an action for a service or measurement.  We utilize it for
              this role in the <emphasis>LS Protocol</emphasis> by specifying
              the <emphasis>action</emphasis> of a response to an 
              <command>LSRegisterRequest</command>.  There are no attributes permitted
              for this element, and only text can be used as a child, specifically
              text reporting the status of the transaction. A complete list of
              <emphasis>available</emphasis> status strings is available in
              <xref linkend="result_codes" />.
            </para>  
         
          </section>            
          
          <section id="register_response_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING" 
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0" />

                </nmwg:data>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - yes</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>data</emphasis> element is reserved for the more 
              <emphasis>dynamic</emphasis> aspects of measurements, namely 
              <emphasis>time</emphasis> and <emphasis>value</emphasis> pairs.
              Although we are not reporting a measurement in this case, we are
              sending back status information.  This information is delivered
              in a <emphasis>response</emphasis> 
              <xref linkend="register_response_schema_datum" />.
            </para>
          
            <para>
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.  
            </para>      

          </section>

          <section id="register_response_schema_datum" xreflabel="Datum Element">
            <title>Datum Element</title>

            <programlisting>
              <![CDATA[
                <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0">
                  TEXT
                </nmwgr:datum>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - datum</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/result/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>datum</emphasis> element describes measurements in
              most circumstances; the intent in the
              <emphasis>LS Protocol</emphasis> is to report back a human
              readable status message.  There is only one possible attribute
              accepted for this element, <emphasis>value</emphasis>, and it may be
              used in place of an enclosed text element.  The text could be
              any message the service wishes to return.
            </para>
          
          </section>    
          
        </section>

        <section id="register_response_schema" xreflabel="LSRegisterResponse Schema">
          <title>LSRegisterResponse Schema</title>

          <para>
            As described in <xref linkend="register_request_schema" />, we 
            present the the XML <xref linkend="schema" /> for this 
            message instance as well.  Two schema definitions are presented
            here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="register_response_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              The following describes the 
              <command>LSRegisterResponse</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSRegisterResponse</emphasis> messages.  Other schemas
              can be found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                namespace nmwgr = "http://ggf.org/ns/nmwg/result/2.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute messageIdRef { xsd:string }? &
                    attribute type { 
                      "LSRegisterResponse" |
                      "http://schemas.perfsonar.net/messages/LSRegisterResponse/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element nmwg:key {
                        attribute id { xsd:string } &
                        element nmwg:parameters {
                          attribute id { xsd:string } &
                          element nmwg:parameter {
                            attribute name { "lsKey" } &
                            (
                              text |
                              attribute value { xsd:string }
                            )
                          }
                        }
                      } &
                      element nmwg:eventType { text }
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element nmwgr:datum {
                        (
                          text |
                          attribute value { xsd:string }
                        )
                      }
                    }
                  }
              ]]>
            </programlisting>  

          </section>

          <section id="register_response_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <para>
              <command>register_response.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                           xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/result/2.0/" 
                             schemaLocation="nmwgr.xsd"/>
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="messageIdRef" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSRegisterResponse"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSRegisterResponse/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:key"/>
                        <xs:element ref="nmwg:eventType"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="key">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:parameters"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="parameters">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:parameter"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="parameter">
                    <xs:complexType mixed="true">
                      <xs:attribute name="name" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="lsKey"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                      <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="eventType" type="xs:string"/>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwgr:datum"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting>  
 
            <para>
              <command>nmwgr.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" 
                             schemaLocation="register_response.xsd"/>
                  <xs:element name="datum">
                    <xs:complexType mixed="true">
                      <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting>  

          </section>
        
        </section>

      </section> 
      
    </section>       

<!-- ======================================================================= -->
<!-- DEREGISTRATION -->
<!-- ======================================================================= -->

    <section id="deregister_messages" xreflabel="Deregistration Messages">
      <title>Deregistration Messages</title>

      <para>
        To remove entire sets or particular items of data from a
        <command>Lookup Service</command> the
        <emphasis>Deregistration</emphasis> must be used.  Capable
        <emphasis>perfSONAR</emphasis> services and clients may submit
        well formatted <emphasis>request</emphasis> messages to
        <command>LS</command> instances to alter the internal state in an effort
        to better maintain information in a deployed framework.
      </para>

      <para>
        The <emphasis>request</emphasis> message typically consists of
        identification information (a previously issued
        <emphasis>key</emphasis> from the <command>LS</command>) and either an
        empty data element (to remove <command>all</command> information) or a
        data populated with specific information to be removed.  The
        <emphasis>response</emphasis> must contain result code information for
        each <emphasis>metadata</emphasis>/<emphasis>data</emphasis> pair that
        was sent in the <emphasis>request</emphasis> message.  The results
        codes, as discussed in <xref linkend="result_codes" />, must report the
        success or failure of the <emphasis>registration</emphasis> message
        and will reflect the current state of the <command>LS</command>.
      </para>

      <section id="deregister_request_message" xreflabel="LSDeregisterRequest Message">
        <title>LSDeregisterRequest Message</title>

        <para>
          The message consists of at least two parts that are linked, the 
          first being at least one <emphasis>metadata</emphasis> element, the 
          second being at least one <emphasis>data</emphasis> element.  The 
          <emphasis>metadata</emphasis> must contain service identification
          information (the <emphasis>key</emphasis> element issued from the
          <command>LS</command>) and an empty <emphasis>data</emphasis> element
          (i.e. <emphasis>data trigger</emphasis>) or populated data element
          that allows complete or selective deletion of records.
        </para>

        <section id="deregister_request_examples" xreflabel="LSDeregisterRequest Examples">
          <title>LSDeregisterRequest Examples</title>

          <para>
            The following <command>LSDeregisterRequest</command> message
            illustrates the general accepted format that an
            <command>LS</command> will be expecting.  The data section is empty
            in this first example, signifying that all stored data matching the
            key (if found) should be removed.  
          </para>

          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message type="LSDeregisterRequest"
                            id="msg1"
                            xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                <nmwg:metadata id="meta">

                  <nmwg:key id="key1">
                    <nmwg:parameters id="param1">
                      <nmwg:parameter name="lsKey">http://localhost:8080/axis/services/snmpMA</nmwg:parameter>
                    </nmwg:parameters>
                  </nmwg:key>

                </nmwg:metadata>
    
                <nmwg:data id="data" metadataIdRef="meta" />
 
              </nmwg:message>
            ]]>
          </programlisting>  

          <para>
            This second example features items inside of the data element.  If
            the key is found, and the listed items are found they will be
            removed from the <command>LS</command>.
          </para>

          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message type="LSDeregisterRequest"
                            id="msg1"
                            xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                <nmwg:metadata id="meta">

                  <nmwg:key id="key1">
                    <nmwg:parameters id="param1">
                      <nmwg:parameter name="lsKey">http://localhost:8080/axis/services/snmpMA</nmwg:parameter>
                    </nmwg:parameters>
                  </nmwg:key>

                </nmwg:metadata>
    
                <nmwg:data id="data" metadataIdRef="meta">
                  <!-- data to be deregistered -->
                </nmwg:data>
 
              </nmwg:message>
            ]]>
          </programlisting>  
         
          <para>
            These example illustrate the basic format of 
            <command>LSDeregisterRequest</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="deregister_request_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
          
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSDeregisterRequest"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>message</emphasis> element serves as a container that
              all subsequent information of a communication must travel in.  There
              are valuable attributes as well as enclosed elements that are
              required for this particular message.
            </para>
          
            <para>
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, two of which are present in the
              request message: <emphasis>id</emphasis> and 
              <emphasis>type</emphasis>.  The <emphasis>id</emphasis> attribute 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSDeregisterRequest</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSDeregisterRequest/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSDeregisterRequest/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="deregister_request_schema_metadata" /> and 
              <xref linkend="deregister_request_schema_data" />.  
            </para>

          </section>

          <section id="deregister_request_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:key />

                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, subject</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element normally contains the 
              <emphasis>static</emphasis> information regarding measurements, and
              in the case of the <emphasis>LS Protocol</emphasis> contains the
              one static use: identification of a service by service description
              or stored a stored key.  As with the message there are
              specific pieces of information required for this element to be
              effective.
            </para>
          
            <para>
              There is only one acceptable attribute: <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the corresponding
              <xref linkend="deregister_request_schema_data" />.  Inside of the
              element there can only be a 
              <xref linkend="deregister_request_schema_key" />.
            </para>       

          </section>

         <section id="deregister_request_schema_key" xreflabel="Key Element">
            <title>Key Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:key xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                          id="STRING">
                        
                  <nmwg:parameters id="STRING" />

                </nmwg:key> 
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - key</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>required</command> - no</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>key</command> element encloses a <command>parameters</command> 
              structure that is used normally used to describe state.  In this
              case we are passing back to the <command>LS</command> the name of
              an already registered service that the <command>LS</command> has
              issued to us.  The <emphasis>key</emphasis> itself does not serve
              an explicit purpose other than to offer a container for the
              additional <emphasis>parameters</emphasis>.  The namespace of
              this object is always the same and the object
              <command>is</command> required.
            </para>

            <para>
              The <xref linkend="deregister_request_schema_parameters" /> elements and 
              <emphasis>id</emphasis> attribute are also required for this element.
            </para>
        
          </section>           

          <section id="deregister_request_schema_parameters" xreflabel="Parameters Element">
            <title>Parameters Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:parameters id="STRING"
                                 xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                               
                  <nmwg:parameter name="STRING">STRING</nmwg:parameter>

                </nmwg:parameters>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameters</command> element encloses a series of 
              <command>parameter</command> structures that are used to describe 
              state.  The namespace of this object is always the same and the
              object <command>is</command> required.
            </para>

            <para>
              The <xref linkend="deregister_request_schema_parameter" /> elements and 
              <emphasis>id</emphasis> attribute are also required for this element.
            </para>
        
          </section>  
        
          <section id="deregister_request_schema_parameter" xreflabel="Parameter Element">
            <title>Parameter Element</title>

            <programlisting>
              <![CDATA[

                <nmwg:parameter name="STRING"
                                xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:parameter>

              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - name, value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameter</command> element is meant to describe
              a physical aspect of state in terms of both name and value.
              The value can be an attribute (appropriately named
              <emphasis>value</emphasis>) or in the form of a text element.  
            </para>

            <para>
              There is only one recognized values for the <emphasis>name</emphasis> 
              attribute at the current time, although we leave the possibility
              that other elements may be necessary in the future.  
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para>lsKey - Specifies the <emphasis>key</emphasis> value used
                in identifying an <command>LS</command> instance, for now this
                is simply the <emphasis>accessPoint</emphasis>.</para>
              </listitem>
            </itemizedlist>
 
            <para>
              The <emphasis>name</emphasis> attribute is required for this element, 
              the <emphasis>value</emphasis> attribute is an option instead of using
              a text element.  The namespace should always be the base.  
            </para>        
        
          </section>

          <section id="deregister_request_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING"
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <!-- contents -->

                </nmwg:data>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - varies</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>data</emphasis> element is reserved for the more 
              <emphasis>dynamic</emphasis> aspects of measurements, namely 
              <emphasis>time</emphasis> and <emphasis>value</emphasis> pairs.
              Although we are not reporting a measurement in this case, we are
              sending some form of <emphasis>data</emphasis> in the form of
              <emphasis>metadata</emphasis> descriptions from a service.
            </para>
          
            <para>
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.
            </para>
            
            <para>
              The data element can be completely empty internally (no enclosed
              elements) or it could contain metadata descriptions as in the
              <xref linkend="register_request_schema_data" />.  The empty 
              dataset indicates to the server that all data and the service
              itself will be deregistered.  Populated data causes a search for
              the specified information, and when it is found it will be
              removed.  We are leaving out an exhaustive description of the
              possible elements that may exist inside of this element due to
              the ever changing nature of <emphasis>perfSONAR</emphasis>.  Any
              <emphasis>metadata</emphasis> description that a service may be
              taking care of should be accepted.
            </para>    

          </section>

        </section>

        <section id="deregister_request_schema" xreflabel="LSDeregisterRequest Schema">
          <title>LSDeregisterRequest Schema</title>

          <para>
            An XML <xref linkend="schema" /> is typically used to describe 
            the structure and internal content of a given XML instance.  This 
            description can sometimes be expressed in XML itself.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="deregister_request_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
              the RELAX-NG schema language.  This tool, unlike similar XML schema 
              languages, does not utilize XML markup.  The syntax is similar 
              to that of a regular language, and allows for a rather compact 
              description.  The following describes the 
              <command>LSDeregisterRequest</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSDeregisterRequest</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute type { 
                      "LSDeregisterRequest" |
                      "http://schemas.perfsonar.net/messages/LSDeregisterRequest/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      element nmwg:key {
                        attribute id { xsd:string } &
                        element nmwg:parameters {
                          attribute id { xsd:string } &
                          element nmwg:parameter {
                            attribute name { "lsKey" } &
                            (
                              text |
                              attribute value { xsd:string }
                            )
                          }
                        }
                      }
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      anyElement*
                    }
                  }

                anyElement = 
                  element * { 
                    anyThing 
                  }

                anyAttribute = 
                  attribute * { text }

                anyThing = 
                  ( 
                    anyElement | 
                    anyAttribute | 
                    text 
                  )*
              ]]>
            </programlisting>  

          </section>

          <section id="deregister_request_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSDeregisterRequest"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSDeregisterRequest/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:key"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="key">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:parameters"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="parameters">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:parameter"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="parameter">
                    <xs:complexType mixed="true">
                      <xs:attribute name="name" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="lsKey"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                      <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:group minOccurs="0" maxOccurs="unbounded" ref="nmwg:anyElement"/>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:group name="anyElement">
                    <xs:sequence>
                      <xs:any processContents="skip"/>
                    </xs:sequence>
                  </xs:group>
                  <xs:attributeGroup name="anyAttribute">
                    <xs:anyAttribute processContents="skip"/>
                  </xs:attributeGroup>
                  <xs:group name="anyThing">
                    <xs:sequence>
                      <xs:group minOccurs="0" maxOccurs="unbounded" ref="nmwg:anyElement"/>
                    </xs:sequence>
                  </xs:group>
                  <xs:attributeGroup name="anyThing">
                    <xs:attributeGroup ref="nmwg:anyAttribute"/>
                  </xs:attributeGroup>
                </xs:schema>
              ]]>
            </programlisting>  
 
          </section>
        
        </section>

      </section>    
     
      <section id="deregister_response_message" xreflabel="LSDeregisterResponse Message">
        <title>LSDeregisterResponse Message</title>

        <para>
          The <command>LSDeregisterResponse</command> message is a reply to a given
          <command>LSDeregisterRequest</command> message from a client application or
          service.  As discussed in <xref linkend="deregister_request_message" />, 
          this response message is also based on recommendations from the 
          <emphasis>NM-WG</emphasis>.
        </para>

        <section id="deregister_response_examples" xreflabel="LSDeregisterResponse Examples">
          <title>LSDeregisterResponse Examples</title>

          <programlisting>
            <![CDATA[
              <?xml version="1.0"?>
              <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                            id="message.10508492" 
                            messageIdRef="msg1" 
                            type="LSDeregisterResponse">

                <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                               id="metadata.16119359" metadataIdRef="meta">

                  <nmwg:eventType>success.ls.deregister</nmwg:eventType>

                </nmwg:metadata>
              
                <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                           id="data.1842151" metadataIdRef="metadata.16119359">

                  <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">
                    Removed [1] data elements and service info for key "http://localhost:8080/axis/services/snmpMA".
                  </nmwgr:datum>

                </nmwg:data>

              </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            This example illustrates the most basic of 
            <command>LSDeregisterResponse</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="deregister_response_schema_message" xreflabel="Message Element">
            <title>Message Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:message type="LSDeregisterResponse"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, messageIdRef, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              As described in
              <xref linkend="deregister_request_schema_message" />, the 
              <emphasis>message</emphasis> element serves as a container that
              all subsequent information of a communication must travel in.  There
              are valuable attributes as well as enclosed elements that are
              required for this particular message.
            </para>
          
            <para>
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, all of which are present in the
              request message: <emphasis>id</emphasis>,
              <emphasis>messageIdRef</emphasis>,  and 
              <emphasis>type</emphasis>.  The <emphasis>id</emphasis> and 
              <emphasis>messageIdRef</emphasis> attributes 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSDeregisterResponse</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSDeregisterResponse/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSDeregisterResponse/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="deregister_response_schema_metadata" /> and 
              <xref linkend="deregister_response_schema_data" />.  
            </para>

          </section>

          <section id="deregister_response_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               metadatIdRef="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:eventType />

                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, eventType</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element will contain the results
              of the execution of the <command>LSDeregisterRequest</command>.  
              There are specific pieces of information required for this element
              to be effective.  There is only one acceptable attribute:
              <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the
              <xref linkend="deregister_response_schema_data" />.  Inside
              of the element there can only be an 
              <xref linkend="deregister_response_schema_eventType" />.
            </para>     

          </section>

          <section id="deregister_response_schema_eventType" xreflabel="eventType Element">
            <title>eventType Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:eventType>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - eventType</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>eventType</emphasis> element is normally used to
              specify an action for a service or measurement.  We utilize it for
              this role in the <emphasis>LS Protocol</emphasis> by specifying
              the <emphasis>action</emphasis> of a response to an 
              <command>LSDeregisterRequest</command>.  There are no attributes permitted
              for this element, and only text can be used as a child, specifically
              text reporting the status of the transaction. A complete list of
              <emphasis>available</emphasis> status strings is available in
              <xref linkend="result_codes" />.
            </para>  
         
          </section>            
          
          <section id="deregister_response_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING" 
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0" />

                </nmwg:data>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - yes</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>data</emphasis> element is used in this case for
              sending back status information.  This information is delivered
              in a <xref linkend="deregister_response_schema_datum" /> element.
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.  
            </para>      

          </section>

          <section id="deregister_response_schema_datum" xreflabel="Datum Element">
            <title>Datum Element</title>

            <programlisting>
              <![CDATA[
                <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0">
                  TEXT
                </nmwgr:datum>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - datum</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/result/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>datum</emphasis> element describes measurements in
              most circumstances; the intent in the
              <emphasis>LS Protocol</emphasis> is to report back a human
              readable status message.  There is only one possible attribute
              accepted for this element, <emphasis>value</emphasis>, and it may be
              used in place of an enclosed text element.  The text could be
              any message the service wishes to return.
            </para>
          
          </section>    
          
        </section>
     
        <section id="deregister_response_schema" xreflabel="LSDeregisterResponse Schema">
          <title>LSDeregisterResponse Schema</title>

          <para>
            As in the <xref linkend="deregister_response_schema" />, the
            XML <xref linkend="schema" /> is used here to describe 
            the structure and internal content of a given XML instance.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="deregister_response_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              The following describes the 
              <command>LSDeregisterResponse</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSDeregisterResponse</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                namespace nmwgr = "http://ggf.org/ns/nmwg/result/2.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute messageIdRef { xsd:string }? &
                    attribute type { 
                      "LSDeregisterResponse" |
                      "http://schemas.perfsonar.net/messages/LSDeregisterResponse/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element nmwg:eventType { text }
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element nmwgr:datum {
                        (
                          text |
                          attribute value { xsd:string }
                        )
                      }
                    }
                  }
              ]]>
            </programlisting>  

          </section>

          <section id="deregister_response_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <para>
              <command>deregister_response.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                           xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/result/2.0/" 
                             schemaLocation="nmwgr.xsd"/>
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="messageIdRef" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSDeregisterResponse"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSDeregisterResponse/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:eventType"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="eventType" type="xs:string"/>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwgr:datum"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting>  
 
            <para>
              <command>nmwgr.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" 
                             schemaLocation="deregister_response.xsd"/>
                  <xs:element name="datum">
                    <xs:complexType mixed="true">
                      <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting> 
             
          </section>
        
        </section>

      </section> 
      
    </section>       

<!-- ======================================================================= -->
<!-- KEEPALIVE -->
<!-- ======================================================================= -->
    
    <section id="keepalive_messages" xreflabel="Keepalive Messages">
      <title>Keepalive Messages</title>

      <para>
        Data, upon insertion to the <command>Lookup Service</command>, is given
        an <emphasis>expiration</emphasis> time.  The reasoning behind this is
        to monitor the contents of the <command>LS</command> and periodically
        clean out older entries that have not been updated in some time.
        Services that mysteriously disappear or are otherwise not reachable will
        therefore not be advertised via the <command>LS</command> in perpetuity.
        All services are aware of this, and must periodically update, or 
        <emphasis>keepalive</emphasis> the registration information.
      </para>
      
      <para>
        The <emphasis>request</emphasis> message typically consists of
        identification information (a previously issued
        <emphasis>key</emphasis> from the <command>LS</command>) and an
        empty data element.  Currently a single <emphasis>request</emphasis>
        will update all data for the service, instead of individual elements.  
        The <emphasis>response</emphasis> must contain result code information
        for each <emphasis>metadata</emphasis>/<emphasis>data</emphasis> pair
        that was sent in the <emphasis>request</emphasis> message.  The results
        codes, as discussed in <xref linkend="result_codes" />, must report the
        success or failure of the <emphasis>registration</emphasis> message
        and will reflect the current state of the <command>LS</command>.
      </para>

      <section id="keepalive_request_message" xreflabel="LSKeepaliveRequest Message">
        <title>LSKeepaliveRequest Message</title>

        <para>
          The message consists of at least two parts that are linked, the 
          first being at least one <emphasis>metadata</emphasis> element, the 
          second being at least one <emphasis>data</emphasis> element.  The 
          <emphasis>metadata</emphasis> must contain service identification
          information (the <emphasis>key</emphasis> element issued from the
          <command>LS</command>) and an empty <emphasis>data</emphasis> element.
        </para>

        <section id="keepalive_request_examples" xreflabel="LSKeepaliveRequest Examples">
          <title>LSKeepaliveRequest Examples</title>

          <programlisting>
            <![CDATA[
            <?xml version='1.0' encoding='UTF-8'?>
            <nmwg:message type="LSKeepaliveRequest"
                          id="msg1"
                          xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
         
              <nmwg:metadata id="key_to_keepalive">

                <nmwg:key id="key1">
                  <nmwg:parameters id="keys">
                    <nmwg:parameter name="lsKey">http://localhost:8080/axis/services/snmpMA</nmwg:parameter>
                  </nmwg:parameters>
                </nmwg:key>

              </nmwg:metadata>
     
              <nmwg:data metadataIdRef="key_to_keepalive" id="d1"/>

            </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            This example illustrates the most basic of 
            <command>LSKeepaliveRequest</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="keepalive_request_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
          
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSKeepaliveRequest"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>message</emphasis> element serves as a container that
              all subsequent information of a communication must travel in.  There
              are valuable attributes as well as enclosed elements that are
              required for this particular message.
            </para>
          
            <para>
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, two of which are present in the
              request message: <emphasis>id</emphasis> and 
              <emphasis>type</emphasis>.  The <emphasis>id</emphasis> attribute 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSKeepaliveRequest</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSKeepaliveRequest/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSKeepaliveRequest/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="keepalive_request_schema_metadata" /> and 
              <xref linkend="keepalive_request_schema_data" />.  
            </para>

          </section>

          <section id="keepalive_request_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <nmwg:key />
                  
                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, subject</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element contains 
              identification of a service by service description
              or stored a stored key.  As with the message there are
              specific pieces of information required for this element to be
              effective.
            </para>
          
            <para>
              There is only one acceptable attribute: <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the corresponding
              <xref linkend="keepalive_request_schema_data" />.  Inside of the
              element there can only be a 
              <xref linkend="keepalive_request_schema_key" />.
            </para>       

          </section>

         <section id="keepalive_request_schema_key" xreflabel="Key Element">
            <title>Key Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:key xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                          id="STRING">
                        
                  <nmwg:parameters id="STRING" />

                </nmwg:key> 
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - key</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>required</command> - no</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>key</command> element encloses a <command>parameters</command> 
              structure that is used normally used to describe state.  In this
              case we are passing back to the <command>LS</command> the name of
              an already registered service that the <command>LS</command> has
              issued to us.  The <emphasis>key</emphasis> itself does not serve
              an explicit purpose other than to offer a container for the
              additional <emphasis>parameters</emphasis>.  The namespace of
              this object is always the same and the object
              <command>is</command> required.
            </para>

            <para>
              The <xref linkend="keepalive_request_schema_parameters" /> elements and 
              <emphasis>id</emphasis> attribute are also required for this element.
            </para>
        
          </section>           

          <section id="keepalive_request_schema_parameters" xreflabel="Parameters Element">
            <title>Parameters Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:parameters id="STRING"
                                 xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                               
                  <nmwg:parameter name="STRING">STRING</nmwg:parameter>

                </nmwg:parameters>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameters</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameters</command> element encloses a series of 
              <command>parameter</command> structures that are used to describe 
              state.  The namespace of this object is always the same and the
              object <command>is</command> required.
            </para>

            <para>
              The <xref linkend="keepalive_request_schema_parameter" /> elements and 
              <emphasis>id</emphasis> attribute are also required for this element.
            </para>
        
          </section>  
        
          <section id="keepalive_request_schema_parameter" xreflabel="Parameter Element">
            <title>Parameter Element</title>

            <programlisting>
              <![CDATA[

                <nmwg:parameter name="STRING"
                                xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:parameter>

              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - parameter</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - name, value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>
              The <command>parameter</command> element is meant to describe
              a physical aspect of state in terms of both name and value.
              The value can be an attribute (appropriately named
              <emphasis>value</emphasis>) or in the form of a text element.  
            </para>

            <para>
              There is only one recognized values for the <emphasis>name</emphasis> 
              attribute at the current time, although we leave the possibility
              that other elements may be necessary in the future.  
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para>lsKey - Specifies the <emphasis>key</emphasis> value used
                in identifying an <command>LS</command> instance, for now this
                is simply the <emphasis>accessPoint</emphasis>.</para>
              </listitem>
            </itemizedlist>
 
            <para>
              The <emphasis>name</emphasis> attribute is required for this element, 
              the <emphasis>value</emphasis> attribute is an option instead of using
              a text element.  The namespace should always be the base.  
            </para>        
        
          </section>

          <section id="keepalive_request_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING"
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" />
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - no</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.
            </para>
            
            <para>
              The data element is empty internally (no enclosed
              elements), this indicates to the server that all data for the
              service will be <emphasis>updated</emphasis>.  There is no
              provision to update single data items currently.
            </para>    

          </section>

        </section>
     
        <section id="keepalive_request_schema" xreflabel="LSKeepaliveRequest Schema">
          <title>LSKeepaliveRequest Schema</title>

          <para>
            An XML <xref linkend="schema" /> is typically used to describe 
            the structure and internal content of a given XML instance.  This 
            description can sometimes be expressed in XML itself.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="keepalive_request_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
              the RELAX-NG schema language.  This tool, unlike similar XML schema 
              languages, does not utilize XML markup.  The syntax is similar 
              to that of a regular language, and allows for a rather compact 
              description.  The following describes the 
              <command>LSKeepaliveRequest</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSKeepaliveRequest</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute type { 
                      "LSKeepaliveRequest" |
                      "http://schemas.perfsonar.net/messages/LSKeepaliveRequest/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      element nmwg:key {
                        attribute id { xsd:string } &
                        element nmwg:parameters {
                          attribute id { xsd:string } &
                          element nmwg:parameter {
                            attribute name { "lsKey" } &
                            (
                              text |
                              attribute value { xsd:string }
                            )
                          }
                        }
                      }
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string }
                    }
                  }
              ]]>
            </programlisting>  

          </section>

          <section id="keepalive_request_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <programlisting>
              <![CDATA[
              <?xml version="1.0" encoding="UTF-8"?>
              <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                         elementFormDefault="qualified"
                         targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                         xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                <xs:element name="message">
                  <xs:complexType>
                    <xs:all>
                      <xs:element ref="nmwg:metadata"/>
                      <xs:element ref="nmwg:data"/>
                    </xs:all>
                    <xs:attribute name="id" use="required" type="xs:string"/>
                    <xs:attribute name="type" use="required">
                      <xs:simpleType>
                        <xs:restriction base="xs:token">
                          <xs:enumeration value="LSKeepaliveRequest"/>
                          <xs:enumeration value="http://schemas.perfsonar.net/messages/LSKeepaliveRequest/1.0"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:attribute>
                  </xs:complexType>
                </xs:element>
                <xs:element name="metadata">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element ref="nmwg:key"/>
                    </xs:sequence>
                    <xs:attribute name="id" use="required" type="xs:string"/>
                  </xs:complexType>
                </xs:element>
                <xs:element name="key">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element ref="nmwg:parameters"/>
                    </xs:sequence>
                    <xs:attribute name="id" use="required" type="xs:string"/>
                  </xs:complexType>
                </xs:element>
                <xs:element name="parameters">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element ref="nmwg:parameter"/>
                    </xs:sequence>
                    <xs:attribute name="id" use="required" type="xs:string"/>
                  </xs:complexType>
                </xs:element>
                <xs:element name="parameter">
                  <xs:complexType mixed="true">
                    <xs:attribute name="name" use="required">
                      <xs:simpleType>
                        <xs:restriction base="xs:token">
                          <xs:enumeration value="lsKey"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="value" type="xs:string"/>
                  </xs:complexType>
                </xs:element>
                <xs:element name="data">
                  <xs:complexType>
                    <xs:attribute name="id" use="required" type="xs:string"/>
                    <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                  </xs:complexType>
                </xs:element>
              </xs:schema>
              ]]>
            </programlisting>  
 
          </section>
        
        </section>

      </section>    

      <section id="keepalive_response_message" xreflabel="LSKeepaliveResponse Message">
        <title>LSKeepaliveResponse Message</title>

        <para>
          The <command>LSKeepaliveResponse</command> message is a reply to a given
          <command>LSKeepaliveRequest</command> message from a client application or
          service.  As discussed in <xref linkend="keepalive_request_message" />, 
          this response message is also based on recommendations from the 
          <emphasis>NM-WG</emphasis>.
        </para>

        <section id="keepalive_response_examples" xreflabel="LSKeepaliveResponse Examples">
          <title>LSKeepaliveResponse Examples</title>

          <programlisting>
            <![CDATA[
              <?xml version="1.0"?>
              <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                            id="message.10508492" 
                            messageIdRef="msg1" 
                            type="LSKeepaliveResponse">

                <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                               id="metadata.14955190" metadataIdRef="key_to_keepalive">

                  <nmwg:eventType>success.ls.keepalive</nmwg:eventType>

                </nmwg:metadata>
              
                <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                           id="data.5371243" metadataIdRef="metadata.14955190">

                  <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">
                    Key "http://localhost:8080/axis/services/snmpMA" was updated.
                  </nmwgr:datum>

                </nmwg:data>

              </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            This example illustrates the most basic of 
            <command>LSKeepaliveResponse</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="keepalive_response_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
          
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSDeregisterResponse"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, messageIdRef, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              Similar to what was described in
              <xref linkend="keepalive_request_schema_message" />, 
              the <emphasis>message</emphasis> element serves as a container that
              all subsequent information of a communication must travel in.  There
              are valuable attributes as well as enclosed elements that are
              required for this particular message.
            </para>
          
            <para>
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, all of which are present in the
              request message: <emphasis>id</emphasis>,
              <emphasis>messageIdRef</emphasis>,  and 
              <emphasis>type</emphasis>.  The <emphasis>id</emphasis> and 
              <emphasis>messageIdRef</emphasis> attributes 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSKeepaliveResponse</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSKeepaliveResponse/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSKeepaliveResponse/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="keepalive_response_schema_metadata" /> and 
              <xref linkend="keepalive_response_schema_data" />.  
            </para>

          </section>

          <section id="keepalive_response_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               metadatIdRef="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:eventType />

                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, eventType</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element contains results of
              the execution of the <command>LSKeepaliveRequest</command>.
              There is only one acceptable attribute: <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the
              <xref linkend="keepalive_response_schema_data" />.  Inside
              of the element there can only be an 
              <xref linkend="keepalive_response_schema_eventType" />.
            </para>     

          </section>

          <section id="keepalive_response_schema_eventType" xreflabel="eventType Element">
            <title>eventType Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:eventType>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - eventType</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>eventType</emphasis> element is normally used to
              specify an action for a service or measurement.  We utilize it for
              this role in the <emphasis>LS Protocol</emphasis> by specifying
              the <emphasis>action</emphasis> of a response to an 
              <command>LSKeepaliveRequest</command>.  There are no attributes permitted
              for this element, and only text can be used as a child, specifically
              text reporting the status of the transaction. A complete list of
              <emphasis>available</emphasis> status strings is available in
              <xref linkend="result_codes" />.
            </para>  
         
          </section>            
          
          <section id="keepalive_response_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING" 
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0" />

                </nmwg:data>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - yes</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>data</emphasis> element is used for sending back
              status information.  This information is delivered
              in a <emphasis>response</emphasis> 
              <xref linkend="keepalive_response_schema_datum" />.
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.  
            </para>      

          </section>

          <section id="keepalive_response_schema_datum" xreflabel="Datum Element">
            <title>Datum Element</title>

            <programlisting>
              <![CDATA[
                <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0">
                  TEXT
                </nmwgr:datum>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - datum</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/result/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>datum</emphasis> element describes measurements in
              most circumstances; the intent in the
              <emphasis>LS Protocol</emphasis> is to report back a human
              readable status message.  There is only one possible attribute
              accepted for this element, <emphasis>value</emphasis>, and it may be
              used in place of an enclosed text element.  The text could be
              any message the service wishes to return.
            </para>
          
          </section>   

        </section>
     
        <section id="keepalive_response_schema" xreflabel="LSKeepaliveResponse Schema">
          <title>LSKeepaliveResponse Schema</title>

          <para>
            As described in <xref linkend="keepalive_response_schema" />, 
            this XML <xref linkend="schema" /> is used to describe 
            the structure and internal content of a given XML instance.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="keepalive_response_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              The following describes the 
              <command>LSKeepaliveResponse</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSKeepaliveResponse</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                namespace nmwgr = "http://ggf.org/ns/nmwg/result/2.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute messageIdRef { xsd:string }? &
                    attribute type { 
                      "LSKeepaliveResponse" |
                      "http://schemas.perfsonar.net/messages/LSKeepaliveResponse/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element nmwg:eventType { text }
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element nmwgr:datum {
                        (
                          text |
                          attribute value { xsd:string }
                        )
                      }
                    }
                  }
              ]]>
            </programlisting>  

          </section>

          <section id="keepalive_response_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <para>
              <command>keepalive_response.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                           xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/result/2.0/" 
                             schemaLocation="nmwgr.xsd"/>
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="messageIdRef" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSKeepaliveResponse"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSKeepaliveResponse/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwg:eventType"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="eventType" type="xs:string"/>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="nmwgr:datum"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema> 
              ]]>
            </programlisting>  

            <para>
              <command>nmwgr.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" 
                             schemaLocation="keepalive_response.xsd"/>
                  <xs:element name="datum">
                    <xs:complexType mixed="true">
                      <xs:attribute name="value" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting> 
 
          </section>
        
        </section>

      </section> 
      
    </section>       

<!-- ======================================================================= -->
<!-- QUERY -->
<!-- ======================================================================= -->

    <section id="query_messages" xreflabel="Query Messages">
      <title>Query Messages</title>

      <para>
        While the previous three message descriptions have focused on the 
        management of data, the <emphasis>query</emphasis> message set is
        focused simply on accepting and answering queries by interested client
        and service applications in the <emphasis>perfSONAR</emphasis>
        framework.  The queries, like the data, are best formulated in
        <emphasis>XML</emphasis> and the other support systems it uses (i.e.
        <citation>XQuery</citation>, <citation>XPath</citation>).  The responses
        will contain the results of the query: data for success or some message
        indicating failure.
      </para>

      <section id="query_request_message" xreflabel="LSQueryRequest Message">
        <title>LSQueryRequest Message</title>

        <para>
          The message consists of at least two parts that are linked, the 
          first being at least one <emphasis>metadata</emphasis> element, the 
          second being at least one <emphasis>data</emphasis> element.  The 
          <emphasis>metadata</emphasis> must contain a subject element that will
          bear the query text.  This <emphasis>metadata</emphasis> must
          be linked to an empty <emphasis>data</emphasis> element.
        </para>

        <section id="query_request_examples" xreflabel="LSQueryRequest Examples">
          <title>LSQueryRequest Examples</title>

          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message type="LSQueryRequest"
                            id="msg1"
                            xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                            xmlns:xquery="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/">
                          
                <nmwg:metadata id="meta1">
  
                  <xquery:subject id="sub1">

                declare namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/";
                /nmwg:store[@type="LSStore"]/nmwg:metadata[@id="http://localhost:8181/axis/services/snmpMA"]

                  </xquery:subject>
                  <nmwg:eventType>http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0</nmwg:eventType>
    
                </nmwg:metadata>
  
                <nmwg:data metadataIdRef="meta1" id="d1"/>

              </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            This example illustrates the most basic of 
            <command>LSQueryRequest</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="query_request_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
          
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSKeepaliveRequest"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>message</emphasis> element serves as a container that
              all subsequent information of a communication must travel in.  There
              are valuable attributes as well as enclosed elements that are
              required for this particular message.
            </para>
          
            <para>
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, two of which are present in the
              request message: <emphasis>id</emphasis> and 
              <emphasis>type</emphasis>.  The <emphasis>id</emphasis> attribute 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSQueryRequest</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSQueryRequest/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSQueryRequest/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="query_request_schema_metadata" /> and 
              <xref linkend="query_request_schema_data" />.  
            </para>

          </section>
          
         <section id="query_request_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <xquery:subject />

                  <nmwg:eventType />

                </nmwg:metadata>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, subject</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element normally contains the 
              <emphasis>static</emphasis> information regarding measurements, and
              in the case of the <emphasis>LS Protocol</emphasis> contains the
              one static use: identification of a service by service description
              or stored a stored key.  As with the message there are
              specific pieces of information required for this element to be
              effective.
            </para>
          
            <para>
              There is only one acceptable attribute: <emphasis>id</emphasis>.  
              The id attribute can be used to track metadata state, and must
              be utilized by the corresponding
              <xref linkend="query_request_schema_data" />.  Inside of the
              element there can be a
              <xref linkend="query_request_schema_subject" /> or a 
              <xref linkend="query_request_schema_eventType" />.
            </para>       

          </section>

          <section id="query_request_schema_subject" xreflabel="Subject Element">
            <title>Subject Element</title>
            
            <programlisting>
              <![CDATA[
                <xquery:subject id="STRING" 
                                xmlns:xquery="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/">
                  TEXT
                </xquery:subject>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - subject</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The subject element must contain the text of the actual query.
              Because the <command>LS</command> stores and manges all data in 
              a native <emphasis>XML</emphasis> format the appropriate language
              to perform all queries in is <emphasis>XQuery</emphasis>.  The
              namespace of the <emphasis>subject</emphasis> element reflects
              this.  The <emphasis>id</emphasis> element is required, and there
              must be query text contained in this element.
            </para>

          </section>

          <section id="query_request_schema_eventType" xreflabel="eventType Element">
            <title>eventType Element</title>

            <programlisting>
              <![CDATA[
                <nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  STRING
                </nmwg:eventType>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - eventType</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - N/A</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>eventType</emphasis> element is normally used to
              specify an action for a service or measurement.  We utilize it for
              this role in the <emphasis>LS Protocol</emphasis> by specifying
              the <emphasis>action</emphasis> to be performed.  In the 
              <emphasis>query</emphasis> message we can only specify one of two
              possible text <emphasis>eventType</emphasis> values:
            </para>
            
            <itemizedlist mark='opencircle'>
              <listitem>
                <para>service.lookup.xquery</para>
              </listitem>
              <listitem>
                <para>http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0</para>
              </listitem>
            </itemizedlist> 

            <para>
              There are no attributes available for this element, and it is
              required.
            </para>

          </section>

          <section id="query_request_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING"
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" />
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - no</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.
            </para>
            
            <para>
              The data element is empty internally (no enclosed
              elements), acting as a <emphasis>data trigger</emphasis>.
              Loosely defined, this a way to indicate that a service needs to 
              act on a specific <emphasis>metadata</emphasis>.
            </para>    

          </section>
          
        </section>
     
        <section id="query_request_schema" xreflabel="LSQueryRequest Schema">
          <title>LSQueryRequest Schema</title>

          <para>
            An XML <xref linkend="schema" /> is typically used to describe 
            the structure and internal content of a given XML instance.  This 
            description can sometimes be expressed in XML itself.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="query_request_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
              the RELAX-NG schema language.  This tool, unlike similar XML schema 
              languages, does not utilize XML markup.  The syntax is similar 
              to that of a regular language, and allows for a rather compact 
              description.  The following describes the 
              <command>LSQueryRequest</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSQueryRequest</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                namespace xquery="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute type { 
                      "LSQueryRequest" |
                      "http://schemas.perfsonar.net/messages/LSQueryRequest/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      element xquery:subject { 
                        attribute id { xsd:string } &
                        text 
                      } &
                      element nmwg:eventType {
                        "service.lookup.xquery" |
                        "http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0"
                      }
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string }
                    }
                  }
              ]]>
            </programlisting>  

          </section>

          <section id="query_request_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <para>
              <command>query_request.xsd</command>:
            </para>
            
            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" 
                           xmlns:xquery="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/" 
                             schemaLocation="xquery.xsd"/>
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSQueryRequest"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSQueryRequest/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:choice minOccurs="0" maxOccurs="unbounded">
                        <xs:element ref="xquery:subject"/>
                        <xs:element ref="nmwg:eventType"/>
                      </xs:choice>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="eventType">
                    <xs:simpleType>
                      <xs:restriction base="xs:token">
                        <xs:enumeration value="service.lookup.xquery"/>
                        <xs:enumeration value="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0"/>
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting>  

            <para>
              <command>xquery.xsd</command>:
            </para>
            
            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified"
                           targetNamespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/"
                           xmlns:xquery="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/lookup/xquery/1.0/"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/"
                             schemaLocation="query_request.xsd"/>
                  <xs:element name="subject">
                    <xs:complexType mixed="true">
                      <xs:attribute name="id" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting> 
 
          </section>
        
        </section>

      </section>    

      <section id="query_response_message" xreflabel="LSQueryResponse Message">
        <title>LSQueryResponse Message</title>

        <para>
          The <command>LSQueryResponse</command> message is a reply to a given
          <command>LSQueryRequest</command> message from a client application or
          service.  As discussed in <xref linkend="query_request_message" />, 
          this response message is also based on recommendations from the 
          <emphasis>NM-WG</emphasis>.
        </para>

        <section id="query_response_examples" xreflabel="LSQueryResponse Examples">
          <title>LSQueryResponse Examples</title>

          <programlisting>
            <![CDATA[
              <?xml version='1.0' encoding='UTF-8'?>
              <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                            id="message.17336126" messageIdRef="msg1" 
                            type="LSQueryResponse">

                <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                               id="metadata.6007633" metadataIdRef="meta1" />

                <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                           id="data.16492090" metadataIdRef="metadata.6007633">
                  <psservice:datum xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                    &lt;nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="http://localhost:8080/axis/services/snmpMA"&gt;
                      &lt;perfsonar:subject xmlns:perfsonar="http://ggf.org/ns/nmwg/tools/org/perfsonar/1.0/" id="commonParameters"&gt;
                        &lt;psservice:service xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" id="serviceParameters"&gt;
                          &lt;psservice:serviceName&gt;My_test_MA&lt;/psservice:serviceName&gt;
                          &lt;psservice:accessPoint&gt;http://localhost:8080/axis/services/snmpMA&lt;/psservice:accessPoint&gt;
                          &lt;psservice:serviceType&gt;MA&lt;/psservice:serviceType&gt;
                          &lt;psservice:serviceDescription&gt;This is my testing MA&lt;/psservice:serviceDescription&gt;
                        &lt;/psservice:service&gt;
                      &lt;/perfsonar:subject&gt;
                    &lt;/nmwg:metadata&gt;
                  </psservice:datum>
                </nmwg:data>

              </nmwg:message>
            ]]>
          </programlisting>  
    
          <para>
            This example illustrates the most basic of 
            <command>LSQueryResponse</command> messages.  All attributes and
            elements, as listed, are required and in the proper namespaces.  A
            description of each element, as well as related attributes follows.
          </para>

          <section id="query_response_schema_message" xreflabel="Message Element">
            <title>Message Element</title>
          
            <programlisting>
              <![CDATA[
                <nmwg:message type="LSDeregisterResponse"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">

                  <nmwg:metadata />

                  <nmwg:data />

                </nmwg:message>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - message</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, messageIdRef, type</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - metadata, data</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              As described in <xref linkend="register_request_schema_message" />,
              the <emphasis>message</emphasis> element serves as a container that
              all subsequent information of a communication must travel in.
              There are only three acceptable attributes for a message in the 
              <emphasis>LS Protocol</emphasis>, all of which are present in the
              request message: <emphasis>id</emphasis>,
              <emphasis>messageIdRef</emphasis>,  and 
              <emphasis>type</emphasis>.
            </para>
            
            <para>
              The <emphasis>id</emphasis> and 
              <emphasis>messageIdRef</emphasis> attributes 
              can be used to track message state while the 
              <emphasis>type</emphasis> is used to route the message 
              through a service that is capable of handling several.  The 
              <emphasis>type</emphasis> <command>should</command> be either the
              simple string <command>LSQueryResponse</command> or the URI 
              <command>http://schemas.perfsonar.net/messages/LSQueryResponse/1.0</command>.
              The later is a new addition to this message type that will allow for
              easier extension when the protocol requires backwards compatibility.
              This type, when used in the message, will look like the following 
              example.
            </para>       

            <programlisting>
              <![CDATA[
                <nmwg:message type="http://schemas.perfsonar.net/messages/LSQueryResponse/1.0"
                              id="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <!-- ... -->
                </nmwg:message>
              ]]>
            </programlisting> 

            <para>
              Within the message element there <command>must</command> always be
              two enclosed elements, a <emphasis>metadata</emphasis> and a 
              <emphasis>data</emphasis>.  These elements, due to their complexity,
              will be explained in <xref linkend="query_response_schema_metadata" /> and 
              <xref linkend="query_response_schema_data" />.  
            </para>

          </section>

          <section id="query_response_schema_metadata" xreflabel="Metadata Element">
            <title>Metadata Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:metadata id="STRING"
                               metadatIdRef="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" />
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - metadata</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - key, eventType</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>metadata</emphasis> element, which normally
              contains some sort of response code is blank for this message
              type.  There is only two acceptable attributes:
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              Both attributes can be used to track metadata state, and must
              be utilized by the <xref linkend="query_response_schema_data" />.
            </para>     

          </section>
          
          <section id="query_response_schema_data" xreflabel="Data Element">
            <title>Data Element</title>
            
            <programlisting>
              <![CDATA[
                <nmwg:data id="STRING" 
                           metadataIdRef="STRING"
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <psservice:datum xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" />
                </nmwg:data>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - data</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - id, metadataIdRef</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - yes</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>data</emphasis> element is used for sending back
              status information.  This information is delivered
              in a <xref linkend="query_response_schema_datum" />.  The nature
              of this status is really the results of a query.
            </para>
          
            <para>
              There are only two acceptable attributes for this element: 
              <emphasis>id</emphasis> and <emphasis>metadataIdRef</emphasis>.  
              These attributes can be used to track state information, particularly
              <emphasis>metadataIdRef</emphasis> which is used in linking the 
              <emphasis>metadata</emphasis> to the <emphasis>data</emphasis>.  
            </para>      

          </section>

          <section id="query_response_schema_datum" xreflabel="Datum Element">
            <title>Datum Element</title>

            <programlisting>
              <![CDATA[
                <psservice:datum xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/">
                  TEXT
                </psservice:datum>
              ]]>
            </programlisting>  

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>localname</command> - datum</para>
              </listitem>
              <listitem>
                <para><command>namespace</command> - http://ggf.org/ns/nmwg/result/2.0/</para>
              </listitem>
              <listitem>
                <para><command>attributes</command> - value</para>
              </listitem>
              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>
              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>   
          
            <para>
              The <emphasis>datum</emphasis> element in this case will report
              the results of the original query.  Currently the backend
              database has complete control over this element and thus will
              return positive results (i.e. the actual data) or negative
              results (i.e. a message directly from the database).  
            </para>
            
            <para>
              There are no acceptable attributes for this datum, and the namespace
              must always be the same. 
            </para>

          </section>
          
        </section>

        <section id="query_response_schema" xreflabel="LSQueryResponse Schema">
          <title>LSQueryResponse Schema</title>

          <para>
            As described in <xref linkend="query_request_schema" />, 
            the XML <xref linkend="schema" /> is typically used to describe 
            the structure and internal content of a given XML instance.  This 
            abstract is generally created to allow programmatic validation of 
            XML instances and to protect a service from receiving a poorly 
            constructed message.  
          </para>
        
          <para>
            Two schema definitions are presented here, the first being the native
            form of all <emphasis>NM-WG</emphasis> schemata written in the
            <citation>RELAX-NG</citation> language and the second being a derived
            version written in <citation>XSD</citation>.
          </para>

          <section id="query_response_schema_relax" xreflabel="RELAX-NG">
            <title>RELAX-NG</title>        

            <para>
              The following describes the 
              <command>LSQueryResponse</command> schema.  Note that this 
              <command>will</command> only validate
              <emphasis>LSQueryResponse</emphasis> messages.  Other schemas can be
              found in <citation>NMWG-Schema</citation>.
            </para>

            <programlisting>
              <![CDATA[
                namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                namespace psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/"
              
                start = 
                  element nmwg:message { 
                    attribute id { xsd:string } &
                    attribute messageIdRef { xsd:string }? &
                    attribute type { 
                      "LSQueryResponse" |
                      "http://schemas.perfsonar.net/messages/LSQueryResponse/1.0"
                    } &
                    element nmwg:metadata {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string }?
                    } &
                    element nmwg:data {
                      attribute id { xsd:string } &
                      attribute metadataIdRef { xsd:string } &
                      element psservice:datum {
                        text
                      }
                    }
                  }
              ]]>
            </programlisting> 

          </section>

          <section id="query_response_schema_xsd" xreflabel="XSD">
            <title>XSD</title>        

            <para>
              This particular description was produced using tools such as 
              <citation>MSV</citation> and <citation>Trang</citation> to 
              programatically convert between schema languages.  XSD is a more
              widely accepted schema format for validation, thus we present
              this definition for use in <emphasis>perfSONAR</emphasis> services.  
            </para>

            <para>
              <command>query_response.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" schemaLocation="psservice.xsd"/>
                  <xs:element name="message">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="nmwg:metadata"/>
                        <xs:element ref="nmwg:data"/>
                      </xs:all>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="messageIdRef" type="xs:string"/>
                      <xs:attribute name="type" use="required">
                        <xs:simpleType>
                          <xs:restriction base="xs:token">
                            <xs:enumeration value="LSQueryResponse"/>
                            <xs:enumeration value="http://schemas.perfsonar.net/messages/LSQueryResponse/1.0"/>
                          </xs:restriction>
                        </xs:simpleType>
                      </xs:attribute>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="metadata">
                    <xs:complexType>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="data">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element ref="psservice:datum"/>
                      </xs:sequence>
                      <xs:attribute name="id" use="required" type="xs:string"/>
                      <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              ]]>
            </programlisting>  

            <para>
              <command>psservice.xsd</command>:
            </para>

            <programlisting>
              <![CDATA[
                <?xml version="1.0" encoding="UTF-8"?>
                <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                           elementFormDefault="qualified" 
                           targetNamespace="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                           xmlns:psservice="http://ggf.org/ns/nmwg/tools/org/perfsonar/service/1.0/" 
                           xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                  <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="test.xsd"/>
                  <xs:element name="datum" type="xs:string"/>
                </xs:schema>
              ]]>
            </programlisting>  
 
          </section>
        
        </section>

      </section> 
            
    </section>     

<!-- ======================================================================= -->

    <section id="result_codes" xreflabel="Result Codes">
      <title>Result Codes</title>
      
      <para>
        There are currently two hierarchical systems in use to return status
        information about services.  Each of these approaches takes into account
        the facts that there are many diverse services as well as different
        status messages that may be returned, but the newer of the approaches
        also allows for versioning and backwards compatibility that the original
        attempt did not consider.  The original system <command>must</command>
        continue to be supported by all services for the foreseeable future, while
        a slow phase in of the latest eventTypes is attempted.  
      </para>

      <para>
        The original system, currently used by all
        <emphasis>perfSONAR</emphasis> services and explained in
        <citation>Result Codes</citation>, relies on a static tree of status
        information that is branched first by general features (i.e. 
        <emphasis>success</emphasis>, <emphasis>error</emphasis>) and later
        by more specific characteristics such as service and error type.  This
        hierarchy is however missing the ability to offer versions of different
        codes that would have the ability to become forward or backwards
        compatible and is not in the well known URI format used by other
        eventTypes.
      </para>        

      <programlisting>
        <![CDATA[
          success.
                  ls.
                     register.
                     deregister.
                     keepalive.
                     query.
                  ma.
                     something
                     something_else
          error.
                ls.
                   register.
                   deregister.
                   keepalive.
                   query.
                ma.
                   something
                   something_else                     
        ]]>
      </programlisting>  

      <para>  
        The most recent description of this status paradigm follows the URI
        syntax already in use by other eventTypes and does allow version numbers
        to be assigned to the various messages.  This will allow services to
        pick and choose which versions they may support more readily.  
      </para>

      <programlisting>
        <![CDATA[
          http://schemas.perfsonar.net/status/
                                              success/
                                                      ls/
                                                         register/
                                                                  1.0
                                                         deregister/
                                                                    1.0
                                                         keepalive/
                                                                   1.0
                                                         query/
                                                               1.0
                                                      ma/
                                                         something/
                                                                   1.0
                                                         something_else/
                                                                        1.0
                                                                        1.1
                                              error/
                                                    ls/
                                                       register/
                                                                1.0
                                                       deregister/
                                                                  1.0
                                                       keepalive/
                                                                 1.0
                                                       query/
                                                             1.0
                                                    ma/
                                                       something/
                                                                 1.0
                                                       something_else/
                                                                      1.0
                                                                      1.1                                             
        ]]>
      </programlisting>  
          
    </section>

    <section id="protocol_extension" xreflabel="Extensions">
      <title>Extensions</title>
      
      <para>
        Extending the LS protocol to offer additional features, while keeping
        all original functionality in tact can be accomplished in a number of
        ways.
      </para>
      
    </section>  
    
  </section> 

  <glossary id="glossary">
    <title>Terms</title>

    <glossdiv id="A">
      <title>A</title>    
    </glossdiv> 
    
    <glossdiv id="B">
      <title>B</title>    
    </glossdiv> 
    
    <glossdiv id="C">
      <title>C</title>    
      <glossentry id="characteristic" xreflabel="characteristics"><glossterm>characteristic</glossterm>
        <glossdef>
          <para>Taken on the context of netmworking, these describe the 
          intrinsic properties of a portion of the network that are related 
          to the performance and reliability of the network.  See 
          <ulink url="http://www.ggf.org/documents/GFD.23.pdf">http://www.ggf.org/documents/GFD.23.pdf</ulink> 
          for more information.</para>
        </glossdef>
      </glossentry> 
      <glossentry id="chaining"><glossterm>chaining</glossterm>
        <glossdef>
          <para>
            The process of linking together elements in the 
            <xref linkend="NMWG" /> XML specification.
          </para>
        </glossdef>
        <glossseealso otherterm="filter_chaining">filter chaining</glossseealso>
        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="D">
      <title>D</title> 
      <glossentry id="data"><glossterm>data</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> XML block used 
          to store dynamic information, such as the results of a measurement.</para>
        </glossdef>
      </glossentry>        
    </glossdiv> 
    
    <glossdiv id="E">
      <title>E</title>    
    </glossdiv> 
    
    <glossdiv id="F">
      <title>F</title>  
      <glossentry id="filter_chaining" xreflabel="filter chaining"><glossterm>filter chaining</glossterm>
        <glossdef>
          <para>
            Chaining operation that is akin to performing advanced selection or 
            aggregation on a dataset.
          </para>
        </glossdef>
        <glossseealso otherterm="chaining">chaining</glossseealso>
        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>        
    </glossdiv> 
    
    <glossdiv id="G">
      <title>G</title>    
    </glossdiv> 
    
    <glossdiv id="H">
      <title>H</title>           
    </glossdiv> 
    
    <glossdiv id="I">
      <title>I</title>          
    </glossdiv> 
    
    <glossdiv id="J">
      <title>J</title>    
    </glossdiv> 
    
    <glossdiv id="K">
      <title>K</title>    
    </glossdiv> 
    
    <glossdiv id="L">
      <title>L</title>    
    </glossdiv> 
    
    <glossdiv id="M">
      <title>M</title>     
      <glossentry id="merge_chaining" xreflabel="merge chaining"><glossterm>merge chaining</glossterm>
        <glossdef>
          <para>
            Chaining that combines linked metadata items into a new 
            representation.
          </para>
        </glossdef>
        <glossseealso otherterm="filter_chaining">filter chaining</glossseealso>
        <glossseealso otherterm="chaining">chaining</glossseealso>
      </glossentry>   
      <glossentry id="metadata"><glossterm>metadata</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> XML block used 
          to store static information, such as the specific parameters of a 
          measurement.</para>
        </glossdef>
      </glossentry>     
    </glossdiv> 
    
    <glossdiv id="N">
      <title>N</title>  
      <glossentry id="NMWG"><glossterm>NM-WG</glossterm>
        <glossdef>
          <para>The performance of most grid applications is dependent on the 
          performance of the networks forming the grid. The Network 
          Measurements Working Group (NMWG) identifies network metrics 
          (aka <xref linkend="characteristic" />) useful to grid applications 
          and middleware, and develops standard mechanisms to describe and 
          publish these characteristics to the Grid.</para>
        </glossdef>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="O">
      <title>O</title>    
    </glossdiv> 
    
    <glossdiv id="P">
      <title>P</title>        
    </glossdiv>
    
    <glossdiv id="Q">
      <title>Q</title>    
    </glossdiv> 
    
    <glossdiv id="R">
      <title>R</title>  
    </glossdiv> 
    
    <glossdiv id="S">
      <title>S</title>  
      <glossentry id="schema"><glossterm>schema</glossterm>
        <glossdef>
          <para>XML specification, normally written in XML.</para>
        </glossdef>
        <glossseealso otherterm="schemata">schemata</glossseealso>
      </glossentry>   
      <glossentry id="schemata"><glossterm>schemata</glossterm>
        <glossdef>
          <para>Plural of schema.</para>
        </glossdef>
        <glossseealso otherterm="schema">schema</glossseealso>
      </glossentry>         
      <glossentry id="SOA"><glossterm>SOA</glossterm>
        <glossdef>
          <para>
            Service Oriented Architecture (SOA) is a software architectural 
            style that allows applications (services) to communicate and interact
            regardless of the environment or implementation.  
          </para>
        </glossdef>
      </glossentry>    
    </glossdiv> 
    
    <glossdiv id="T">
      <title>T</title>    
    </glossdiv> 
    
    <glossdiv id="U">
      <title>U</title>  
    </glossdiv> 
    
    <glossdiv id="V">
      <title>V</title>    
    </glossdiv> 
    
    <glossdiv id="W">
      <title>W</title>    
    </glossdiv> 
    
    <glossdiv id="X">
      <title>X</title>  
    </glossdiv> 
    
    <glossdiv id="Y">
      <title>Y</title>    
    </glossdiv> 
    
    <glossdiv id="Z">
      <title>Z</title>    
    </glossdiv>
     
  </glossary>


  <bibliography id="bibliography">
    <title>References</title>

    <biblioentry xreflabel="Result Codes">
      <abbrev>Result Codes</abbrev>
      <title>
        <ulink url="http://wiki.perfsonar.net/jra1-wiki/index.php/Result_codes">Result Codes</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="Multi-Schema XML Validator">
      <abbrev>MSV</abbrev>
      <title>
        <ulink url="https://msv.dev.java.net/">Sun Multi-Schema XML Validator (MSV)</ulink>
      </title>
    </biblioentry>
    
    <biblioentry xreflabel="Trang">
      <abbrev>Trang</abbrev>
      <title>
        <ulink url="http://www.thaiopensource.com/relaxng/trang.html">Multi-format schema converter based on RELAX NG</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="NM-WG Schema">
      <abbrev>NMWG-Schema</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu/nm-schema-base.html">NMWG Base Schema</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="RELAX-NG">
      <abbrev>RELAX-NG</abbrev>
      <title>
        <ulink url="http://relaxng.org/">RELAX-NG Schema Language</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="NM-WG">
      <abbrev>NM-WG</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu">Network Measurements Working Group</ulink>
      </title>
    </biblioentry>
    
    <biblioentry xreflabel="perfSONAR">
      <abbrev>perfSONAR</abbrev>
      <title>
        <ulink url="http://www.perfsonar.net">perfSONAR</ulink>
      </title>
    </biblioentry>  
    
    <biblioentry xreflabel="XML">
      <abbrev>XML</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML">Extensible Markup Language (XML)</ulink>
      </title>
    </biblioentry>
    
    <biblioentry xreflabel="OGF">
      <abbrev>OGF</abbrev>
      <title>
        <ulink url="http://www.ogf.org/">(Global|Open) Grid Forum</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="perfSONAR-UI">
      <abbrev>perfSONAR-UI</abbrev>
      <title>
        <ulink url="http://perfsonar.acad.bg/">perfSONAR-UI</ulink>
      </title>
    </biblioentry> 

    <biblioentry xreflabel="A Scalable Framework for Representation and Exchange of Network Measurements">
      <abbrev>Zurawski06Scalable</abbrev>
      <title>A Scalable Framework for Representation and Exchange of Network Measurements</title>
      <authorgroup>
        <author><personname>
          <firstname>J.</firstname><surname>Zurawski</surname>
        </personname></author>
        <author><personname>
          <firstname>M.</firstname><surname>Swany</surname>
        </personname></author>
        <author><personname>
          <firstname>D.</firstname><surname>Gunter</surname>
        </personname></author>
      </authorgroup>
      <confgroup>
        <confdates>March, 2006</confdates>
        <conftitle>2nd International IEEE/Create-Net Conference on Testbeds and Research Infrastructures for the Development of Networks and Communities</conftitle>
        <address>Barcelona, Spain</address>
        <confsponsor>IEEE/Create-Net</confsponsor>
      </confgroup>
    </biblioentry>

    <biblioentry xreflabel="XSD">
      <abbrev>XSD</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML/Schema">XML Schema</ulink>
      </title>
    </biblioentry> 

    <biblioentry xreflabel="XPath">
      <abbrev>XPath</abbrev>
      <title>
        <ulink url="http://www.w3.org/TR/xpath">XPath</ulink>
      </title>
    </biblioentry> 
    
    <biblioentry xreflabel="XQuery">
      <abbrev>XQuery</abbrev>
      <title>
        <ulink url="http://www.w3.org/TR/xquery/">XQuery</ulink>
      </title>
    </biblioentry> 

  </bibliography>

</article>
