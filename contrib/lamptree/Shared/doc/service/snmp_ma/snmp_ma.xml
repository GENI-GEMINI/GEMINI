<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://docbook.org/xml/4.2/docbookx.dtd">
<article>

  <articleinfo>
    <title>perfSONAR-PS SNMP MA - Complete Documentation</title>

    <author>
      <firstname>J.</firstname>
      <surname>Zurawski</surname>
      <affiliation>
        <address><email>zurawski@internet2.edu</email></address>
      </affiliation>
    </author>

    <copyright>
      <year>2007</year>
      <year>2008</year>
      <holder>Internet2</holder>
    </copyright>

  </articleinfo>

  <section id="changes" xreflabel="Document Changes">
    <title>Document Changes</title>

    <table frame="all" align="center" halign="center" width="80%"  id="table.1">
      <title>Change Log</title>
      <tgroup cols="1" align="left" colsep="1" rowsep="1">
        <colspec colnum="1" colname="c1" width="10%"/>
        <colspec colnum="2" colname="c2" width="10%"/>
        <colspec colnum="3" colname="c3" width="50%"/>
        <colspec colnum="4" colname="c4" width="30%"/>
        <thead>
          <row>
            <entry>Version</entry>
            <entry>Date</entry>
            <entry>Description</entry>
            <entry>Author(s)</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>1.0</entry>
            <entry>1/3/2008</entry>
            <entry>Initial Preparation</entry>
            <entry>J. Zurawski</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
   
  </section>

  <section id="introduction" xreflabel="Introduction">
    <title>Introduction</title>
    
    <para>
      <emphasis>perfSONAR-PS</emphasis> is an implementation of the 
      <xref linkend="perfSONAR" /> standard written in the
      <citation>Perl</citation> programming language.
      <emphasis>perfSONAR-PS</emphasis> aims for complete compatibility with
      all other implementations of the <emphasis>perfSONAR</emphasis> standard.
    </para>   
    
    <para>
      This document describes the details of the
      <emphasis>perfSONAR-PS</emphasis> SNMP based Measurement Archive
      (<command>MA</command>).  In addition to outlining the installation and
      configuration steps, a detailed guide of interface and functional behavior
      is included.  The interface specification is meant to give a 
      <emphasis>black box</emphasis> understanding of the workings of the 
      service, while the functional specification describes the inner workings 
      of the service decision making process.
    </para>
    
    <para>  
      This software offers the ability to <emphasis>publish</emphasis> data 
      collected via <xref linkend="snmp"/> variables.  This particular release 
      focuses on data that offers certain <xref linkend="characteristic"/> of
      the network, namely network <emphasis>utilization</emphasis>,
      <emphasis>errors</emphasis>, and <emphasis>discards</emphasis>.  These 
      three metrics are collected via (external) means and are normally stored 
      in Round Robin Databases (<citation>RRD</citation>).  The collection of 
      these metrics is beyond the scope if this software release, but many tools
      exist such as <citation>MRTG</citation>, <citation>SNAPP</citation>, 
      <citation>Cricket</citation>, and <citation>CACTI</citation> that are 
      capable of collecting and storing network data.
    </para>  
    
    <para>
      The <emphasis>publishing</emphasis> of <xref linkend="data"/> is 
      accomplished by exposing the data located in <emphasis>RRD</emphasis>
      files by describing the <xref linkend="metadata"/> (i.e. static
      information about the data such as how/where it was collected, etc.)  A
      Web Services (<command>WS</command>) interface is offered that allows
      client applications such as <citation>perfSONAR-UI</citation> to contact
      this service, query for specific resources, and finally present graphs
      of the results.
    </para>  
    
  </section>

  <section id="installation" xreflabel="Installation Procedures">
    <title>Installation Procedures</title>

    <para>
      Before installing the <emphasis>SNMP MA</emphasis>, be sure to check if
      the software listed in <xref linkend="prerequisites"/> is currently
      installed on the target system.  This can be done in one of two ways:
      following <xref linkend="auto_installation" /> or
      <xref linkend="manual_installation" />.  Software versions may change
      from prior releases of <emphasis>perfSONAR-PS</emphasis> without explicit
      notice.
    </para> 

    <para>
      After installing the necessary prerequisite software, the actual software
      must be installed according to <xref linkend="service_installation" />.  
      It is necessary to perform some basic configuration steps outlined in 
      <xref linkend="service_configuration" />, followed by testing the 
      configuration and installation in <xref linkend="service_testing" />.  
      Finally we can start the service with instructions in 
      <xref linkend="service_use" />.  
    </para>

    <section id="prerequisites" xreflabel="Software Prerequisites">
      <title>Software Prerequisites</title>

      <para>
        To function properly, the <emphasis>SNMP MA</emphasis> service requires
        the use of some prerequisite software to both store and mange the
        underlying data as well as assist with service duties such as parsing
        <xref linkend="XML" /> or managing the <xref linkend="SOAP" /> over
        <xref linkend="HTTP" /> transportation.  
      </para>
        
      <para>
        The following sections will guide the user through what is required, and
        how it may be installed as painlessly as possible.  
      </para>  

      <section id="perl_installation" xreflabel="Required Perl Modules">
        <title>Required Perl Modules</title>

        <para>
          There are several Perl modules that are required for the
          <emphasis>SNMP MA</emphasis> to function properly.  Some of these are
          included in the base Perl installation on many machines, although it
          is important to check all to be sure upgrades are not available.  
        </para>
   
        <para>
          The following is a list of the necessary modules for the
          <emphasis>SNMP MA</emphasis>.
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/strict.pm">strict</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/warnings.pm">warnings</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/Exporter.pm">Exporter</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~kwilliams/PathTools-3.25/Cwd.pm">Cwd</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/ext/POSIX/POSIX.pod">POSIX</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/ext/Fcntl/Fcntl.pm">Fcntl</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~jv/Getopt-Long-2.37/lib/Getopt/Long.pm">Getopt::Long</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~mschilli/Log-Log4perl-1.14/lib/Log/Log4perl.pm">Log::Log4perl</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Params-Validate-0.89/lib/Params/Validate.pm">Params::Validate</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Log-Dispatch-2.20/lib/Log/Dispatch.pm">Log::Dispatch</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Log-Dispatch-2.20/lib/Log/Dispatch/Screen.pm">Log::Dispatch::Screen</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~markpf/Log-Dispatch-FileRotate-1.16/FileRotate.pm">Log::Dispatch::FileRotate</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~gbarr/IO-1.2301/IO/File.pm">IO::File</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Time-Local-1.18/lib/Time/Local.pm">Time::Local</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~gaas/libwww-perl-5.808/lib/HTTP/Daemon.pm">HTTP::Daemon</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~gaas/libwww-perl-5.808/lib/LWP/UserAgent.pm">LWP::UserAgent</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~msergeant/XML-XPath-1.13/XPath.pm">XML::XPath</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~pajas/XML-LibXML-1.65/LibXML.pod">XML::LibXML</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~tjenness/File-Temp-0.19/Temp.pm">File::Temp</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/File/Basename.pm">File::Basename</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~jhi/Time-HiRes-1.9708/HiRes.pm">Time::HiRes</ulink></para>
          </listitem>
        </itemizedlist>
        
        <para>
          It is recommended that users utilize the installation method described
          in <xref linkend="auto_installation" />, failing back to 
          <xref linkend="manual_installation" /> if problems occur.  
        </para>

      </section>

      <section id="rrdtool_installation" xreflabel="RRDtool">
        <title>RRDtool</title>

        <para>
          <emphasis>RRDTool</emphasis> is the OpenSource industry standard,
          high performance data logging and graphing system for time series
          data.
        </para>
        
        <para>
          The <emphasis>SNMP MA</emphasis> relies exclusively on RRD as the
          backend storage to expose data.  Future iterations will incorporated
          additional database technologies, but the current state of the art
          will require <emphasis>RRDtool</emphasis>.
        </para>
        
        <para>    
          To start the installation process, download and unpack RRDTool
        </para>
        <programlisting> 
          wget -c http://oss.oetiker.ch/rrdtool/pub/rrdtool.tar.gz
          tar -zxvf rrdtool.tar.gz
        </programlisting> 
        <para>
          From inside of the install directory, configure RRDTool
        </para>
        <programlisting> 
          ./configure --prefix=/usr/local/rrdtool --enable-perl-site-install
        </programlisting> 
        <para>      
          Finalize the installation of RRDTool
        </para>            
        <programlisting> 
          make
          sudo make install
        </programlisting> 
        <para>
          Proceed to <xref linkend="post_installation" /> for information 
          regarding post installation tasks regarding setting system paths.  
        </para>          
      </section>

      <section id="auto_installation" xreflabel="Automatic Installation">
        <title>Automatic Installation</title>

        <para>
          An automatic installation script has been developed that will take
          care of obtaining libraries and software needed for this application
          as described in <xref linkend="perl_installation" /> 
          and <xref linkend="rrdtool_installation" />.  The script is named 
          <emphasis>configure.PL</emphasis> and can be executed in the
          following manner.
        </para> 
        
        <programlisting>    
          sudo perl configure.PL
        </programlisting>   
        
        <para>        
          The script will check for and attempt to install
          <emphasis>RRDtool</emphasis> for you.  This process may fail if not
          all of the supporting libraries for <emphasis>RRDtool</emphasis> are
          found.  Please see <xref linkend="rrdtool_installation_issues"/> for
          more information.  The script can be run repeatedly to find issues
          with no harm to the system.
        </para> 
      
        <para> 
          The script will also check for required perl libraries and use
          <emphasis>CPAN</emphasis> to install any that are missing or old.
          The script will report any errors that <emphasis>CPAN</emphasis>
          encountered due to missing components.  Please see
          <xref linkend="perl_installation_issues"/> if the process is not
          successful.  
        </para>   

      </section>

      <section id="manual_installation" xreflabel="Manual Installation">
        <title>Manual Installation</title>

        <para>
          The most straightforward way to install Perl modules is through the
          <emphasis>CPAN</emphasis> administrative interface available on most
          machines:
        </para>
        <programlisting> 
          sudo perl -MCPAN -e shell
        </programlisting> 
        <para>
          If this is your first time using <emphasis>CPAN</emphasis>, there
          will be several questions to answer as you prepare the interface.
          You will eventually be presented with a shell prompt.
        </para>
        <programlisting> 
          cpan[1]>
        </programlisting> 
        <para>
          Modules may be installed by typing:
        </para>
        <programlisting> 
          cpan[1]>install MODULE::NAME
        </programlisting> 
        <para>
          Instructions may appear as the installation proceeds, errors may also 
          occur that will need to be handled.  If a module is installed, a
          message may appear:
        </para>
        <programlisting> 
          cpan[1]> install MODULE::NAME
          MODULE::NAME is up to date (x.yz).   
        </programlisting> 

      </section>

      <section id="installation_issues" xreflabel="Known Installation Problems">
        <title>Known Installation Problems</title>

        <para>
          Issues regarding the installation of <emphasis>RRDtool</emphasis>
          and Perl modules are well documented for the
          <emphasis>perfSONAR-PS</emphasis> services. We present some of these
          issues here as a brief introduction to items that the
          installer/developer should be aware of.  
        </para>

        <section id="perl_installation_issues" xreflabel="Perl Modules">
          <title>Perl Modules</title>

          <para>
            Some modules require software libraries that may not be installed 
            on most systems.  Although it is normally the job of the module 
            designer to take care of these situations, this is not always the 
            case.  Specifically the XML modules
            (<emphasis>XML::XPath</emphasis>, <emphasis>XML::LibXML</emphasis>)
            require the the XML::Parser module that depends on several
            internal libraries.
          </para>
          <para>      
            If you system is equipped with a software management system (such as 
            <xref linkend="apt"/>, <xref linkend="yum"/>, or 
            <xref linkend="up2date"/>) try and locate the 
            <emphasis>xml-parser-perl</emphasis> package via the search
            interface.  This is the easiest way to avoid trouble with
            <emphasis>CPAN</emphasis>.  Additionally, ensure that
            <emphasis>libxml2-dev</emphasis>, the <emphasis>LibXML</emphasis>
            version 2 development libraries, are also available.
          </para> 

        </section>

        <section id="rrdtool_installation_issues" xreflabel="RRDtool">
          <title>RRDtool</title>
          
          <para>
            <emphasis>RRDtool</emphasis> in general is easy to install when
            using a software management system (such as <xref linkend="apt"/>,
            <xref linkend="yum"/>, or <xref linkend="up2date"/>).  Because we
            will be using 'development' tools from this software (namely the
            Perl communication libraries) we suggest a source install rather
            than a binary.  
          </para>
          
          <para>
            The source installation can be complicated by factors such as
            missing libraries, or even issues related to the
            <emphasis>C</emphasis> compiler.  Additionally, we have found that
            <emphasis>RRDtool</emphasis> does not handle certain error
            conditions gracefully, and requires a patched (supplied) to prevent
            unwanted system behavior.  
          </para>
          
          <section id="rrdtool_library_installation_issues" xreflabel="RRDtool Libraries">
            <title>RRDtool Libraries</title> 
            
            <para>        
              <emphasis>RRDtool</emphasis> requires four development libraries
              that may not be found on most systems.
            </para>   
          
            <itemizedlist mark='opencircle'>
              <listitem>
                <para>libart 2 dev</para>
              </listitem>
              <listitem>
                <para>zlib dev</para>
              </listitem>
              <listitem>
                <para>libpng 1.2 dev</para>
              </listitem>
              <listitem>
                <para>freetype 2 dev</para>
              </listitem>
            </itemizedlist>

            <para>
              It is recommended that a package updating system (such as 
              <xref linkend="apt"/>, <xref linkend="yum"/>, or 
              <xref linkend="up2date"/>) be used to find the correct versions 
              of these libraries and install them automatically.
            </para>
            <para>
              If a software management system is unavailable, the libraries can 
              be downloaded and installed from this location: 
              <ulink url="http://oss.oetiker.ch/rrdtool/pub/libs/">http://oss.oetiker.ch/rrdtool/pub/libs/</ulink>
            </para>      
            
            <para>
              Ensure that all install locations are accessible through path
              variables, see <xref linkend="post_installation" /> for more
              information.
            </para> 
                     
          </section>          

          <section id="rrdtool_patch_installation_issues" xreflabel="RRDtool Patch">
            <title>RRDtool Patch</title>          
          
            <para>        
              <emphasis>RRDtool</emphasis> is known to enter into an infinite
              loop due to a failed check on an error condition located in the
              RRDp.pm Perl module.  A patch is available in
              <command>util/</command> of this distribution.  To apply the
              patch, follow these instructions.
            </para> 
            <para> 
              Find your copy of RRDp.pm
            </para> 
            <programlisting> 
              find /usr | grep RRDp.pm
            </programlisting> 
            <para> 
              Copy the patchfile to that location
            </para> 
            <programlisting> 
              sudo cp patchfile /PATH/TO/FILE &amp;&amp; cd /PATH/TO/FILE 
            </programlisting> 
            <para> 
              Patch
            </para> 
            <programlisting> 
              sudo patch -p0 -u &lt; patchfile
            </programlisting> 
            <para> 
              Remove the patchfile
            </para> 
            <programlisting> 
              sudo rm -f patchfile
            </programlisting>           
          
          </section> 
          
        </section>

      </section>

      <section id="post_installation" xreflabel="Post Installation Tasks">
        <title>Post Installation Tasks</title>

        <para>
          Set necessary paths for <emphasis>RRDtool</emphasis> (this can be
          done from <command>/etc/profile</command>, or from other recognized
          locations).
        </para> 
        <programlisting> 
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/rrdtool/lib
          export PATH=$PATH:/usr/local/rrdtool/bin 
        </programlisting> 

      </section>

    </section>

    <section id="service_installation" xreflabel="Service Installation">
      <title>Service Installation</title>
      
      <para>
        After installing the prerequisite software, the remaining steps to
        getting the <emphasis>SNMP MA</emphasis> working are few.  The software
        directory should be placed in a common location such as
        <command>/usr/local</command> or <command>/opt</command>.  This is not
        a requirement.  Note that other paths (particularly in configuration 
        files) may need to be changed to reflect this move.
      </para>
      <para>
        There are three major configuration files that may be adjusted,
        although the software is configured to run
        <emphasis>out of the box</emphasis>.  The configurations files can be
        adjusted to personalize settings, and to add the metrics you are
        collecting of course.
      </para>
      
    </section>

    <section id="service_configuration" xreflabel="Basic Service Configuration">
      <title>Basic Service Configuration</title>
      
      <para>
        There are three major configuration files for the
        <emphasis>SNMP MA</emphasis> service.  Each file is configured to run
        <emphasis>out of the box</emphasis>, so modifying these files is only
        necessary to <emphasis>customize</emphasis> the behavior of this
        service (or make it available for non-<emphasis>localhost</emphasis>
        viewing).  
      </para>

      <para>
        A more detailed explanation of the various configuration options and
        the reasoning behind each is available in 
        <xref linkend="configuration" />.  
      </para>

      <section id="logging_configuration" xreflabel="Logging Configuration">
        <title>Logging Configuration via logger.conf</title>
        
          <para>
            This file contains information regarding logging in the
            <emphasis>perfSONAR-PS</emphasis> architecture.  Under normal
            circumstances the file will not need to be changed.  The only real
            choice worth noting during testing is choosing between the
            following three output methods.
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>log4perl.appender.A1=Log::Dispatch::Screen</command></para>
            </listitem>
            <listitem>
              <para><command>log4perl.appender.A1=Log::Dispatch::Syslog</command></para>
            </listitem>
            <listitem>
              <para><command>log4perl.appender.A1=Log::Dispatch::FileRotate</command></para>
            </listitem>
          </itemizedlist>

          <para>
            The <emphasis>Screen</emphasis> method sends log files to the 
            output screen, The <emphasis>Syslog</emphasis> method will append 
            the log messages directly to the Syslog system, and the 
            <emphasis>FileRotate</emphasis> method appends log messages to a 
            specified log file (specified via 
            <emphasis>log4perl.appender.A1.filename</emphasis>) and will 
            automatically rotate when they get too large (specified via 
            <emphasis>log4perl.appender.A1.size</emphasis>).
          </para>
          
          <para>
            The default setting is to log to the screen.        
          </para>
      </section>

      <section id="service_information_configuration" xreflabel="Service Configuration">
        <title>Service Configuration via ma.conf</title>
        
          <para>
            This file contains detailed information and settings that help
            operate the <emphasis>SNMP MA</emphasis>.  A major listing of all
            directives and their full meaning is available in
            <xref linkend="configuration_service" />.  It is noted that
            none of these things <emphasis>needs</emphasis> to be changed for
            the software to work.  These options help to customize the service
            further or avoid security restrictions (i.e. firewall ports, etc.).  
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para>
                <command>METADATA_DB_FILE</command> - Location of the
                <emphasis>store.xml</emphasis> file
              </para>
            </listitem>
            <listitem>
              <para>
                <command>RRDTOOL</command> - Path to 
                <emphasis>RRDtool</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                <command>PORT</command> - Listen port for the application
              </para>
            </listitem>
            <listitem>
              <para>
                <command>ENDPOINT</command>This is used in conjunction with the 
                port and hostname:
                <emphasis>http://HOST:PORT/end/Point/String</emphasis>
              </para>
            </listitem>
          </itemizedlist>

          <para>
            A helper utility named <emphasis>configure.pl</emphasis> (located 
            in <command>util/</command>) can help create this file by 
            providing questions regarding each value.        
          </para>
           
      </section>
      
      <section id="store_configuration" xreflabel="Storage Configuration">
        <title>Storage Configuration via store.xml</title>

          <para> 
            This file contains the metadata descriptions of each of the
            interfaces that will be offering data to the service.
            Additionally, there are also <emphasis>keys</emphasis> that list
            information used to access the data.  See the current store file
            for an example of the format, it is important to keep the format
            very similar as much of the service's usefulness depends on being
            able to search/locate information via this description.
          </para>
          
          <para>
            Further motivation as to how this file is organized, constructed, 
            and the reasons why it exists are available in 
            <xref linkend="configuration" />.
          </para>
          
      </section>

    </section>
    
    <section id="service_testing" xreflabel="Post Installation Tests">
      <title>Post Installation Tests</title>

      <para>
        As stated previously, the <command>MA</command> can run essentially out
        of the box (locally at least).  You will need two terminal sessions to
        test out the <command>MA</command>, one for the server and the other
        for a client application (included).
      </para>

      <para>
        In the first terminal, enter the directory where the software is 
        installed, run the following command.
      </para>
      
      <programlisting>
        ./ma.pl --verbose
      </programlisting>
      
      <para>    
        You will see output similar to the following example.
      </para>

      <programlisting>
        <![CDATA[
      Use of uninitialized value in scalar chomp at ./ma.pl line 188.
      Use of uninitialized value in string ne at ./ma.pl line 189.
      2007/10/31 13:02:13 (30564) DEBUG> ma.pl:119 main:: - Starting '30564'
      2007/10/31 13:02:13 (30564) DEBUG> Transport.pm:166 perfSONAR_PS::Transport::startDaemon - 
        Starting daemon.
      2007/10/31 13:02:13 (30564) DEBUG> ma.pl:136 main:: - 
        Not registering with an LS instance
      2007/10/31 13:02:13 (30565) DEBUG> ma.pl:226 main::measurementArchive - 
        Starting '30565' as the MA.
      2007/10/31 13:02:13 (30565) DEBUG> Transport.pm:187 perfSONAR_PS::Transport::acceptCall - 
        Accepting calls.
        ]]>
      </programlisting> 

      <para>
        The server is started, and it has stared its major functions:
        registering data with an <command>LS</command> and listening for
        calls.  The <command>LS</command> registration functionality is
        disabled by default.
      </para>
    
      <para>
        In the second terminal, enter the directory where the software is 
        installed, change into the <emphasis>client</emphasis> directory, and 
        run this command as follows.
      </para>
      
      <programlisting>
      ./client.pl --server=localhost --port=8081 --endpoint=perfSONAR_PS/services/snmpMA 
        requests/EchoRequest.xml
      </programlisting>
      
      <para>
        This will tell the client to contact the <command>MA</command> which is
        running on 
        <emphasis>http://localhost:8081/perfSONAR_PS/services/snmpMA</emphasis>.
      </para>
      
      <para>
        And will send a simple <emphasis>EchoRequest</emphasis> message (to see if the 
        server is active).  The client will see this output if everything is 
        running smoothly.
      </para>

      <programlisting>
        <![CDATA[
      2007/10/31 13:22:01 (31823) DEBUG> Transport.pm:145 perfSONAR_PS::Transport::getHttpURI - 
        Created URI: http://localhost:8081//perfSONAR_PS/services/snmpMA
      2007/10/31 13:22:01 (31823) DEBUG> Transport.pm:346 perfSONAR_PS::Transport::sendReceive - 
        Sending information to "http://localhost:8081//perfSONAR_PS/services/snmpMA".
      2007/10/31 13:22:01 (31823) DEBUG> Transport.pm:364 perfSONAR_PS::Transport::sendReceive - 
        Response returned.
      <?xml version="1.0"?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                         xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                         xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
        <SOAP-ENV:Header/>
        <SOAP-ENV:Body>
          <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="message.8731091" 
                        messageIdRef="echoRequest1" type="EchoResponse">
            <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="metadata.15782028" 
                           metadataIdRef="meta1">
              <nmwg:eventType>success.echo</nmwg:eventType>
            </nmwg:metadata>
            <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="data.14442771" 
                       metadataIdRef="metadata.15782028">
              <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">
                The echo request has passed.
              </nmwgr:datum>
            </nmwg:data>
          </nmwg:message>
        </SOAP-ENV:Body>
      </SOAP-ENV:Envelope>
        ]]>
      </programlisting> 

      <para>
        If you are not seeing a similar message, you may see something such as
        this.
      </para>

      <programlisting>
        <![CDATA[
      2007/10/31 13:32:29 (32494) DEBUG> Transport.pm:145 perfSONAR_PS::Transport::getHttpURI - 
        Created URI: http://localhost:8081//perfSONAR_PS/services/snmpMA
      2007/10/31 13:32:29 (32494) DEBUG> Transport.pm:346 perfSONAR_PS::Transport::sendReceive - 
        Sending information to "http://localhost:8081//perfSONAR_PS/services/snmpMA".
      2007/10/31 13:32:29 (32494) DEBUG> Transport.pm:356 perfSONAR_PS::Transport::sendReceive - 
        Send to "http://localhost:8081//perfSONAR_PS/services/snmpMA" failed.
      Empty String at ./client.pl line 106
        ]]>
      </programlisting> 

      <para>
        This message indicates that the server is not properly listening on the
        port you are contacting, perhaps it is listening on another, the port
        is firewalled, or it may not be started at all.  Please check the above
        steps, and try again.
      </para>
      
      <para>
        In the first terminal, this information will appear when the call comes
        in.
      </para>

      <programlisting>
        <![CDATA[
      2007/10/31 13:21:58 (31815) DEBUG> ma.pl:119 main:: - Starting '31815'
      2007/10/31 13:21:58 (31815) DEBUG> Transport.pm:166 perfSONAR_PS::Transport::startDaemon - 
        Starting daemon.
      2007/10/31 13:21:58 (31815) DEBUG> ma.pl:136 main:: - 
        Not registering with an LS instance
      2007/10/31 13:21:58 (31817) DEBUG> ma.pl:226 main::measurementArchive - 
        Starting '31817' as the MA.
      2007/10/31 13:21:58 (31817) DEBUG> Transport.pm:187 perfSONAR_PS::Transport::acceptCall - 
        Accepting calls.
      2007/10/31 13:22:01 (31817) INFO> Transport.pm:198 perfSONAR_PS::Transport::acceptCall - 
        Received call from:    127.0.0.1
      2007/10/31 13:22:01 (31817) DEBUG> Common.pm:281 perfSONAR_PS::Common::reMap - 
        Setting namespace "http://schemas.xmlsoap.org/soap/envelope/" with prefix "SOAP-ENV".
      2007/10/31 13:22:01 (31817) DEBUG> Common.pm:281 perfSONAR_PS::Common::reMap - 
        Setting namespace "http://ggf.org/ns/nmwg/base/2.0/" with prefix "nmwg".
      2007/10/31 13:22:01 (31817) DEBUG> Request.pm:108 perfSONAR_PS::Request::parse - 
      <?xml version="1.0"?>
      <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" type="EchoRequest" 
                    id="echoRequest1">
        <nmwg:metadata id="meta1">
          <nmwg:eventType>http://schemas.perfsonar.net/tools/admin/echo/2.0</nmwg:eventType>
        </nmwg:metadata>
        <nmwg:data id="data1" metadataIdRef="meta1"/>
      </nmwg:message>
      2007/10/31 13:22:01 (31817) DEBUG> Request.pm:183 perfSONAR_PS::Request::setResponse - 
      <?xml version="1.0"?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
                         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
        <SOAP-ENV:Header/>
        <SOAP-ENV:Body>
          <nmwg:message xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="message.8731091" 
                        messageIdRef="echoRequest1" type="EchoResponse">
            <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="metadata.15782028" 
                           metadataIdRef="meta1">
              <nmwg:eventType>success.echo</nmwg:eventType>
            </nmwg:metadata>
            <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" id="data.14442771" 
                       metadataIdRef="metadata.15782028">
              <nmwgr:datum xmlns:nmwgr="http://ggf.org/ns/nmwg/result/2.0/">
                The echo request has passed.
              </nmwgr:datum>
            </nmwg:data>
          </nmwg:message>
        </SOAP-ENV:Body>
      </SOAP-ENV:Envelope>
      2007/10/31 13:22:01 (31817) DEBUG> SNMP.pm:147 perfSONAR_PS::MA::SNMP::receive - 
        Received 'shadow' request from below; no action required.
      2007/10/31 13:22:01 (31817) INFO> Request.pm:271 perfSONAR_PS::Request::finish - 
        Seconds required to handle request from 127.0.0.1: 0
      2007/10/31 13:22:01 (31817) DEBUG> Request.pm:275 perfSONAR_PS::Request::finish - 
        Closing call.
      2007/10/31 13:22:01 (31817) DEBUG> Transport.pm:187 perfSONAR_PS::Transport::acceptCall - 
        Accepting calls.
        ]]>
      </programlisting> 

      <para>
        The other messages in the <emphasis>client/requests</emphasis> may also
        be tried, with similar results.
      </para>
      
    </section>
    
    <section id="service_use" xreflabel="Service Use">
      <title>Service Use</title>

      <para>
        The software can be run as the following command.
      </para>
      
      <programlisting>
        ./ma.pl
      </programlisting>

      <para>
        This will background the process automatically.  Be sure to adjust your 
        logging settings in <emphasis>logger.conf</emphasis>.
      </para>
      
    </section>
      
  </section>



  <section id="configuration" xreflabel="Metadata and System Configuration">
    <title>Metadata and System Configuration</title>
    
    <para>
      In <xref linkend="service_configuration" /> we briefly introduced
      some of the configuration that is necessary for the
      <emphasis>SNMP MA</emphasis> in the context of getting the deployment
      to work smoothly.  We will build upon the previous explanations in this
      section with a deeper description of the three configuration files, as
      well as some theory regarding the design and layout of these files.
    </para>      

    <section id="configuration_logging" xreflabel="Logging Configuration">
      <title>Detailed Logging Configuration</title>
        
      <para>
        The logging facility used in this software is 
        <citation>log4perl</citation>, a derivative of the popular
        <emphasis>log4j</emphasis> logging package used in Java.  Log4perl
        offers the same ease of use as <emphasis>log4j</emphasis> does by
        allowing the user to control the <emphasis>level</emphasis>
        of logging used, thus increase or decreasing the amount of reported 
        information.  The ability to log is delivered through the use of a 
        small log object, and single method calls based on level to output
        information.
      </para>  
 
      <para>
        The logging is controlled via a very small configuration file, 
        included in this package.  Most interesting options are included
        in this file already, and under normal circumstances it should
        not be edited.  The following brief overview describes the
        various directives of this file and how they may be twiddled to
        better suit the interested user.  Those interested in adding
        options not included with the software may do so, but at their
        own risk.
      </para>
      
      <itemizedlist mark='opencircle'>
        <listitem>
          <para>
            <command>log4perl.logger.perfSONAR_PS=DEBUG, A1</command> -
            Establishes the <emphasis>top</emphasis> of the hierarchy for the
            logging object (perfSONAR_PS), sets the default log level
            (<emphasis>DEBUG</emphasis> in this case, you are free to choose
            <emphasis>TRACE</emphasis>, <emphasis>DEBUG</emphasis>, 
            <emphasis>INFO</emphasis>, <emphasis>WARN</emphasis>, 
            <emphasis>ERROR</emphasis>, or <emphasis>FATAL</emphasis>), and
            finally gives the object a <emphasis>localname</emphasis> (A1 in
            this case).  The local name will be used to set other options on
            this new object we have created. 
          </para>
        </listitem>          
        <listitem>
          <para>
            <command>log4perl.appender.A1=DISPATCHER</command> - Pick one of
            several dispatching entities to record the log messages that are
            thrown.  The common choices are as follows.
          </para>
          <itemizedlist mark='opencircle'>
            <listitem>
              <para>
                <command>log4perl.appender.A1=Log::Dispatch::Screen</command> -
                Output log messages directly to the screen.</para>
            </listitem>
            <listitem>
              <para>
                <command>log4perl.appender.A1=Log::Dispatch::Syslog</command> -
                Output log messages to the syslog facility.</para>
            </listitem>
            <listitem>
              <para>
                <command>log4perl.appender.A1=Log::Dispatch::FileRotate</command> -
                Output log messages to the log file specified by 
                <emphasis>log4perl.appender.A1.filename</emphasis>.  The log
                file (<emphasis>log4perl.appender.A1.filename=log/perfSONAR.log</emphasis>) 
                will then be <emphasis>rotated</emphasis> according to
                size (<emphasis>log4perl.appender.A1.max</emphasis>) and 
                number (<emphasis>log4perl.appender.A1.size</emphasis>).  
              </para>
            </listitem>
          </itemizedlist>
        </listitem>          
        <listitem>
          <para>
            <command>log4perl.appender.A1.filename=log/perfSONAR.log</command> -
            specify the location of a log file, can be absolute (i.e. 
            <emphasis>/path/to/file</emphasis>) or relative (i.e. 
            <emphasis>./path/to/file</emphasis>).  Be sure the user running the
            service has permission to write the log file.  Note that this
            option is really only valid when used with the 
            <emphasis>log4perl.appender.A1=Log::Dispatch::FileRotate</emphasis> 
            option.
          </para>
        </listitem>    
        <listitem>
          <para>
            <command>log4perl.appender.A1.max=5</command> - Signifies the
            <emphasis>number</emphasis> of old log files to keep around when
            rotating logs.  Note that this option is really only valid when
            used with the <emphasis>log4perl.appender.A1=Log::Dispatch::FileRotate</emphasis> 
            option.
          </para>
        </listitem>    
        <listitem>
          <para>
            <command>log4perl.appender.A1.size=16777216</command> - Signifies
            the <emphasis>size</emphasis> a log file can attain before being
            rotated out.  Note that this option is really only valid when used
            with the 
            <emphasis>log4perl.appender.A1=Log::Dispatch::FileRotate</emphasis> 
            option.
          </para>
        </listitem>    
        <listitem>
          <para>
            <command>log4perl.appender.A1.mode=append</command> - Sets the mode
            to append, this should not be altered.
          </para>
        </listitem>    
        <listitem>
          <para>
            <command>log4perl.appender.A1.layout=Log::Log4perl::Layout::PatternLayout</command> - 
            Uses a standard logging pattern when recording info.  We will alter
            this with
            <emphasis>log4perl.appender.A1.layout.ConversionPattern</emphasis>.
          </para>
        </listitem>              
        <listitem>
          <para>
            <command>log4perl.appender.A1.layout.ConversionPattern=%d (%P) %p&gt; %F{1}:%L %M - %m%n</command> - 
            Sets the logging output to be the date and time, the PID, the
            logging mode, the module name, the line number, the module object
            hierarchy, the function, and finally the message to be printed.  
          </para>
        </listitem>
      </itemizedlist>

    </section>

    <section id="configuration_service" xreflabel="Service Configuration">
      <title>Detailed Service Configuration</title>

      <para>
        The <emphasis>ma.conf</emphasis> file describes configurable options
        about the service that can be specified by the user.  Items that 
        deal with important system information (i.e.
        <command>METADATA_DB_FILE</command>), performance(i.e.
        <command>MAX_WORKER_PROCESSES</command>), and style 
        (i.e. <command>SERVICE_NAME</command>) are included in this file.  The
        following listing describes the various options that can be adjusted
        in detail.  
      </para>

      <itemizedlist mark='opencircle'>
        <listitem>
          <para>
            <command>METADATA_DB_TYPE</command> - <emphasis>Type</emphasis>
            of the metadata database, this should be <emphasis>file</emphasis>
            (and only file) for this particular service.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>METADATA_DB_NAME</command> - Not to be used in this
            service.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>METADATA_DB_FILE</command> - Location of the
            <emphasis>store.xml</emphasis> file, 
            the location of all metadata and key descriptions.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>RRDTOOL</command> - Path to the <emphasis>BINARY</emphasis>
            for <emphasis>RRDtool</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>PORT</command> - Listen port for the application.
            This should be something that can be accessed from the outside
            world (not blocked by firewall rules, etc.).
          </para>
        </listitem>
        <listitem>
          <para>
            <command>ENDPOINT</command> - An <emphasis>endPoint</emphasis> is a
            contact string that a service is listening on.  This is used in
            conjunction with the port and hostname:
            <emphasis>http://HOST:PORT/end/Point/String</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>
            <command>DEFAULT_RESOLUTION</command> - This is a value that
            pertains to the <emphasis>resolution</emphasis> used in the
            <emphasis>RRA</emphasis>s in an <emphasis>RRD</emphasis>.  It can
            be left blank if unsure.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>LS_REGISTRATION_INTERVAL</command>  - The interval of time
            (in seconds) that this service will contact the
            <emphasis>LS_INSTANCE</emphasis> to register itself.  This value
            can be <emphasis>0</emphasis> if you do not want to register with
            an <command>LS</command>.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>LS_INSTANCE</command> - The <command>LS</command> that
            will be contacted to register this service.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>SERVICE_NAME</command> - String describing the
            <emphasis>name</emphasis> of this <command>MA</command>.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>SERVICE_ACCESSPOINT</command> - String describing the 
            <emphasis>accessPoint</emphasis> of this <command>MA</command>.
            This string is how the service can be reached:
            <emphasis>http://HOST:PORT/end/Point/String</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>
            <command>SERVICE_TYPE</command> - String describing the
            <emphasis>type</emphasis> of this <command>MA</command>, it can be
            just <emphasis>MA</emphasis> or <emphasis>SNMP MA</emphasis>, etc.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>SERVICE_DESCRIPTION</command> - String describing this
            <command>MA</command>, it can include location info, etc.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>MAX_WORKER_PROCESSES</command> - Maximum number of child
            processes that can be spawned at a given time.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>MAX_WORKER_LIFETIME</command> - Maximum lifetime a child
            has to do work (eliminates hung children)
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Note that for the service to be useful, it must be configured
        correctly, and sanely.  Items that may seem simple (such as the
        <command>SERVICE_</command> based directives) will become propagated
        through the system on registration to information services.  Please
        take time to specify the information to make your service function
        correctly and be useful to others.  
      </para>
 
    </section>
      
      
      
    <section id="configuration_store" xreflabel="Storage Configuration">
      <title>Detailed Storage Configuration</title>

      <para>
        The storage configuration, provided by the
        <emphasis>store.xml</emphasis> file, is the most important aspect of
        the <emphasis>SNMP MA</emphasis> service.  This file is responsible for
        describing the nature of the measurements, as well as providing the
        <emphasis>path</emphasis> that must be followed to retrieve the
        relevant collected measurements.  
      </para>

      <para>
        Close inspection of this file reveals a rather predictable pattern, 
        <citation>NMWG</citation> formatted <citation>data</citation> and 
        <citation>metadata</citation> blocks that are linked together via 
        <emphasis>id</emphasis> values.  Each <emphasis>metadata</emphasis>
        block contains an <emphasis>interface</emphasis> description; this
        describes an endpoint of a physical connection between networked
        devices (the most common example being ports of a router).  Each
        <emphasis>data</emphasis> block contains information regarding backend
        storage.  There are normally two of these descriptions for each 
        physical interface representing the <emphasis>direction</emphasis>
        information may travel.
      </para>

      <para>
        We will now take a closer look at each of these structures, starting
        first with the <emphasis>metadata</emphasis>, then moving to the
        <emphasis>data</emphasis>.  Each block contains required and optional
        elements (see <xref linkend="configuration_schema" /> for a
        <citation>schema</citation>).  After describing each component, common
        practices and potential errors will be discussed. 
      </para>

      <section id="configuration_store_metadata" xreflabel="Metadata Structure">
        <title>Metadata Structure</title>

        <para>
          The following description represents a <emphasis>complete</emphasis>
          markup of the possible elements that may be used in describing an
          interface in the <emphasis>SNMP MA</emphasis> service.  The XML is
          also completely annotated with values, namespaces, and related
          prefixes.  We will examine each of these items in turn.
        </para>

        <programlisting>
          <![CDATA[
            <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                           id="m-in-netutil-1">
              <netutil:subject xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" 
                               id="s-in-netutil-1">
                <nmwgt:interface xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                  <nmwgt:ifAddress type="ipv4">127.0.0.1</nmwgt:ifAddress>
                  <nmwgt:hostName>localhost</nmwgt:hostName>
                  <nmwgt:ifName>eth0</nmwgt:ifName>
                  <nmwgt:ifIndex>2</nmwgt:ifIndex>
                  <nmwgt:direction>in</nmwgt:direction>
                  <nmwgt:capacity>1000000000</nmwgt:capacity>
                  <nmwgt:ifDescription>localhost 1G Ethernet Connection</nmwgt:ifDescription>
                  <nmwgt:description>localhost 1G Ethernet Connection</nmwgt:description>
                  <nmwgt:authRealm>public</nmwgt:authRealm>
                </nmwgt:interface>
              </netutil:subject>
              <nmwg:eventType>
                http://ggf.org/ns/nmwg/tools/snmp/2.0
              </nmwg:eventType>
              <nmwg:eventType>
                http://ggf.org/ns/nmwg/characteristic/utilization/2.0
              </nmwg:eventType>
              <nmwg:parameters id="p-in-netutil-1">
                <nmwg:parameter name="supportedEventType">
                  http://ggf.org/ns/nmwg/tools/snmp/2.0
                </nmwg:parameter>
                <nmwg:parameter name="supportedEventType">
                  http://ggf.org/ns/nmwg/characteristic/utilization/2.0
                </nmwg:parameter>
              </nmwg:parameters>
            </nmwg:metadata> 
          ]]>
        </programlisting>
       
        <section id="configuration_store_metadata_metadata" xreflabel="Metadata">
          <title>Metadata</title>

          <programlisting>
            <![CDATA[
              <nmwg:metadata id="STRING"
                             metadataIdRef="STRING"
                             xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                
                <netutil:subject id="STRING" 
                                 xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" />
                
                <nmwg:eventType>STRING</nmwg:eventType>
                
                <nmwg:parameters id="STRING" />
                
              </nmwg:metadata> 
            ]]>
          </programlisting>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - metadata</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - id, metadataIdRef</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - subject, parameters, eventType</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The metadata element encloses all <emphasis>static</emphasis>
            descriptors for a measured entity.  The <emphasis>SNMP MA</emphasis>
            is focused on delivering SNMP variables collected for various
            interfaces of a networked device, therefore most of the information
            is focused on modeling this object.  The namespace of this object
            is always the same and the object <command>is</command> required.
          </para>
          
          <para>
            There are three major required elements that must be enclosed in a 
            <command>metadata</command> description as well as two attributes, 
            one  of which is required.  The 
            <xref linkend="configuration_store_metadata_subject" />, 
            <xref linkend="configuration_store_metadata_eventType" />, and 
            <xref linkend="configuration_store_metadata_parameters" />
            elements are required for this element.  The <emphasis>id</emphasis>
            element is required, while the <emphasis>metadataIdRef</emphasis>
            is optional (and should be avoided due to the principal of 
            <emphasis>metadata chaining</emphasis> that may interpret this to
            mean something not intended).  
          </para>

        </section>

        <section id="configuration_store_metadata_subject" xreflabel="Subject">
          <title>Subject</title>
                 
          <programlisting>
            <![CDATA[
              <netutil:subject id="STRING" 
                               xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/">
              
                <nmwgt:interface xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/" />
              
              </netutil:subject>
            ]]>
          </programlisting>                 
                    
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - subject</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - Can be one of the following:
                <itemizedlist mark='opencircle'>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/base/2.0/ - Most General</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/characteristic/utilization/2.0/</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/characteristic/errors/2.0/</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/characteristic/discards/2.0/</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/tools/snmp/2.0/</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - interface</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <command>subject</command> element encloses the description of
            the entity being measured.  For the <emphasis>SNMP MA</emphasis>
            the <command>subject</command> will <command>always</command>
            contain an interface element.  There are several namespaces that
            are possible when describing interfaces for this service, as listed
            above.  The most general namespace should be used when there 
            are potentially many <emphasis>eventTypes</emphasis> that can be
            used to describe an interface.  Note that querying clients,
            especially legacy clients, may only know of the
            <emphasis>utilization</emphasis> namespace.  
          </para>
          
          <para>
            An acceptable rule of thumb is to specify each interface (both 
            directions) in as many namespaces as possible to make your service 
            appealing to all clients.  For example the basic
            <emphasis>store.xml</emphasis> file shipped with this software
            contains a single interface, with two directions, only taking into
            account a single <emphasis>characteristic</emphasis>: 
            <emphasis>utilization</emphasis>.  To add more
            <emphasis>characteristics</emphasis> simple copy both
            <emphasis>metadata</emphasis> and <emphasis>data</emphasis> pairs,
            change the namespace of the <command>subject</command>, and change
            the eventType.  This solution for now is cumbersome, but the
            inclusion of legacy clients into the <emphasis>perfSONAR</emphasis> 
            framework is necessary for the short term.
          </para>

          <programlisting>
            <![CDATA[
              <nmwg:metadata xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                             id="m-in-neterr-1">
                <neterr:subject xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" 
                                id="s-in-neterr-1">
                  <nmwgt:interface xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                    <nmwgt:ifAddress type="ipv4">127.0.0.1</nmwgt:ifAddress>
                    <nmwgt:hostName>localhost</nmwgt:hostName>
                    <nmwgt:ifName>eth0</nmwgt:ifName>
                    <nmwgt:ifIndex>2</nmwgt:ifIndex>
                    <nmwgt:direction>in</nmwgt:direction>
                    <nmwgt:capacity>1000000000</nmwgt:capacity>
                    <nmwgt:ifDescription>localhost 1G Ethernet Connection</nmwgt:ifDescription>
                    <nmwgt:description>localhost 1G Ethernet Connection</nmwgt:description>
                    <nmwgt:authRealm>public</nmwgt:authRealm>
                  </nmwgt:interface>
                </neterr:subject>
                <nmwg:eventType>
                  http://ggf.org/ns/nmwg/tools/snmp/2.0
                </nmwg:eventType>
                <nmwg:eventType>
                  http://ggf.org/ns/nmwg/characteristic/errors/2.0
                </nmwg:eventType>
                <nmwg:parameters id="p-in-neterr-1">
                  <nmwg:parameter name="supportedEventType">
                    http://ggf.org/ns/nmwg/tools/snmp/2.0
                  </nmwg:parameter>
                  <nmwg:parameter name="supportedEventType">
                    http://ggf.org/ns/nmwg/characteristic/errors/2.0
                  </nmwg:parameter>
                </nmwg:parameters>
              </nmwg:metadata> 
            ]]>
          </programlisting>

          <para>
            There is one major element that must be enclosed in a 
            <command>subject</command> description as well as one required 
            attribute. 
          </para>          
          
          <para>
            The <xref linkend="configuration_store_metadata_interface" /> is 
            required for this element.  The <emphasis>id</emphasis> element
            is also required.
          </para>

        </section>
        
        <section id="configuration_store_metadata_eventType" xreflabel="EventType">
          <title>EventType</title>
          
          <programlisting>
            <![CDATA[
              <nmwg:eventType xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                STRING
              </nmwg:eventType>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - eventType</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - Text, representing a URI</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <command>eventType</command> element describes the 
            <emphasis>tool</emphasis> or <emphasis>characteristic</emphasis>
            that best classifies a measurement.  This element can only be from
            the <emphasis>base</emphasis> namespace, and should not have any 
            attributes or elements.  It must contain text that forms a URI
            (similar to the namespaces).  There may be multiple 
            <command>eventType</command> elements in single element to allow
            multiple classifications.  
          </para>
     
        </section>
        
        <section id="configuration_store_metadata_parameters" xreflabel="Parameters">
          <title>Parameters</title>
          
          <programlisting>
            <![CDATA[
              <nmwg:parameters xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                               id="STRING">
                               
                <nmwg:parameter name="STRING">STRING</nmwg:parameter>

              </nmwg:parameters>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - </para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - Can be one of the following:
                <itemizedlist mark='opencircle'>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/base/2.0/ - Most General</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/characteristic/utilization/2.0/</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/characteristic/errors/2.0/</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/characteristic/discards/2.0/</para>
                  </listitem>
                  <listitem>
                    <para>http://ggf.org/ns/nmwg/tools/snmp/2.0/</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - parameter</para>
            </listitem>
            <listitem>
              <para><command>required</command> - flexible</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <command>parameters</command> element is designed to contain
            variable aspects of the static <emphasis>metadata</emphasis>.
            These can be viewed similar to <emphasis>parameters</emphasis> that
            are passed to a system call.  The <emphasis>SNMP MA</emphasis> is
            only concerned with <emphasis>parameters</emphasis> that are related
            to <command>eventType</command>, namely the parameter named
            <emphasis>supportedEventType</emphasis>.  
          </para>
          
          <para>
            The <command>parameters</command> element, like the 
            <command>subject</command> element, can be in one of several 
            namespaces depending on the nature of the internal data.  If there
            are <emphasis>parameters</emphasis> that pertain to the
            <emphasis>subject</emphasis> specifically (i.e. options regarding
            utilization or errors for example) it makes the most sense to use
            this particular namespace.  The most general case is accepted, 
            and used by many services however.  
          </para>
          
          <para>
            The <emphasis>id</emphasis> attribute is required on this element.
            There may be any number of nested 
            <xref linkend="configuration_store_metadata_parameter" /> 
            elements, although there should always be at least one, otherwise
            this element would not be necessary.  We do not make a strict 
            <emphasis>requirement</emphasis> that it be present, although for
            backwards compatibility reasons the 
            <emphasis>supportedEventType</emphasis> is always necessary.
          </para>

        </section>

        <section id="configuration_store_metadata_parameter" xreflabel="Parameter">
          <title>Parameter</title>
          
          <programlisting>
            <![CDATA[
              <nmwg:parameter name="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                STRING or ANY
              </nmwg:parameter>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - parameter</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - name, value</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text, Any</para>
            </listitem>
            <listitem>
              <para><command>required</command> - flexible</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <command>parameter</command> element serves as a wrapper around
            name/value pairs.  The normal use case is an attribute called 
            <emphasis>name</emphasis>, and then an accompanying attribute called
            <emphasis>value</emphasis>, or alternatively a text or other complex
            element.  The namespace of <emphasis>parameter</emphasis> 
            <command>should</command> always be the base, although future
            iterations may change this.  
          </para>
          
          <para>
            The <emphasis>name</emphasis> is always required, and the 
            <emphasis>value</emphasis> attribute is optional when a text or
            complex element is used in it's place.  If the
            <emphasis>parameters</emphasis> element is present, there 
            <command>must</command> always be at least one 
            <emphasis>parameter</emphasis> to accompany it.  
          </para>
          
        </section>
 
        <section id="configuration_store_metadata_interface" xreflabel="Interface">
          <title>Interface</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:interface xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                <nmwgt:ifAddress type="ipv4">STRING</nmwgt:ifAddress>
                <nmwgt:hostName>STRING</nmwgt:hostName>
                <nmwgt:ifName>STRING</nmwgt:ifName>
                <nmwgt:ifIndex>(LONG) INTEGER</nmwgt:ifIndex>
                <nmwgt:direction>STRING</nmwgt:direction>
                <nmwgt:capacity>(LONG) INTEGER</nmwgt:capacity>
                <nmwgt:ifDescription>STRING</nmwgt:ifDescription>
                <nmwgt:description>STRING</nmwgt:description>
                <nmwgt:authRealm>STRING</nmwgt:authRealm>
              </nmwgt:interface>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - interface</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - ifAddress, hostName, ifName, ifIndex, direction, capacity, ifDescription, description, authRealm</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <command>interface</command> element represents the entity being 
            measured, in this case the physical interface connecting network
            capable devices as seen through the lens of SNMP.  This element is 
            a <emphasis>container</emphasis> for other more descriptive elements, 
            and may contain many elements as enumerated above.  There are no
            attributes required for this element.  The namespace we are interested
            in is <emphasis>version 2</emphasis> of the NMWG topology schema.  
            Future service releases can support other topology extensions.  
          </para>

        </section>
        
        <section id="configuration_store_metadata_ifAddress" xreflabel="IfAddress">
          <title>IfAddress</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:ifAddress type="(ipv4 | ipv6 | hostname)" xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:ifAddress>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - ifAddress</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - type, value</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            This required element represents the contact address of a particular
            interface.  This should be viewed as a <emphasis>layer 3</emphasis>
            interface due to this fact, despite not being named as such.  The
            only attribute is <emphasis>type</emphasis> and it is required;
            this attribute should be <emphasis>ipv4</emphasis>,
            <emphasis>ipv6</emphasis>, or <emphasis>hostname</emphasis> to
            describe the enclosed data.  The optional <emphasis>value</emphasis>
            element may be used if a text element is not.  This element should
            always be in the <emphasis>version 2</emphasis> topology namespace.  
          </para>

        </section>

        <section id="configuration_store_metadata_hostName" xreflabel="HostName">
          <title>HostName</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:hostName xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:hostName>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - hostName</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - no</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>hostName</emphasis> element is used to specify a
            hostname for an interface (if applicable).  This is an optional 
            element that has no attributes, and can only contain text.  This
            element should always be in the <emphasis>version 2</emphasis>
            topology namespace.  
          </para>

        </section>
        
        <section id="configuration_store_metadata_ifName" xreflabel="IfName">
          <title>IfName</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:ifName xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:ifName>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - ifName</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>ifName</emphasis> element is used to specify a name 
            for the interface (if applicable).  This element is required,
            has no attributes, and can only contain text.  This element should 
            always be in the <emphasis>version 2</emphasis> topology namespace.  
          </para>

        </section>
        
        <section id="configuration_store_metadata_ifIndex" xreflabel="IfIndex">
          <title>IfIndex</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:ifIndex xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                (LONG) INTEGER
              </nmwgt:ifIndex>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - ifIndex</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - no</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>ifIndex</emphasis> element is used to specify the
            index value this interface holds within the SNMP systems.  This is
            an optional element that has no attributes, and can only contain
            text.  This element should always be in the 
            <emphasis>version 2</emphasis> topology namespace.  
          </para>
          
        </section>

        <section id="configuration_store_metadata_direction" xreflabel="Direction">
          <title>Direction</title>

          <programlisting>
            <![CDATA[
              <nmwgt:direction xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:direction>
            ]]>
          </programlisting>
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - direction</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>direction</emphasis> element is used to specify the
            direction data is traveling on an interface (relative to the 
            collection).  This element is required, has no attributes, and 
            can only contain text.  This element should always be in the 
            <emphasis>version 2</emphasis> topology namespace.  
          </para>

        </section>
        
        <section id="configuration_store_metadata_capacity" xreflabel="Capacity">
          <title>Capacity</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:capacity xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                (LONG) INTEGER
              </nmwgt:capacity>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - capacity</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - no</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>capacity</emphasis> element is used to specify the maximum
            amount of information that can flow through the interface (theoretically) for
            a unit of time.  The interpretation of this value is usually left up to the 
            service deployer, but commonly this number is reported in bps.  This is an 
            optional element that has no attributes, and can only contain text.  
            This element should always be in the <emphasis>version 2</emphasis>
            topology namespace.  
          </para>

        </section>
        
        <section id="configuration_store_metadata_ifDescription" xreflabel="IfDescription">
          <title>IfDescription and Description</title>
          
          <programlisting>
            <![CDATA[
              <nmwgt:ifDescription xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:ifDescription>
              <nmwgt:description xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:description>
            ]]>
          </programlisting>          
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - ifDescription/description</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - no</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>ifDescription</emphasis> and <emphasis>description</emphasis> 
            elements are used to textually describe the nature of the interface.  Due
            to some early confusion as to the exact name, both names do the same purpose
            and are acceptable for use in the system.  Legacy clients may recognize either, 
            so if possible use both in your descriptions.  These are optional elements 
            that have no attributes, and can only contain text.  These elements should 
            always be in the <emphasis>version 2</emphasis> topology namespace.  
          </para>

        </section>
        
        <section id="configuration_store_metadata_authRealm" xreflabel="AuthRealm">
          <title>AuthRealm</title>
         
          <programlisting>
            <![CDATA[
              <nmwgt:authRealm xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/">
                STRING
              </nmwgt:authRealm>
            ]]>
          </programlisting>           
          
          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - authRealm</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/topology/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - N/A</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - no</para>
            </listitem>
          </itemizedlist>
          
          <para>
            The <emphasis>authRealm</emphasis> element is a depreciated element 
            that was used as a placeholder for security considerations.  Due to 
            advances in the security of <emphasis>perfSONAR</emphasis>, it is 
            not used much anymore.  Legacy deployments of both services and
            clients may still rely on this element.  This is an optional
            element that has no attributes, and can only contain text.  This
            element should always be in the <emphasis>version 2</emphasis> 
            topology namespace.  
          </para>

        </section>
                
      </section>    



      <section id="configuration_store_data" xreflabel="Data Structure">
        <title>Data Structure</title>

        <para>
          The following description represents a <emphasis>complete</emphasis>
          markup of the possible elements that may be used in describing the 
          backend storage of data for the <emphasis>SNMP MA</emphasis> service.
          This service is designed with only one specific backend for now, 
          RRD files, but the general abstraction provided by the XML will
          allow the description of any backend in time.  The XML is completely
          annotated with values, namespaces, and related prefixes.  We will
          examine each of these items in turn.
        </para>

        <programlisting>
          <![CDATA[       
            <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                       id="d-in-netutil-1" metadataIdRef="m-in-netutil-1">
              <nmwg:key id="k-in-netutil-1">
                <nmwg:parameters id="pk-in-netutil-1">
                  <nmwg:parameter name="supportedEventType">
                    http://ggf.org/ns/nmwg/tools/snmp/2.0
                  </nmwg:parameter>
                  <nmwg:parameter name="supportedEventType">
                    http://ggf.org/ns/nmwg/characteristic/utilization/2.0
                  </nmwg:parameter>
                  <nmwg:parameter name="type">rrd</nmwg:parameter>
                  <nmwg:parameter name="file">./localhost.rrd</nmwg:parameter>
                  <nmwg:parameter name="valueUnits">Bps</nmwg:parameter>
                  <nmwg:parameter name="dataSource">ifinoctets</nmwg:parameter>
                </nmwg:parameters>
              </nmwg:key>
            </nmwg:data>        
          ]]>
        </programlisting>  

        <section id="configuration_store_data_data" xreflabel="Data">
          <title>Data</title>

          <programlisting>
            <![CDATA[
              <nmwg:data xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
                         id="STRING" metadataIdRef="STRING">
 
                <nmwg:key id="STRING" />
 
              </nmwg:data>  
            ]]>
          </programlisting>  

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - data</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - id, metadataIdRef</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - key</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>

          <para>
            The <command>data</command> element encloses a <command>key</command> 
            structure that is used to describe the representative backend storage.  
            The namespace of this object is always the same and the object 
            <command>is</command> required.
          </para>

          <para>
            The <xref linkend="configuration_store_data_key" /> elements is required 
            for this element.  The <emphasis>id</emphasis> and 
            <emphasis>metadataIdRef</emphasis> attributes are also required to preserve
            the relationship between <command>metadata</command> and 
            <command>data</command> items.  
          </para>
        
        </section>  

        <section id="configuration_store_data_key" xreflabel="Key">
          <title>Key</title>

          <programlisting>
            <![CDATA[
              <nmwg:key xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"
                        id="STRING">
                        
                <nmwg:parameters id="STRING" />

              </nmwg:key> 
            ]]>
          </programlisting>  

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - key</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - parameters</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>

          <para>
            The <command>key</command> element encloses a <command>parameters</command> 
            structure that is used to describe the representative backend storage.  
            The key does not serve an explicit purpose other than to offer a container for
            the additional <emphasis>parameters</emphasis>.  The namespace of this 
            object is always the same and the object <command>is</command> required.
          </para>

          <para>
            The <xref linkend="configuration_store_data_parameters" /> elements and 
            <emphasis>id</emphasis> attribute are also required for this element.
          </para>
        
        </section>           

        <section id="configuration_store_data_parameters" xreflabel="Parameters">
          <title>Parameters</title>

          <programlisting>
            <![CDATA[
              <nmwg:parameters id="STRING"
                               xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                               
                <nmwg:parameter name="STRING">STRING</nmwg:parameter>

              </nmwg:parameters>
            ]]>
          </programlisting>  

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - parameters</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - parameter</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>

          <para>
            The <command>parameters</command> element encloses a series of 
            <command>parameter</command> structures that are used to describe 
            the representative backend storage.  The namespace of this object 
            is always the same (unlike previous uses) and the object 
            <command>is</command> required.
          </para>

          <para>
            The <xref linkend="configuration_store_data_parameter" /> elements and 
            <emphasis>id</emphasis> attribute are also required for this element.
          </para>
        
        </section>  
        
        <section id="configuration_store_data_parameter" xreflabel="Parameter">
          <title>Parameter</title>

          <programlisting>
            <![CDATA[

              <nmwg:parameter name="STRING"
                              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
                STRING
              </nmwg:parameter>

            ]]>
          </programlisting>  

          <itemizedlist mark='opencircle'>
            <listitem>
              <para><command>localname</command> - parameter</para>
            </listitem>
            <listitem>
              <para><command>namespace</command> - http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>
            <listitem>
              <para><command>attributes</command> - name, value</para>
            </listitem>
            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>
            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>

          <para>
            The <command>parameter</command> element is meant to describe
            a physical aspect of the data storage in terms of both name
            and value.  The value can be an attribute (appropriately named
            <emphasis>value</emphasis>) or in the form of a text element.  
          </para>

          <para>
            There are several recognized values for the <emphasis>name</emphasis> 
            attribute, they are enumerated as follows.
          </para>

          <itemizedlist mark='opencircle'>
            <listitem>
              <para>supportedEventType - Same use as in the metadata.  Use this
              to signify what datatype exists for this particular data store, can
              be used many times.</para>
            </listitem>
            <listitem>
              <para>type - for now always <emphasis>rrd</emphasis>, may also
              be used for other items such as <emphasis>sql</emphasis> or 
              <emphasis>csv</emphasis>.</para>
            </listitem>
            <listitem>
              <para>file - path to the file.</para>
            </listitem>
            <listitem>
              <para>valueUnits - units of the data stored in the file.</para>
            </listitem>
            <listitem>
              <para>dataSource - variable name of data in the file (used for
              query access).</para>
            </listitem> 
          </itemizedlist>
 
          <para>
            The <emphasis>name</emphasis> attribute is required for this element, 
            the <emphasis>value</emphasis> attribute is an option instead of using
            a text element.  The namespace should always be the base.  
          </para>        
        
        </section>          
                 
      </section>    


      <section id="configuration_schema" xreflabel="XML Schema Definitions">
        <title>XML Schema Definitions</title>

        <para>
          An XML <xref linkend="schema" /> is typically used to describe 
          the structure and internal content of a given XML instance.  This 
          description can sometimes be expressed in XML itself.  This 
          abstract is generally created to allow programmatic validation of 
          XML instances and to protect a service from receiving a poorly 
          constructed message.  
        </para>
        
        <para>
          Two schema definitions are presented here, the first being the native
          form of all <emphasis>NM-WG</emphasis> schemata written in the
          <citation>RELAX-NG</citation> language and the second being a derived
          version written in <citation>XSD</citation>.
        </para>

        <para>
          The following schema fragments validate the
          <emphasis>store.xml</emphasis> file, note that these are self
          contained fragments that should be viewed more as a useful supplement
          instead of functional code.  Those interested in a complete schema
          overview should consult the <emphasis>perfSONAR</emphasis> and
          <emphasis>NMWG</emphasis> subversion repositories.  
        </para>

        <section id="configuration_schema_relax" xreflabel="RELAX-NG">
          <title>RELAX-NG</title>

          <para>
            <emphasis>NM-WG</emphasis> schemata is always expressed in terms of
            the RELAX-NG schema language.  This tool, unlike similar XML schema 
            languages, does not utilize XML markup.  The syntax is similar 
            to that of a regular language, and allows for a rather compact 
            description.  Note that this <command>will</command> only validate
            <emphasis>store.xml</emphasis> files used for this service.  Other
            schemas can be found in <citation>NMWG-Schema</citation>.
          </para>

          <programlisting>
          <![CDATA[
            namespace nmwg = "http://ggf.org/ns/nmwg/base/2.0/"
            namespace netutil = "http://ggf.org/ns/nmwg/characteristic/utilization/2.0/"
            namespace neterr = "http://ggf.org/ns/nmwg/characteristic/errors/2.0/"
            namespace netdisc = "http://ggf.org/ns/nmwg/characteristic/discards/2.0/"
            namespace snmp = "http://ggf.org/ns/nmwg/tools/snmp/2.0/"
            namespace nmwgtopo = "http://ggf.org/ns/nmwg/topology/2.0/"

            start =
              element nmwg:store {
                Identifier? & 
                attribute type { xsd:string }? &                     
                (
                  element nmwg:metadata {
                    Identifier &
                    MetadataIdentifierRef? &
                    Subject &
                    EventType+ &
                    MParameters    
                  } |
                  element nmwg:data {
                    Identifier &
                    MetadataIdentifierRef &
                    element nmwg:key {
                      Identifier &
                      DParameters
                    }  
                  }
                )+    
              }

            EventType =
              element nmwg:eventType { xsd:string } 

            MParameters = 
              (
                element nmwg:parameters {
                  ParametersContent
                } |
                element snmp:parameters {
                  ParametersContent
                } |
                element netutil:parameters {
                  ParametersContent
                } |
                element netdisc:parameters {
                  ParametersContent
                } |
                element neterr:parameters {
                  ParametersContent
                }
              )

            ParametersContent = 
              Identifier &  
              element nmwg:parameter { 
                attribute name { xsd:string } &
                (
                  attribute value { xsd:string } |
                  text
                )
              }+  
  
            Subject = 
              (
                element nmwg:subject {
                  SubjectContent
                } |
                element snmp:subject {
                  SubjectContent
                } |
                element netutil:subject {
                  SubjectContent
                } |
                element netdisc:subject {
                  SubjectContent
                } |
                element neterr:subject {
                  SubjectContent
                }
              )
  
            SubjectContent = 
              Identifier &
              Interface  

            Interface = 
              element nmwgtopo:interface {
                element nmwgtopo:ipAddress {
                  Address
                }? &
                element nmwgtopo:ifAddress {
                  Address
                }? &
                element nmwgtopo:hostName { xsd:string }? &  
                element nmwgtopo:ifName { xsd:string }? &
                element nmwgtopo:ifDescription { xsd:string }? &
                element nmwgtopo:description { xsd:string }? &
                element nmwgtopo:ifHostName { xsd:string }? &
                element nmwgtopo:ifIndex { xsd:string }? &
                element nmwgtopo:type { xsd:string }? &
                element nmwgtopo:direction { xsd:string }? &
                element nmwgtopo:authRealm { xsd:string }? &
                element nmwgtopo:capacity { xsd:string }?
              }

            Address = 
              (
                attribute value { xsd:string } |
                text
              ) &
              attribute type { xsd:string }

            DParameters = 
              element nmwg:parameters {
                ParametersContent
              }

            Identifier =
              attribute id { xsd:string }
  
            MetadataIdentifierRef =
              attribute metadataIdRef { xsd:string }
          ]]>
          </programlisting>              
          
        </section>
        
        <section id="configuration_schema_xsd" xreflabel="XSD">
          <title>XSD</title>  

          <para>
            This particular description was produced using tools such as 
            <citation>MSV</citation> and <citation>Trang</citation> to 
            programatically convert between schema languages.  XSD is a more
            widely accepted schema format for validation, thus we present
            this definition for use in <emphasis>perfSONAR</emphasis> services.  
          </para>

          <programlisting>
          <![CDATA[
            <?xml version="1.0" encoding="UTF-8"?>
            <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/base/2.0/" xmlns:nmwgtopo="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:netdisc="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:snmp="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" schemaLocation="netdisc.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" schemaLocation="neterr.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" schemaLocation="netutil.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/tools/snmp/2.0/" schemaLocation="snmp.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/topology/2.0/" schemaLocation="nmwgtopo.xsd"/>
              <xs:element name="store">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element ref="nmwg:metadata"/>
                    <xs:element ref="nmwg:data"/>
                  </xs:choice>
                  <xs:attribute name="id" type="xs:string"/>
                  <xs:attribute name="type" type="xs:string"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="metadata">
                <xs:complexType>
                  <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="nmwg:Subject"/>
                    <xs:element ref="nmwg:eventType"/>
                    <xs:element ref="nmwg:MParameters"/>
                  </xs:choice>
                  <xs:attributeGroup ref="nmwg:Identifier"/>
                  <xs:attribute name="metadataIdRef" type="xs:string"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="data">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element ref="nmwg:key"/>
                  </xs:sequence>
                  <xs:attributeGroup ref="nmwg:Identifier"/>
                  <xs:attributeGroup ref="nmwg:MetadataIdentifierRef"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="key">
                <xs:complexType>
                  <xs:complexContent>
                    <xs:extension base="nmwg:DParameters">
                      <xs:attributeGroup ref="nmwg:Identifier"/>
                    </xs:extension>
                  </xs:complexContent>
                </xs:complexType>
              </xs:element>
              <xs:element name="eventType" type="xs:string"/>
              <xs:element name="MParameters" abstract="true" type="nmwg:ParametersContent"/>
              <xs:element name="parameters" substitutionGroup="nmwg:MParameters"/>
              <xs:complexType name="ParametersContent">
                <xs:sequence>
                  <xs:element maxOccurs="unbounded" ref="nmwg:parameter"/>
                </xs:sequence>
                <xs:attributeGroup ref="nmwg:Identifier"/>
              </xs:complexType>
              <xs:element name="parameter">
                <xs:complexType mixed="true">
                  <xs:attribute name="name" use="required" type="xs:string"/>
                  <xs:attribute name="value" type="xs:string"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="Subject" abstract="true" type="nmwg:SubjectContent"/>
              <xs:element name="subject" substitutionGroup="nmwg:Subject"/>
              <xs:element name="SubjectContent" abstract="true">
                <xs:complexType>
                  <xs:all>
                    <xs:element minOccurs="0" ref="nmwgtopo:ipAddress"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:ifAddress"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:hostName"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:ifName"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:ifDescription"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:description"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:ifHostName"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:ifIndex"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:type"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:direction"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:authRealm"/>
                    <xs:element minOccurs="0" ref="nmwgtopo:capacity"/>
                  </xs:all>
                </xs:complexType>
              </xs:element>
              <xs:complexType name="SubjectContent">
                <xs:sequence>
                  <xs:element ref="nmwg:SubjectContent"/>
                </xs:sequence>
                <xs:attributeGroup ref="nmwg:Identifier"/>
              </xs:complexType>
              <xs:complexType name="Interface">
                <xs:sequence>
                  <xs:element ref="nmwgtopo:interface"/>
                </xs:sequence>
              </xs:complexType>
              <xs:attributeGroup name="Address">
                <xs:attribute name="value" type="xs:string"/>
                <xs:attribute name="type" use="required" type="xs:string"/>
              </xs:attributeGroup>
              <xs:complexType name="DParameters">
                <xs:sequence>
                  <xs:element ref="nmwg:parameters"/>
                </xs:sequence>
              </xs:complexType>
              <xs:attributeGroup name="Identifier">
                <xs:attribute name="id" use="required" type="xs:string"/>
              </xs:attributeGroup>
              <xs:attributeGroup name="MetadataIdentifierRef">
                <xs:attribute name="metadataIdRef" use="required" type="xs:string"/>
              </xs:attributeGroup>
            </xs:schema>
          ]]>
          </programlisting>  

          <para>
            <command>netdisc.xsd</command>
          </para>

          <programlisting>
          <![CDATA[                      
            <?xml version="1.0" encoding="UTF-8"?>
            <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:nmwgtopo="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:netdisc="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:snmp="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
              <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="store.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" schemaLocation="neterr.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" schemaLocation="netutil.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/tools/snmp/2.0/" schemaLocation="snmp.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/topology/2.0/" schemaLocation="nmwgtopo.xsd"/>
              <xs:element name="parameters" substitutionGroup="nmwg:MParameters"/>
              <xs:element name="subject" substitutionGroup="nmwg:Subject"/>
            </xs:schema>
          ]]>
          </programlisting>  

          <para>
            <command>neterr.xsd</command>
          </para>

          <programlisting>
          <![CDATA[   
            <?xml version="1.0" encoding="UTF-8"?>
            <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:nmwgtopo="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:netdisc="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:snmp="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
              <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="store.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" schemaLocation="netdisc.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" schemaLocation="netutil.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/tools/snmp/2.0/" schemaLocation="snmp.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/topology/2.0/" schemaLocation="nmwgtopo.xsd"/>
              <xs:element name="parameters" substitutionGroup="nmwg:MParameters"/>
              <xs:element name="subject" substitutionGroup="nmwg:Subject"/>
            </xs:schema>
          ]]>
          </programlisting>  

          <para>
            <command>netutil.xsd</command>
          </para>

          <programlisting>
          <![CDATA[   
            <?xml version="1.0" encoding="UTF-8"?>
            <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwgtopo="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:netdisc="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:snmp="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
              <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="store.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" schemaLocation="netdisc.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" schemaLocation="neterr.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/tools/snmp/2.0/" schemaLocation="snmp.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/topology/2.0/" schemaLocation="nmwgtopo.xsd"/>
              <xs:element name="parameters" substitutionGroup="nmwg:MParameters"/>
              <xs:element name="subject" substitutionGroup="nmwg:Subject"/>
            </xs:schema>
          ]]>
          </programlisting>  

          <para>
            <command>snmp.xsd</command>
          </para>

          <programlisting>
          <![CDATA[   
            <?xml version="1.0" encoding="UTF-8"?>
            <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:nmwgtopo="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:netdisc="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:snmp="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
              <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="store.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" schemaLocation="netdisc.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" schemaLocation="neterr.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" schemaLocation="netutil.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/topology/2.0/" schemaLocation="nmwgtopo.xsd"/>
              <xs:element name="parameters" substitutionGroup="nmwg:MParameters"/>
              <xs:element name="subject" substitutionGroup="nmwg:Subject"/>
            </xs:schema>
          ]]>
          </programlisting>  

          <para>
            <command>nmwgtopo.xsd</command>
          </para>

          <programlisting>
          <![CDATA[   
            <?xml version="1.0" encoding="UTF-8"?>
            <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:nmwgtopo="http://ggf.org/ns/nmwg/topology/2.0/" xmlns:netdisc="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" xmlns:neterr="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" xmlns:snmp="http://ggf.org/ns/nmwg/tools/snmp/2.0/" xmlns:netutil="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/">
              <xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="store.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/discards/2.0/" schemaLocation="netdisc.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/errors/2.0/" schemaLocation="neterr.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/characteristic/utilization/2.0/" schemaLocation="netutil.xsd"/>
              <xs:import namespace="http://ggf.org/ns/nmwg/tools/snmp/2.0/" schemaLocation="snmp.xsd"/>
              <xs:element name="interface" substitutionGroup="nmwg:SubjectContent"/>
              <xs:element name="ipAddress">
                <xs:complexType mixed="true">
                  <xs:attributeGroup ref="nmwg:Address"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="ifAddress">
                <xs:complexType mixed="true">
                  <xs:attributeGroup ref="nmwg:Address"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="hostName" type="xs:string"/>
              <xs:element name="ifName" type="xs:string"/>
              <xs:element name="ifDescription" type="xs:string"/>
              <xs:element name="description" type="xs:string"/>
              <xs:element name="ifHostName" type="xs:string"/>
              <xs:element name="ifIndex" type="xs:string"/>
              <xs:element name="type" type="xs:string"/>
              <xs:element name="direction" type="xs:string"/>
              <xs:element name="authRealm" type="xs:string"/>
              <xs:element name="capacity" type="xs:string"/>
            </xs:schema>
          ]]>
          </programlisting>  

        </section>          

      </section>        

    </section>

  </section>





  <section id="functional" xreflabel="Functional Specification">
    <title>Functional Specification</title>
    
    <para>
      This section focuses on the functionalities offered by the
      <emphasis>SNMP MA</emphasis>, namely in response to external requests in
      the form of messages but also for periodic events the service performs.
      The following sections will discuss the broad concepts as well as the
      potential causes, and outcomes that may occur for each.  Note that this
      description does not focus on the actions of particular functions in the
      source code, but favors an expanded view at individual actions.  
    </para>
    
    <para>
      This section should be compared with that of the
      <xref linkend="interface" /> which describes the service as a black box
      capable of receiving and responding two external output.  The messages
      and their respective outcomes will be described there in greater detail.
    </para>      

    <section id="functional_key" xreflabel="Key Retrieval">
      <title>Key Retrieval</title>
      
      <para>
        The <emphasis>SNMP MA</emphasis> relies on XML descriptions in the 
        <emphasis>store.xml</emphasis> file to map <emphasis>metadata</emphasis>
        to the corresponding <emphasis>data</emphasis>.  The store file itself
        manages this mapping in the form of a <emphasis>key</emphasis> elements
        that are stored in <emphasis>data</emphasis> elements (see 
        <xref linkend="configuration_store_data_key" />).  
      </para>
      
      <para>
        The <emphasis>SNMP MA</emphasis> allows messages containing a partial or
        full metadata description to be provided when attempting to initially 
        retrieve this <emphasis>key</emphasis>.  For now the key is returned 
        verbatim from the storage medium and may be replayed continuously back
        to the service.  This general behavior of the key however is geared more
        towards that of a limited life cookie or passphrase that enforces a
        time/place/user restriction to limit resources.
      </para>
      
      <para>
        Once retrieved the <emphasis>key</emphasis> may then be used to
        retrieve data (see <xref linkend="functional_data" />), or may be
        used to retrieve the <emphasis>key</emphasis> again (in the event
        of <emphasis>timeout</emphasis>, or to <emphasis>cook</emphasis>
        additional items into the key such as time ranges).  
        <emphasis>Key</emphasis> elements should be used only with the
        service that has issued them.
      </para>
      
      <section id="functional_key_success" xreflabel="Success">
        <title>Success</title>
        
        <para>
          Success for this operation is defined as receiving a 
          <emphasis>key</emphasis> back when given a well formatted 
          <emphasis>message</emphasis> that triggers a match between submitted
          <emphasis>metadata</emphasis> and stored
          <emphasis>metadata</emphasis>.  
        </para>
        
      </section>

      <section id="functional_key_failure" xreflabel="Failure">
        <title>Failure</title>
        
        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true: 
        </para>       
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The backend storage is improperly configured.
            </para>
          </listitem>
          <listitem>
            <para>
              The service does not participate in this sort of exchange.
            </para>
          </listitem>
          <listitem>
            <para>
              There is nothing matching your query.
            </para>
          </listitem>
          <listitem>
            <para>
              Resource limitations prevent the service from returning the
              results of the query.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>
        </itemizedlist>
        
      </section>

      <section id="functional_key_messages" xreflabel="Messages">
        <title>Messages</title>
        
        <para>
          There are only two messages that can initiate a 
          <emphasis>key</emphasis> exchange, although it
          is possible for many messages to use keys in general.  
        </para>
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              MetadataKeyRequest
            </para>
          </listitem>
          <listitem>
            <para>
              MetadataKeyResponse
            </para>
          </listitem>
        </itemizedlist>
        
      </section>
      
    </section>

    <section id="functional_data" xreflabel="Data Retrieval">
      <title>Data Retrieval</title>
      
      <para>
        Similar to the situation discussed in <xref linkend="functional_key" />,
        the service will be posed a query consisting of a partial or full
        <emphasis>metadata</emphasis> element (potentially an already 
        retrieved <emphasis>key</emphasis>) and should return data from the
        backend storage that is related to this initial
        <emphasis>request</emphasis>.
      </para>
      
      <para>
        The query may involve numerous transformation and filtering steps to
        otherwise manipulate the data (see also <xref linkend="chaining" />)
        and the results must be representative of this.  
      </para>

      <section id="functional_data_success" xreflabel="Success">
        <title>Success</title>
        
        <para>
           Success involves a match to the submitted key or metadata
           fragment that will locate, query, and return data from the 
           appropriate backend storage medium (in our case 
           <emphasis>RRD</emphasis> files).  If a filter was applied, the
           data should reflect the filtering steps performed.
        </para>
        
      </section>

      <section id="functional_data_failure" xreflabel="Failure">
        <title>Failure</title>
        
        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true: 
        </para>       
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The backend storage (<emphasis>data</emphasis> or 
              <emphasis>metadata</emphasis>) is improperly configured.
            </para>
          </listitem>
          <listitem>
            <para>
              The service does not participate in this sort of exchange.
            </para>
          </listitem>
          <listitem>
            <para>
              There is nothing matching your query or key.
            </para>
          </listitem>
          <listitem>
            <para>
              Resource limitations prevent the service from returning the
              results of the query.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>
        </itemizedlist>
        
      </section>

      <section id="functional_data_messages" xreflabel="Messages">
        <title>Messages</title>
        
        <para>
          There are only two messages that can initiate a 
          <emphasis>data</emphasis> exchange.  
        </para>
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              SetupDataRequest
            </para>
          </listitem>
          <listitem>
            <para>
              SetupDataResponse
            </para>
          </listitem>
        </itemizedlist>
        
      </section>

    </section>
    
    <section id="functional_echo" xreflabel="Echo Service">
      <title>Echo Service</title>
      
      <para>
        The <emphasis>Echo Protocol</emphasis> is a very simple 
        <emphasis>request</emphasis> and <emphasis>response</emphasis>
        exchange that is meant to allow any service to check on the
        availability of some other service.  This available can be simple
        (i.e. checking for responsiveness) or it may be more complex (i.e.
        testing database connectivity).  
      </para>

      
      <section id="functional_echo_success" xreflabel="Success">
        <title>Success</title>
        
        <para>
          A successful <emphasis>Echo</emphasis> exchange involves reading the
          <emphasis>response</emphasis> message for a given
          <emphasis>request</emphasis> and being able to interpret the result
          code as being successful.  See the <emphasis>Echo Protocol</emphasis>
          document for hints on what is considered a success.
        </para>
        
      </section>

      <section id="functional_echo_failure" xreflabel="Failure">
        <title>Failure</title>
        
        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true: 
        </para>       
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The service does not participate in this sort of exchange.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>
          <listitem>
            <para>
              The service is down, or otherwise unreachable.
            </para>
          </listitem>
        </itemizedlist>
        
      </section>

      <section id="functional_echo_messages" xreflabel="Messages">
        <title>Messages</title>
        
        <para>
           There is only one exchange that is available for, that has a single
           request and response format.
        </para>
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              EchoRequest
            </para>
          </listitem>
          <listitem>
            <para>
              EchoResponse
            </para>
          </listitem>
        </itemizedlist>
        
      </section>

    </section>
    
    <section id="functional_ls" xreflabel="Lookup Service Interaction">
      <title>Lookup Service Interaction</title>

      <para>
        The <command>Lookup Service</command> is a
        <emphasis>perfSONAR</emphasis> infrastructure service that allows
        for the registration of local data sets in an effort to draw away the
        sometimes time consuming queries for data made by client applications as
        well as related services.  The <command>LS</command> relies on 
        services to have knowledge of it's existence, and then accepts messages
        they initiate to insert, delete, and otherwise maintain records of
        the time sensitive data sets.
      </para>

      <para>
        The <emphasis>SNMP MA</emphasis> is able to interact with the
        <command>LS</command> in three major ways: 
        <emphasis>Registering</emphasis> information, 
        <emphasis>Deregistering</emphasis> information, and 
        <emphasis>Keeping Alive</emphasis> already registered information.  All
        of these interactions rely on the service's backend configuration as the
        underlying data store, and some self knowledge of the service itself
        to form an identity.  
      </para>

      <para>
        All transactions must involve two major parts to a message: service
        identification information (in the form of a
        <emphasis>service</emphasis> description or an <command>LS</command>
        issued <emphasis>key</emphasis>) and data (in the native form from
        the <command>store.xml</command> file or an <command>LS</command>
        issued <emphasis>key</emphasis>).  
      </para>
      
      <section id="functional_ls_success" xreflabel="Success">
        <title>Success</title>
        
        <para>
          Success for interacting with the <command>LS</command> involves
          interpreting the result codes that are returned in each
          <emphasis>response</emphasis> message for the triggering 
          <emphasis>request</emphasis>.  If a non-successful error code is
          seen the <emphasis>SNMP MA</emphasis> must be nimble enough to 
          interpret the result and take the appropriate action.
        </para>
        
        <para>
          Successful results that are returned for any of the operations
          indicate that the internal state of the <command>LS</command>
          has been updated to reflect the reality of the
          <emphasis>SNMP MA</emphasis>.
        </para>
        
      </section>

      <section id="functional_ls_failure" xreflabel="Failure">
        <title>Failure</title>
        
        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true: 
        </para>       
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The backend storage is improperly configured.
            </para>
          </listitem>
          <listitem>
            <para>
              The contacted <command>LS</command> does not participate in this
              sort of exchange (or may be beyond your permissions to use).  
            </para>
          </listitem>
          <listitem>
            <para>
              There is nothing matching a particular query.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>

        </itemizedlist>
        
      </section>

      <section id="functional_ls_messages" xreflabel="Messages">
        <title>Messages</title>
        
        <para>
          There are three major message types that are possible when
          interacting with the <command>LS</command>, each with the 
          appropriate <emphasis>request</emphasis>/<emphasis>response</emphasis>
          pair.
        </para>
        
        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              LSRegistrationRequest
            </para>
          </listitem>
          <listitem>
            <para>
              LSRegistrationResponse
            </para>
          </listitem>
          <listitem>
            <para>
              LSDeregistrationRequest
            </para>
          </listitem>
          <listitem>
            <para>
              LSDeregistrationResponse
            </para>
          </listitem>
          <listitem>
            <para>
              LSKeepaliveRequest
            </para>
          </listitem>
          <listitem>
            <para>
              LSKeepalivResponse
            </para>
          </listitem>
        </itemizedlist>
        
      </section>     
      
    </section>

  </section>







  <section id="interface" xreflabel="Interface Specification">
    <title>Interface Specification</title>
    <para>
      a
    </para>      

  </section>







  <glossary id="glossary">
    <title>Terms</title>

    <glossdiv id="A">
      <title>A</title>    
      <glossentry id="apt"><glossterm>apt</glossterm>
        <glossdef>
          <para>Advanced Packaging Tool, or APT, is a front-end for the 
          package management system used by Debian GNU/Linux and its 
          derivatives.</para>
        </glossdef>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="B">
      <title>B</title>    
    </glossdiv> 
    
    <glossdiv id="C">
      <title>C</title>    
      <glossentry id="characteristic" xreflabel="characteristics"><glossterm>characteristic</glossterm>
        <glossdef>
          <para>Taken on the context of networking, these describe the 
          intrinsic properties of a portion of the network that are related 
          to the performance and reliability of the network.  See 
          <ulink url="http://www.ggf.org/documents/GFD.23.pdf">http://www.ggf.org/documents/GFD.23.pdf</ulink> 
          for more information.</para>
        </glossdef>
      </glossentry> 
      <glossentry id="chaining"><glossterm>chaining</glossterm>
        <glossdef>
          <para>
            The process of linking together elements in the 
            <xref linkend="NMWG" /> XML specification.
          </para>
        </glossdef>
        <glossseealso otherterm="filter_chaining">filter chaining</glossseealso>
        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="D">
      <title>D</title>   
      <glossentry id="data"><glossterm>data</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> <xref linkend="XML" /> block used 
          to store dynamic information, such as the results of a measurement.</para>
        </glossdef>
      </glossentry>     
    </glossdiv> 
    
    <glossdiv id="E">
      <title>E</title>    
    </glossdiv> 
    
    <glossdiv id="F">
      <title>F</title>   
      <glossentry id="filter_chaining" xreflabel="filter chaining"><glossterm>filter chaining</glossterm>
        <glossdef>
          <para>
            Chaining operation that is akin to performing advanced selection or 
            aggregation on a dataset.
          </para>
        </glossdef>
        <glossseealso otherterm="chaining">chaining</glossseealso>
        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="G">
      <title>G</title>    
    </glossdiv> 
    
    <glossdiv id="H">
      <title>H</title>   
      <glossentry id="HTTP"><glossterm>HTTP</glossterm>
        <glossdef>
          <para>Hypertext Transfer Protocol (HTTP) is a communications protocol 
          used to transfer or convey information on intranets and the World 
          Wide Web.</para>
        </glossdef>
      </glossentry>            
    </glossdiv> 
    
    <glossdiv id="I">
      <title>I</title>    
    </glossdiv> 
    
    <glossdiv id="J">
      <title>J</title>    
    </glossdiv> 
    
    <glossdiv id="K">
      <title>K</title>    
    </glossdiv> 
    
    <glossdiv id="L">
      <title>L</title>    
    </glossdiv> 
    
    <glossdiv id="M">
      <title>M</title> 
      <glossentry id="merge_chaining" xreflabel="merge chaining"><glossterm>merge chaining</glossterm>
        <glossdef>
          <para>
            Chaining that combines linked metadata items into a new 
            representation.
          </para>
        </glossdef>
        <glossseealso otherterm="filter_chaining">filter chaining</glossseealso>
        <glossseealso otherterm="chaining">chaining</glossseealso>
      </glossentry>   
      <glossentry id="metadata"><glossterm>metadata</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> <xref linkend="XML" /> block used 
          to store static information, such as the specific parameters of a 
          measurement.</para>
        </glossdef>
      </glossentry>       
    </glossdiv> 
    
    <glossdiv id="N">
      <title>N</title>  
      <glossentry id="NMWG"><glossterm>NM-WG</glossterm>
        <glossdef>
          <para>The performance of most grid applications is dependent on the 
          performance of the networks forming the grid. The Network 
          Measurements Working Group (NMWG) identifies network metrics 
          (aka <xref linkend="characteristic" />) useful to grid applications 
          and middleware, and develops standard mechanisms to describe and 
          publish these characteristics to the Grid.</para>
        </glossdef>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="O">
      <title>O</title>    
    </glossdiv> 
    
    <glossdiv id="P">
      <title>P</title>
      <glossentry id="perfSONAR"><glossterm>perfSONAR</glossterm>
        <glossdef>
          <para>Network performance monitoring framework.</para>
        </glossdef>
      </glossentry>     
    </glossdiv>
    
    <glossdiv id="Q">
      <title>Q</title>    
    </glossdiv> 
    
    <glossdiv id="R">
      <title>R</title>
      <glossentry id="RPM"><glossterm>RPM</glossterm>
        <glossdef>
          <para>(originally Red Hat Package Manager, abbreviated RPM) is a 
          package management system. The name RPM refers to two things: a 
          software package file format, and software packaged in this format. 
          RPM was intended primarily for Linux distributions; the file format 
          RPM is the baseline package format of the Linux Standard Base.</para>
        </glossdef>
      </glossentry>     
    </glossdiv> 
    
    <glossdiv id="S">
      <title>S</title> 
      <glossentry id="schema"><glossterm>schema</glossterm>
        <glossdef>
          <para>XML specification, normally written in XML.</para>
        </glossdef>
        <glossseealso otherterm="schemata">schemata</glossseealso>
      </glossentry>   
      <glossentry id="schemata"><glossterm>schemata</glossterm>
        <glossdef>
          <para>Plural of schema.</para>
        </glossdef>
        <glossseealso otherterm="schema">schema</glossseealso>
      </glossentry>  
      <glossentry id="snmp"><glossterm>SNMP</glossterm>
        <glossdef>
          <para>The Simple Network Management Protocol (SNMP) forms part of 
          the internet protocol suite as defined by the Internet Engineering 
          Task Force (IETF). SNMP is used in network management systems to 
          monitor network-attached devices for conditions that warrant 
          administrative attention.</para>
        </glossdef>
      </glossentry>   
      <glossentry id="SOAP"><glossterm>SOAP</glossterm>
        <glossdef>
          <para>SOAP originally stood for Simple Object Access Protocol, and 
          lately also Service Oriented Architecture Protocol, but is now 
          simply SOAP is a protocol for exchanging XML-based messages over 
          computer networks, normally using <xref linkend="HTTP" />.</para>
        </glossdef>
      </glossentry>       
    </glossdiv> 
    
    <glossdiv id="T">
      <title>T</title>    
    </glossdiv> 
    
    <glossdiv id="U">
      <title>U</title>  
      <glossentry id="up2date"><glossterm>up2date</glossterm>
        <glossdef>
          <para>The Red Hat Update Agent, is a tool used by Red Hat Enterprise 
          Linux, CentOS and early versions of Fedora Core that downloads and 
          installs new software and upgrades to the operating system. </para>
        </glossdef>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="V">
      <title>V</title>    
    </glossdiv> 
    
    <glossdiv id="W">
      <title>W</title>    
    </glossdiv> 
    
    <glossdiv id="X">
      <title>X</title>  
      <glossentry id="XML"><glossterm>XML</glossterm>
        <glossdef>
          <para>The Extensible Markup Language (XML) is a general-purpose markup
          language. It is classified as an extensible language because it 
          allows its users to define their own tags. Its primary purpose is 
          to facilitate the sharing of structured data across different 
          information systems, particularly via the Internet.</para>
        </glossdef>
      </glossentry>   
    </glossdiv> 
    
    <glossdiv id="Y">
      <title>Y</title>    
      <glossentry id="yum"><glossterm>yum</glossterm>
        <glossdef>
          <para>The Yellow dog Updater, Modified (YUM) is a free software/open 
          source command line package management utility for <xref linkend="RPM" />-compatible 
          Linux operating systems. </para>
        </glossdef>
      </glossentry> 
    </glossdiv> 
    
    <glossdiv id="Z">
      <title>Z</title>    
    </glossdiv>
     
  </glossary>


  <bibliography id="bibliography">
    <title>References</title>

    <biblioentry>
      <abbrev>Perl</abbrev>
      <title>
        <ulink url="http://www.perl.org">Perl Programing Language</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>log4perl</abbrev>
      <title>
        <ulink url="http://log4perl.sourceforge.net/">log4perl</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>SNMP</abbrev>
      <title>
        <ulink url="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol">Simple Network Management Protocol</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>MRTG</abbrev>
      <title>
        <ulink url="http://oss.oetiker.ch/mrtg/">Multi Router Traffic Grapher</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>SNAPP</abbrev>
      <title>
        <ulink url="http://tools.globalnoc.iu.edu/snapp.html">SNMP Network Analysis and Presentation Package</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>Cricket</abbrev>
      <title>
        <ulink url="http://cricket.sourceforge.net/">Cricket</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>CACTI</abbrev>
      <title>
        <ulink url="http://cacti.net/">CACTI</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>RRD</abbrev>
      <title>
        <ulink url="http://oss.oetiker.ch/rrdtool/">RRDTool</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>NM-WG</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu">Network Measurements Working Group</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>perfSONAR</abbrev>
      <title>
        <ulink url="http://www.perfSONAR.net">perfSONAR</ulink>
      </title>
    </biblioentry>  
      
    <biblioentry>
      <abbrev>perfSONAR-UI</abbrev>
      <title>
        <ulink url="http://perfsonar.acad.bg/">perfSONAR-UI</ulink>
      </title>
    </biblioentry> 
    
    <biblioentry>
      <abbrev>XML</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML">Extensible Markup Language (XML)</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>ping</abbrev>
      <title>
        <ulink url="http://en.wikipedia.org/wiki/Ping">Ping - Wikipedia</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>RELAX-NG</abbrev>
      <title>
        <ulink url="http://relaxng.org/">RELAX-NG Schema Language</ulink>
      </title>
    </biblioentry>
    
    <biblioentry xreflabel="XSD">
      <abbrev>XSD</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML/Schema">XML Schema</ulink>
      </title>
    </biblioentry>     
    
    <biblioentry>
      <abbrev>GGF/OGF</abbrev>
      <title>
        <ulink url="http://www.ogf.org/">(Global|Open) Grid Forum</ulink>
      </title>
    </biblioentry>
    
    <biblioentry>
      <abbrev>CDF</abbrev>
      <title>
        <ulink url="http://en.wikipedia.org/wiki/Cumulative_distribution_function">Cumulative distribution function - Wikipedia</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>NMWG-Schema</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu/nm-schema-base.html">NMWG Base Schema</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>Zurawski06Scalable</abbrev>
      <title>A Scalable Framework for Representation and Exchange of Network Measurements</title>
      <authorgroup>
        <author><personname>
          <firstname>J.</firstname><surname>Zurawski</surname>
        </personname></author>
        <author><personname>
          <firstname>M.</firstname><surname>Swany</surname>
        </personname></author>
        <author><personname>
          <firstname>D.</firstname><surname>Gunter</surname>
        </personname></author>
      </authorgroup>
      <confgroup>
        <confdates>March, 2006</confdates>
        <conftitle>2nd International IEEE/Create-Net Conference on Testbeds and Research Infrastructures for the Development of Networks and Communities</conftitle>
        <address>Barcelona, Spain</address>
        <confsponsor>IEEE/Create-Net</confsponsor>
      </confgroup>
    </biblioentry>

    <biblioentry>
      <abbrev>Hanemann05PerfSONAR</abbrev>
      <title>PerfSONAR: A Service-Oriented Architecture for Multi-Domain Network Monitoring </title>
      <authorgroup>
        <author><personname>
          <firstname>A.</firstname><surname>Hanemann</surname>
        </personname></author>
        <author><personname>
          <firstname>J.</firstname><surname>Boote</surname>
        </personname></author>
        <author><personname>
          <firstname>E.</firstname><surname>Boyd</surname>
        </personname></author>
        <author><personname>
          <firstname>J.</firstname><surname>Durand</surname>
        </personname></author>
        <author><personname>
          <firstname>L.</firstname><surname>Kudarimoti</surname>
        </personname></author>
        <author><personname>
          <firstname>R.</firstname><surname>Lapacz</surname>
        </personname></author>
        <author><personname>
          <firstname>M.</firstname><surname>Swany</surname>
        </personname></author>
        <author><personname>
          <firstname>S.</firstname><surname>Trocha</surname>
        </personname></author>  
        <author><personname>
          <firstname>J.</firstname><surname>Zurawski</surname>
        </personname></author>      
      </authorgroup>
      <confgroup>
        <confdates>2005</confdates>
        <conftitle>International Conference on Service Oriented Computing</conftitle>
      </confgroup>
    </biblioentry>

  </bibliography>

</article>



