<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://docbook.org/xml/4.2/docbookx.dtd">
<article>

  <articleinfo>
    <title>perfSONAR-PS Status Service - Complete Documentation</title>

    <author>
      <firstname>A.</firstname>
      <surname>Brown</surname>
      <affiliation>
        <address><email>aaron@internet2.edu</email></address>
      </affiliation>
    </author>

    <copyright>
      <year>2007</year>
      <year>2008</year>
      <holder>Internet2</holder>
    </copyright>

  </articleinfo>

  <section id="changes" xreflabel="Document Changes">
    <title>Document Changes</title>

    <table frame="all" align="center" halign="center" width="80%"  id="table.1">
      <title>Change Log</title>
      <tgroup cols="1" align="left" colsep="1" rowsep="1">
        <colspec colnum="1" colname="c1" width="10%"/>
        <colspec colnum="2" colname="c2" width="10%"/>
        <colspec colnum="3" colname="c3" width="50%"/>
        <colspec colnum="4" colname="c4" width="30%"/>
        <thead>
          <row>
            <entry>Version</entry>
            <entry>Date</entry>
            <entry>Description</entry>
            <entry>Author(s)</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>1.0</entry>
            <entry>5/20/2008</entry>
            <entry>Initial Preparation</entry>
            <entry>A. Brown</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </section>

  <section id="introduction" xreflabel="Introduction">
    <title>Introduction</title>

    <para>
      <emphasis>perfSONAR-PS</emphasis> is an implementation of the
      <xref linkend="perfSONAR" /> standard written in the
      <citation>Perl</citation> programming language.
      <emphasis>perfSONAR-PS</emphasis> aims for complete compatibility with
      all other implementations of the <emphasis>perfSONAR</emphasis> standard.
    </para>

    <para>
      This document describes the details of the
      <emphasis>perfSONAR-PS</emphasis> Status Measurement Archive
      (<command>MA</command>) Services.  In addition to outlining the installation and
      configuration steps, a detailed guide of interface and functional behavior
      is included.  The interface specification is meant to give a
      <emphasis>black box</emphasis> understanding of the workings of the
      service, while the functional specification describes the inner workings
      of the service decision making process.
    </para>

    <para>
      This software offers the ability to <emphasis>collect</emphasis> and
      <emphasis>publish</emphasis> link or circuit status data.
    </para>

    <para>
      The <emphasis>collection</emphasis> of <xref linkend="data"/> is
      accomplished by executing a script, reading SNMP data or collecting TL1
      data. This data is stored into a SQL database. This data can then be
      <emphasis>published</emphasis> via a Web Services (<command>WS</command>)
      interface that allows client applications such as
      <citation>perfSONAR-UI</citation> to contact this service, query for
      specific resources, and finally present graphs of the results.
    </para>

  </section>

  <section id="installation" xreflabel="Installation Procedures">
    <title>Installation Procedures</title>

    <para>
      Before installing the <emphasis>Status</emphasis> service, be sure to
      check if the software listed in <xref linkend="prerequisites"/> is
      currently installed on the target system.  
    </para>

    <para>
      There are multiple ways to install the <emphasis>Status</emphasis>
      service. The easiest approach is to install one of the binary RPMs. These
      RPMs include all the required perl modules, 
    </para>

    <para>
      After installing the necessary prerequisite software, the actual software
      must be installed according to <xref linkend="service_installation" />.
      It is necessary to perform some basic configuration steps outlined in
      <xref linkend="service_configuration" />, followed by testing the
      configuration and installation in <xref linkend="service_testing" />.
      Finally we can start the service with instructions in
      <xref linkend="service_use" />.
    </para>

    <section id="prerequisites" xreflabel="Software Prerequisites">
      <title>Software Prerequisites</title>

      <para>
        To function properly, the <emphasis>Status</emphasis> services require
        the use of some prerequisite software to both store and manage the
        underlying data as well as assist with services duties such as parsing
        <xref linkend="XML" /> or managing the <xref linkend="SOAP" /> over
        <xref linkend="HTTP" /> transportation.
      </para>

      <para>
        The following sections will guide the user through what is required, and
        how it may be installed as painlessly as possible.
      </para>

      <section id="perl_installation" xreflabel="Required Perl Modules">
        <title>Required Perl Modules</title>

        <para>
          There are several Perl modules that are required for the
          <emphasis>Status</emphasis> services to function properly.  Some of these are
          included in the base Perl installation on many machines, although it
          is important to check all to be sure upgrades are not available.
        </para>

        <para>
          The following is a list of the necessary modules for the
          <emphasis>Status</emphasis> services.
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/strict.pm">strict</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/warnings.pm">warnings</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/Exporter.pm">Exporter</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~kwilliams/PathTools-3.25/Cwd.pm">Cwd</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/ext/POSIX/POSIX.pod">POSIX</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/ext/Fcntl/Fcntl.pm">Fcntl</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~jv/Getopt-Long-2.37/lib/Getopt/Long.pm">Getopt::Long</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~mschilli/Log-Log4perl-1.14/lib/Log/Log4perl.pm">Log::Log4perl</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Params-Validate-0.89/lib/Params/Validate.pm">Params::Validate</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Log-Dispatch-2.20/lib/Log/Dispatch.pm">Log::Dispatch</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Log-Dispatch-2.20/lib/Log/Dispatch/Screen.pm">Log::Dispatch::Screen</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~markpf/Log-Dispatch-FileRotate-1.16/FileRotate.pm">Log::Dispatch::FileRotate</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~gbarr/IO-1.2301/IO/File.pm">IO::File</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~drolsky/Time-Local-1.18/lib/Time/Local.pm">Time::Local</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~gaas/libwww-perl-5.808/lib/HTTP/Daemon.pm">HTTP::Daemon</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~gaas/libwww-perl-5.808/lib/LWP/UserAgent.pm">LWP::UserAgent</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~msergeant/XML-XPath-1.13/XPath.pm">XML::XPath</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~pajas/XML-LibXML-1.65/LibXML.pod">XML::LibXML</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~tjenness/File-Temp-0.19/Temp.pm">File::Temp</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/File/Basename.pm">File::Basename</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://search.cpan.org/~jhi/Time-HiRes-1.9708/HiRes.pm">Time::HiRes</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://net-snmp.sourceforge.net/">Net::SNMP</ulink></para>
          </listitem>
          <listitem>
            <para><ulink url="http://dbi.perl.org/">DBI</ulink></para>
          </listitem>
        </itemizedlist>

        <para>
          It is recommended that users utilize the installation method described
          in <xref linkend="auto_installation" />, failing back to
          <xref linkend="manual_installation" /> if problems occur.
        </para>

      </section>

      <section id="sql_db_installation" xreflabel="SQLDB">
        <title>SQL Database</title>

        <para>
          The <emphasis>Status</emphasis> services rely exclusively on SQL as the
          backend storage to store and expose data.  Future iterations will incorporated
          additional database technologies, but the current version
          will require a <emphasis>SQL</emphasis> database.
        </para>

        <para>
          There are two databases that are supported:
          <emphasis>MySQL</emphasis> and <emphasis>SQLite</emphasis>.
          Installing the databases is beyond the scope of this document, but
          most software distributions have documentation describing the steps
          required to install and configure the databases.
        </para>
      </section>

      <section id="installation_issues" xreflabel="Known Installation Problems">
        <title>Known Installation Problems</title>

        <para>
          Issues regarding the installation of Perl modules are well documented for the
          <emphasis>perfSONAR-PS</emphasis> services. We present some of these
          issues here as a brief introduction to items that the
          installer/developer should be aware of.
        </para>

        <section id="perl_installation_issues" xreflabel="Perl Modules">
          <title>Perl Modules</title>

          <para>
            Some modules require software libraries that may not be installed
            on most systems.  Although it is normally the job of the module
            designer to take care of these situations, this is not always the
            case.  Specifically the XML module <emphasis>XML::LibXML</emphasis>
            depends on the LibXML2 library.
          </para>
          <para>
            If you system is equipped with a software management system (such as
            <xref linkend="apt"/>, <xref linkend="yum"/>, or
            <xref linkend="up2date"/>) try and locate the
            <emphasis>perl-XML-LibXML</emphasis> package via the search
            interface.  This is the easiest way to avoid trouble with
            <emphasis>CPAN</emphasis>.
          </para>

        </section>

      </section>

    </section>

    <section id="service_configuration" xreflabel="Basic Service Configuration">
      <title>Basic Service Configuration</title>

      <para>
        There are two major components that make up the
        <emphasis>Status</emphasis> service: the collector service and the
        status measurement archive.
      </para>

      <section id="collector_collector_configuration" xreflabel="Collector Configuration">
        <para>
          The <emphasis>Status</emphasis> collector is a daemon that performs
          periodic collection of the status of network elements and storing the
          information into the measurement archive. The collector can use a script or
          SNMP queries to obtain the status of network elements.
        </para>

        <para>
          There are three main files that can be modified to
          <emphasis>customize</emphasis> the behavior of the collector daemon.
        </para>

        <section id="collector_logging_configuration" xreflabel="Logging Configuration">
          <title>Logging Configuration via logger.conf</title>

            <para>
              This file contains information regarding logging in the
              <emphasis>perfSONAR-PS</emphasis> architecture.  Under normal
              circumstances the file will not need to be changed.  The only real
              choice worth noting during testing is choosing between the
              following three output methods.
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>log4perl.appender.A1=Log::Dispatch::Screen</command></para>
              </listitem>
              <listitem>
                <para><command>log4perl.appender.A1=Log::Dispatch::Syslog</command></para>
              </listitem>
              <listitem>
                <para><command>log4perl.appender.A1=Log::Dispatch::FileRotate</command></para>
              </listitem>
            </itemizedlist>

            <para>
              The <emphasis>Screen</emphasis> method sends log files to the
              output screen, The <emphasis>Syslog</emphasis> method will append
              the log messages directly to the Syslog system, and the
              <emphasis>FileRotate</emphasis> method appends log messages to a
              specified log file (specified via
              <emphasis>log4perl.appender.A1.filename</emphasis>) and will
              automatically rotate when they get too large (specified via
              <emphasis>log4perl.appender.A1.size</emphasis>).
            </para>

            <para>
              The default setting is to log to the file /opt/perfsonar/log/status-collector.log.
            </para>
        </section>

        <section id="collector_information_configuration" xreflabel="Collector Daemon Configuration">
          <title>Daemon Configuration via status-collector.conf</title>

            <para>
              This file contains detailed information and settings that help
              operate the <emphasis>Status</emphasis> collector daemon.  A major listing of all
              directives and their full meaning is available in
              <xref linkend="configuration_service" />.  It is noted that
              none of these things <emphasis>needs</emphasis> to be changed for
              the software to work.  These options help to customize the service
              further or avoid security restrictions (i.e. firewall ports, etc.).
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para>
                  <command>elements_file</command> - Location of the <emphasis>elements.conf</emphasis> file described later
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_type</command> - The type of <emphasis>Measurement Archive</emphasis> to write to. Can be "sqlite", "mysql" or "ma".
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_name</command> - If the <emphasis>ma_type</emphasis> is set to "sqlite", this is the file to write to. If the <emphasis>ma_type</emphasis> is set to "mysql", this is the database name.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_host</command> - If the <emphasis>ma_type</emphasis> is set to "mysql", this is the host on which the database is running.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_port</command> - If the <emphasis>ma_type</emphasis> is set to "mysql", this is the port on the host on which the database is running.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_username</command> - If the <emphasis>ma_type</emphasis> is set to "mysql", this is the username for the database.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_password</command> - If the <emphasis>ma_type</emphasis> is set to "mysql", this is the password for the database.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_table</command> - If the <emphasis>ma_type</emphasis> is set to "mysql" or "sqlite", this is the table to use for storing status information.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ma_uri</command> - If the <emphasis>ma_type</emphasis> is set to "ma", this is the URI of the MA to store the status information in.
                </para>
              </listitem>
            </itemizedlist>

            <para>
              A helper utility named <emphasis>psConfigureCollectors.pl</emphasis>
              will ask you some questions and generate the above file.
            </para>

        </section>

        <section id="collector_monitored_elements_configuration" xreflabel="Monitored Elements Configuration">
          <title>Monitored Elements Configuration via elements.conf</title>
            <para>
              The <emphasis>elements.conf</emphasis> file is used to specify
              which network elements the collector daemon should be monitoring.
              The core structures in the <emphasis>elements.conf</emphasis> file
              are elements and agents. The elements define the network element
              whose status is being monitored, and the agents define how the
              status of the element is collected. The file consists of a series
              of element structures defining each of the elements to monitor.
            </para>

            <para>
              The <emphasis>element</emphasis> structures consist of three
              aspects: a knowledge level, a set of one or more identifiers and a
              set of two or more agents.
            </para>

            <para>
              The <emphasis>knowledge</emphasis> property is an attribute of the
              <emphasis>element</emphasis> XML element. It is used to define the
              certainty with which is to defining the "true" status of the
              element, and can be one of two values "full" and "partial". For
              example, a bidirectional link being measured by the collector may
              only be able to check the status of one side of the link. In this
              case, the knowledge level would be "partial". If a unidirectional
              link were being monitored, the knowledge level would be "full".
            </para>

            <programlisting>
              <![CDATA[
                <element knowledge="full">
                  ...
                </element>
              ]]>
            </programlisting>

            <para>
              Each element being monitored has one or more <emphasis>id</emphasis>
              elements. Each of these elements consists of the URN identifier for the
              element being monitored. If the element being monitored has more than one
              identifier associated with it, multiple <emphasis>id</emphasis>
              attributes can be included.
            </para>

            <programlisting>
              <![CDATA[
                <element knowledge="full">
                  <id>urn:ogf:network:domain=internet2.edu:path=DRAGON_dcn.internet2.edu_384943</id>
                  <id>urn:ogf:network:domain=internet2.edu:link=Link_From_Hous_To_Losa</id>
                  <id>urn:ogf:network:domain=internet2.edu:node=rtr.hous:port=eth0:link=Link_From_Hous_To_Losa</id>
                  <id>urn:ogf:network:domain=internet2.edu:node=rtr.losa:port=eth0:link=Link_From_Hous_To_Losa</id>
                  ...
                </element>
              ]]>
            </programlisting>

            <para>
              Each element may have one or more agents which obtain part of the status
              information about the element. If the element were a bidirectional link,
              it might contain an agent to measure the status on one side of the link,
              and an agent to measure the status on the other side. If the element were
              a circuit, it would include agents to measure every segment of the
              circuit.  Each element must have a minimum of two agents, one to grab the
              administrative status for the element and one to grab the operational
              status for the element.
            </para>

            <para>
              There are two different agent types: operational and administrative. This
              can be specified with the <emphasis>status_type</emphasis> attribute on the
              <emphasis>agent</emphasis> XML element.
            </para>

            <para>
              There are three different approaches to status collection: constants,
              scripts and SNMP polling. To specify which type of collection the agent
              should perform, the <emphasis>type</emphasis> can be set to "constant",
              "script" or "snmp".
            </para>

            <para>
              The <emphasis>constant</emphasis> agent simply returns a constant value
              whenever it is polled. This can be used to fudge a certain status type if
              you are unable to obtain the actual status or the actual status does not
              exist for that kind of element. The contents of the
              <emphasis>agent</emphasis> XML element must be a single XML element named
              <emphasis>constant</emphasis>. The contents of this XML element is the
              constant value to return.
            </para>

            <programlisting>
              <![CDATA[
                <agent type="constant" status_type="oper">
                  <constant>normaloperation</constant>
                </agent>
              ]]>
            </programlisting>

            <para>
              The <emphasis>script</emphasis> agent is given a script to run to poll
              the status of an element. The script name is given in a
              <emphasis>script_name</emphasis> XML element containing the script name.
              You can specify parameters to pass to the script using an
              <emphasis>script_parameters</emphasis> XML element.
            </para>

            <para>
              The output of the specified script must be of the form
              "[timestamp],[status]". The first argument passed to the script will be
              the type of status being requested "admin" or "oper". Subsequent
              parameters will consist of any parameters specified.
            </para>

            <programlisting>
              <![CDATA[
                <agent type="script" status_type="oper">
                  <script_name>/home/aaron/scripts/ciena_status.pl</script_name>
                  <script_paramters>10.0.0.1 1-A-1-1</script_paramters>
                </agent>
              ]]>
            </programlisting>

            <para>
              The above script would be called like
              "/home/aaron/scripts/ciena_status.pl oper 10.0.0.1 1-A-1-1".
            </para>

            <para>
              The <emphasis>snmp</emphasis> agent will query a router using SNMP to
              grab the status of an interface. You must include a
              <emphasis>hostname</emphasis> XML element which contains the hostname or
              ip address of the SNMP server. You must also specify a
              <emphasis>version</emphasis> element specifying which SNMP version to
              use. A <emphasis>community</emphasis> element must be included specifying
              the community string for the router. An <emphasis>ifName</emphasis> or
              <emphasis>ifIndex</emphasis> may be included as well. If an
              <emphasis>ifName</emphasis> is specified, on startup, the collector will
              find the ifIndex corresponding to that ifName.
            </para>

            <programlisting>
              <![CDATA[
                <agent type="snmp" status_type="oper">
                  <hostname>192.168.10.1</hostname>
                  <version>2c</version>
                  <community>password</community>
                  <ifName>eth0</ifName>
                </agent>
              ]]>
            </programlisting>

            <para>
              By default, the collector will use its local time to specify when the
              element had the retrieved status. However, you can specify a
              <emphasis>primary_time_source</emphasis> attribute with a value of "1" to
              say that the time retrieved from that agent should be used instead of the
              collectors local time.
            </para>

            <programlisting>
              <![CDATA[
                <agent type="snmp" status_type="oper" primary_time_source="1">
                  ...
                </agent>
              ]]>
            </programlisting>

        </section>

      </section>

<!--      <section id="service_testing" xreflabel="Post Installation Tests">
        <title>Post Installation Tests</title>

      </section> -->
        <!-- EchoRequest -->

<!--      <section id="collector_service_use" xreflabel="Service Use">
        <title>Service Use</title>

        <para>
          The software can be run as the following command.
        </para>

      </section> -->

    </section> <!-- Collectors Section -->

    <section id="ma_service_configuration" xreflabel="Service Configuration">
        <para>
          <!-- high-level description -->
        </para>

        <para>
          There are three main files that can be modified to
          <emphasis>customize</emphasis> the behavior of the service daemon.
        </para>

        <section id="ma_service_logging_configuration" xreflabel="Logging Configuration">
          <title>Logging Configuration via logger.conf</title>

            <para>
              This file contains information regarding logging in the
              <emphasis>perfSONAR-PS</emphasis> architecture.  Under normal
              circumstances the file will not need to be changed.  The only real
              choice worth noting during testing is choosing between the
              following three output methods.
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para><command>log4perl.appender.A1=Log::Dispatch::Screen</command></para>
              </listitem>
              <listitem>
                <para><command>log4perl.appender.A1=Log::Dispatch::Syslog</command></para>
              </listitem>
              <listitem>
                <para><command>log4perl.appender.A1=Log::Dispatch::FileRotate</command></para>
              </listitem>
            </itemizedlist>

            <para>
              The <emphasis>Screen</emphasis> method sends log files to the
              output screen, The <emphasis>Syslog</emphasis> method will append
              the log messages directly to the Syslog system, and the
              <emphasis>FileRotate</emphasis> method appends log messages to a
              specified log file (specified via
              <emphasis>log4perl.appender.A1.filename</emphasis>) and will
              automatically rotate when they get too large (specified via
              <emphasis>log4perl.appender.A1.size</emphasis>).
            </para>

            <para>
              The default setting is to log to the file /opt/perfsonar/log/status-service.log.
            </para>
        </section>

        <section id="service_information_configuration" xreflabel="Service Configuration">
          <title>Service Configuration via status-service.conf</title>

            <para>
              This file contains detailed information and settings that help
              operate the <emphasis>Status</emphasis> service daemon.
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para>
                  <command>enable_registration</command> - Specifies whether the service should register with a lookup service. Can be 0 or 1.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>ls_instance</command> - Specified which lookup service that the service should register with.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_type</command> - The type of database to use.  Can be "sqlite" or "mysql".
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_file</command> - If the <emphasis>db_type</emphasis> is set to "sqlite", this is the file containing the database.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_host</command> - If the <emphasis>db_type</emphasis> is set to "mysql", this is the host on which the database is running.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_port</command> - If the <emphasis>db_type</emphasis> is set to "mysql", this is the port on the host on which the database is running.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_username</command> - If the <emphasis>db_type</emphasis> is set to "mysql", this is the username for the database.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_password</command> - If the <emphasis>db_type</emphasis> is set to "mysql", this is the password for the database.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_name</command> - If the <emphasis>db_type</emphasis> is set to "mysql", this is the name of the database to use.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>db_table</command> - If the <emphasis>db_type</emphasis> is set to "mysql" or "sqlite", this is the table to use for storing status information.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>enable_e2emon_compatibility</command> - Can be 0 or 1. Specifies whether or not to offer E2EMon compatibility.
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>e2emon_definitions_file</command> - Specifies the file containing the link descriptions needed for E2EMon compatibility.
                </para>
              </listitem>
            </itemizedlist>

            <para>
              A helper utility named <emphasis>psConfigureStatusService.pl</emphasis>
              will ask you some questions and generate the above file.
            </para>

        </section>

        <section id="service_e2emon_configuration" xreflabel="E2EMon Compatibility Configuration">
          <title>Monitored Elements Configuration via e2emon_links.conf</title>
            <para>
              The <emphasis>e2emon_links.conf</emphasis> file is used to specify
              the link and node definitions required by E2EMon clients. In this
              file, logical links will be defined using the elements in the
              measurement archives. The core structures in the
              <emphasis>e2emon_links.conf</emphasis> file are
              <emphasis>node</emphasis>s, <emphasis>circuit</emphasis>s and a
              <emphasis>domain</emphasis>.
            </para>

            <para>
              Every E2EMon compatible service must tell the client which domain
              it is in. The selection of the appropriate domain name is outside
              of the scope of the document. Once selected though, include a
              <emphasis>domain</emphasis> XML element containing the domain
              name in the configuration file.
            </para>

            <para>
              In E2EMon, circuit segments connect node elements, which may
              correspond to physical or logical nodes. You can define these
              node elements by including one or more <emphasis>node</emphasis>
              XML elements.
            </para>

            <para>
              Each of these <emphasis>node</emphasis> XML elements
              <emphasis>must</emphasis> have a name attribute containing the
              name of the node element. Since other domains will need to know
              the node names to construct interdomain links, the construction
              of these names is outside the scope of this document.
            </para>

            <para>
              Each <emphasis>node</emphasis> XML element may have any of the
              following optional child elements.
            </para>

            <itemizedlist mark='opencircle'>
              <listitem>
                <para>
                  <command>institution</command> - The organization who controls this node
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>city</command> - The city in which the node is located
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>country</command> - The country in which the node is located
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>latitude</command> - The latitude at which the node is located
                </para>
              </listitem>
              <listitem>
                <para>
                  <command>longitude</command> - The longitude at which the node is located
                </para>
              </listitem>
            </itemizedlist>

            <programlisting>
              <![CDATA[
                <node name="INTERNET2-RTRHOUS" />

                <node name="INTERNET2-RTRSALT">
                  <city>Salt Lake City</city>
                  <country>USA</country>
                </node>

                <node name="INTERNET2-RTRCHIC">
                  <latitude>41.90</latitude>
                  <longitude>87.65</longitude>
                </node>
              ]]>
            </programlisting>

            <para>
              The nodes in E2EMon are connected by links. A link can correspond
              to a single physical bidirectional link, or a series of physical
              links. In the configuration file, each E2EMon link is described
              by a <emphasis>link</emphasis> XML element.
            </para>

            <para>
              In E2EMon, a link can have two names: a global name describing
              the end-to-end circuit and a local name describing the name of
              that domain's segment of the end-to-end circuit. The global name
              must be agreed upon by every domain the circuit passes over and
              its select is out of the scope of this document. Once selected,
              the global name can be specified using
              <emphasis>globalName</emphasis> XML element. The localName is
              similar, being specified with a <emphasis>localName</emphasis>
              XML element.
            </para>

            <para>
              The E2EMon link will be constructed out of one or more network
              elements from the <emphasis>measurement archive</emphasis>. These
              elements can be specified using <emphasis>segmentID</emphasis>
              XML elements. Each of these XML elements must contain the URN identifier
              described above for the network element. The status for the
              E2EMon link will be the combined status of all the segments specified.
            </para>

            <para>
              Each E2EMon link has nodes, as described above, at either end.
              The <emphasis>link</emphasis> XML elements contain pointers to
              the two nodes.  These pointers are represented as
              <emphasis>endpoint</emphasis> XML elements.  Each
              <emphasis>endpoint</emphasis> XML element contains two
              attributes, "type" and "name". The <emphasis>name</emphasis>
              attribute specifies the name of the node. The
              <emphasis>type</emphasis> describes the role of this node in the
              end-to-end circuit. It can either be the end of the circuit, in
              which case the value will be <emphasis>endpoint</emphasis>, or it
              can be a demarcation point between links, in which case the value
              will be <emphasis>demarcpoint</emphasis>.
            </para>

            <para>
              The <emphasis>knowledge</emphasis> property is an attribute of the
              <emphasis>link</emphasis> XML element. It is used to define the
              certainty with which is to defining the "true" status of the
              link, and can be one of two values "full" and "partial". For
              example, a bidirectional link being measured by the collector may
              only be able to check the status of one side of the link. In this
              case, the knowledge level would be "partial". If the domain were
              monitoring both sides of the link, the knowledge level would be
              "full".
            </para>

            <programlisting>
              <![CDATA[
                <link knowledge="full">
                  <segmentID>urn:ogf:network:domain=internet2:node=rtr.atla:port=eth0:link=Link_To_Losa</segmentID>
                  <segmentID>urn:ogf:network:domain=internet2:node=rtr.losa:port=eth0:link=Link_To_Atla</segmentID>
                  <globalName>SOMEPROJECT-INTERNET2-ESNET-001</globalName>
                  <localName>INTERNET2-LOSA-ATLA</localName>
                  <endpoint type="endpoint" name="INTERNET2-RTRATLA" />
                  <endpoint type="demarcpoint" name="INTERNET2-RTRLOSA" />
                </link>
              ]]>
            </programlisting>

        </section>

<!--      <section id="ma_service_testing" xreflabel="Post Installation Tests">
        <title>Post Installation Tests</title>

      </section> -->

        <!-- EchoRequest -->
<!--      <section id="service_use" xreflabel="Service Use">
        <title>Service Use</title>

        <para>
          The software can be run as the following command.
        </para>

      </section> -->

    </section> <!-- Collectors Section -->
  </section> <!-- Post-Install Steps -->


  <section id="functional" xreflabel="Functional Specification">
    <title>Functional Specification</title>

    <para>
      This section focuses on the functionalities offered by the
      <emphasis>Status</emphasis> service, namely in response to external requests in
      the form of messages but also for periodic events the service performs.
      The following sections will discuss the broad concepts as well as the
      potential causes, and outcomes that may occur for each.  Note that this
      description does not focus on the actions of particular functions in the
      source code, but favors an expanded view at individual actions.
    </para>

    <para>
      This section should be compared with that of the
      <xref linkend="interface" /> which describes the service as a black box
      capable of receiving and responding two external output.  The messages
      and their respective outcomes will be described there in greater detail.
    </para>

    <section id="functional_key" xreflabel="Key Retrieval">
      <title>Key Retrieval</title>

      <para>
        The <emphasis>Status MA</emphasis> allows messages containing a
        partially-specified topology id. This will return one or more
        <emphasis>key</emphasis>s corresponding to the contained elements in
        the database. For now the key is returned verbatim from the storage
        medium and may be replayed continuously back to the service.  This
        general behavior of the key however is geared more towards that of a
        limited life cookie or passphrase that enforces a time/place/user
        restriction to limit resources.
      </para>

      <para>
        Once retrieved the <emphasis>key</emphasis> may then be used to
        retrieve data (see <xref linkend="functional_data" />), or may be
        used to retrieve the <emphasis>key</emphasis> again (in the event
        of <emphasis>timeout</emphasis>, or to add additional items into the
        key such as time ranges).  <emphasis>Key</emphasis> elements should be
        used only with the service that has issued them.
      </para>

      <section id="functional_key_success" xreflabel="Success">
        <title>Success</title>

        <para>
          Success for this operation is defined as receiving a
          <emphasis>key</emphasis> back when given a well formatted
          <emphasis>message</emphasis> that triggers a match between the
          partially-specified topology identifier and identifiers in the
          archive.
        </para>

      </section>

      <section id="functional_key_failure" xreflabel="Failure">
        <title>Failure</title>

        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true:
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The backend storage is improperly configured.
            </para>
          </listitem>
          <listitem>
            <para>
              The service does not participate in this sort of exchange.
            </para>
          </listitem>
          <listitem>
            <para>
              There is nothing matching your query.
            </para>
          </listitem>
          <listitem>
            <para>
              Resource limitations prevent the service from returning the
              results of the query.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>
        </itemizedlist>

      </section>

      <section id="functional_key_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>
          There are only two messages that involved in a
          <emphasis>key</emphasis> exchange, although it
          is possible for many messages to use keys in general.
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              MetadataKeyRequest
            </para>
          </listitem>
          <listitem>
            <para>
              MetadataKeyResponse
            </para>
          </listitem>
        </itemizedlist>

      </section>

    </section>

    <section id="functional_data" xreflabel="Data Retrieval">
      <title>Data Retrieval</title>

      <para>
        Similar to the situation discussed in <xref linkend="functional_key" />,
        the service will be posed a query consisting of a partial or full
        topology identifier (potentially an already retrieved
        <emphasis>key</emphasis>) and should return the data requested from
        the backend storage.
      </para>

      <para>
        The query may involve numerous transformation and filtering steps to
        otherwise manipulate the data (see also <xref linkend="chaining" />)
        and the results must be representative of this.
      </para>

      <section id="functional_data_success" xreflabel="Success">
        <title>Success</title>

        <para>
           Success involves a match to the submitted key or metadata
           fragment that will locate, query, and return data from the
           appropriate backend storage medium (in our case
           <emphasis>RRD</emphasis> files).  If a filter was applied, the
           data should reflect the filtering steps performed.
        </para>

      </section>

      <section id="functional_data_failure" xreflabel="Failure">
        <title>Failure</title>

        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true:
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The backend storage (<emphasis>data</emphasis> or
              <emphasis>metadata</emphasis>) is improperly configured.
            </para>
          </listitem>
          <listitem>
            <para>
              The service does not participate in this sort of exchange.
            </para>
          </listitem>
          <listitem>
            <para>
              There is nothing matching your query or key.
            </para>
          </listitem>
          <listitem>
            <para>
              Resource limitations prevent the service from returning the
              results of the query.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>
        </itemizedlist>

      </section>

      <section id="functional_data_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>
          There are only two messages that involved in a
          <emphasis>data</emphasis> exchange.
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              SetupDataRequest
            </para>
          </listitem>
          <listitem>
            <para>
              SetupDataResponse
            </para>
          </listitem>
        </itemizedlist>

      </section>

    </section>

    <section id="functional_echo" xreflabel="Echo Service">
      <title>Echo Service</title>

      <para>
        The <emphasis>Echo Protocol</emphasis> is a very simple
        <emphasis>request</emphasis> and <emphasis>response</emphasis>
        exchange that is meant to allow a client to check on the
        availability of a service.
      </para>

      <section id="functional_echo_success" xreflabel="Success">
        <title>Success</title>

        <para>
          A successful <emphasis>Echo</emphasis> exchange involves reading the
          <emphasis>response</emphasis> message for a given
          <emphasis>request</emphasis> and being able to interpret the result
          code as being successful.  See the <emphasis>Echo Protocol</emphasis>
          document for hints on what is considered a success.
        </para>

      </section>

      <section id="functional_echo_failure" xreflabel="Failure">
        <title>Failure</title>

        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true:
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The service does not participate in this sort of exchange.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>
          <listitem>
            <para>
              The service is down, or otherwise unreachable.
            </para>
          </listitem>
        </itemizedlist>

      </section>

      <section id="functional_echo_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>
           There is only one exchange that is available for, that has a single
           request and response format.
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              EchoRequest
            </para>
          </listitem>
          <listitem>
            <para>
              EchoResponse
            </para>
          </listitem>
        </itemizedlist>

      </section>

    </section>

    <section id="functional_ls" xreflabel="Lookup Service Interaction">
      <title>Lookup Service Interaction</title>

      <para>
        The <command>Lookup Service</command> is a
        <emphasis>perfSONAR</emphasis> infrastructure service that allows
        for the registration of local data sets in an effort to draw away the
        sometimes time consuming queries for data made by client applications as
        well as related services.  The <command>LS</command> relies on
        services to have knowledge of its existence, and then accepts messages
        they initiate to insert, delete, and otherwise maintain records of
        the time sensitive data sets.
      </para>

      <para>
        The <emphasis>Status MA</emphasis> is able to interact with the
        <command>LS</command> in three major ways:
        <emphasis>Registering</emphasis> information,
        <emphasis>Deregistering</emphasis> information, and
        <emphasis>Keeping Alive</emphasis> already registered information.  All
        of these interactions rely on the service's backend configuration as the
        underlying data store, and some self knowledge of the service itself
        to form an identity.
      </para>

      <para>
        All transactions must involve two major parts to a message: service
        identification information (in the form of a
        <emphasis>service</emphasis> description or an <command>LS</command>
        issued <emphasis>key</emphasis>) and data (as properly formatted
        metadata capable of being used by the Status servce or as an
        <command>LS</command> issued <emphasis>key</emphasis>).
      </para>

      <section id="functional_ls_success" xreflabel="Success">
        <title>Success</title>

        <para>
          Success for interacting with the <command>LS</command> involves
          interpreting the result codes that are returned in each
          <emphasis>response</emphasis> message for the triggering
          <emphasis>request</emphasis>.  If a non-successful error code is
          seen the <emphasis>Status MA</emphasis> must be nimble enough to
          interpret the result and take the appropriate action.
        </para>

        <para>
          Successful results that are returned for any of the operations
          indicate that the internal state of the <command>LS</command>
          has been updated to reflect the reality of the
          <emphasis>Status MA</emphasis>.
        </para>

      </section>

      <section id="functional_ls_failure" xreflabel="Failure">
        <title>Failure</title>

        <para>
          Failure for this operation is defined as receiving an error message
          from the service indication that one of these conditions may be true:
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              The message was improperly formatted.
            </para>
          </listitem>
          <listitem>
            <para>
              The backend storage is improperly configured.
            </para>
          </listitem>
          <listitem>
            <para>
              The contacted <command>LS</command> does not participate in this
              sort of exchange (or may be beyond your permissions to use).
            </para>
          </listitem>
          <listitem>
            <para>
              There is nothing matching a particular query.
            </para>
          </listitem>
          <listitem>
            <para>
              Internal service or system errors may have occurred.
            </para>
          </listitem>

        </itemizedlist>

      </section>

      <section id="functional_ls_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>
          There are three major message types that are possible when
          interacting with the <command>LS</command>, each with the
          appropriate <emphasis>request</emphasis>/<emphasis>response</emphasis>
          pair.
        </para>

        <itemizedlist mark='opencircle'>
          <listitem>
            <para>
              LSRegistrationRequest
            </para>
          </listitem>
          <listitem>
            <para>
              LSRegistrationResponse
            </para>
          </listitem>
          <listitem>
            <para>
              LSDeregistrationRequest
            </para>
          </listitem>
          <listitem>
            <para>
              LSDeregistrationResponse
            </para>
          </listitem>
          <listitem>
            <para>
              LSKeepaliveRequest
            </para>
          </listitem>
          <listitem>
            <para>
              LSKeepalivResponse
            </para>
          </listitem>
        </itemizedlist>

      </section>

    </section>

  </section>







  <section id="interface" xreflabel="Interface Specification">
    <title>Interface Specification</title>
    <para>
    </para>
  </section>







  <glossary id="glossary">
    <title>Terms</title>

    <glossdiv id="A">
      <title>A</title>
      <glossentry id="apt"><glossterm>apt</glossterm>
        <glossdef>
          <para>Advanced Packaging Tool, or APT, is a front-end for the
          package management system used by Debian GNU/Linux and its
          derivatives.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="B">
      <title>B</title>
    </glossdiv>

    <glossdiv id="C">
      <title>C</title>
      <glossentry id="characteristic" xreflabel="characteristics"><glossterm>characteristic</glossterm>
        <glossdef>
          <para>Taken on the context of networking, these describe the
          intrinsic properties of a portion of the network that are related
          to the performance and reliability of the network.  See
          <ulink url="http://www.ggf.org/documents/GFD.23.pdf">http://www.ggf.org/documents/GFD.23.pdf</ulink>
          for more information.</para>
        </glossdef>
      </glossentry>
      <glossentry id="chaining"><glossterm>chaining</glossterm>
        <glossdef>
          <para>
            The process of linking together elements in the
            <xref linkend="NMWG" /> XML specification.
          </para>
        </glossdef>
        <glossseealso otherterm="filter_chaining">filter chaining</glossseealso>
        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>
    </glossdiv>

    <glossdiv id="D">
      <title>D</title>
      <glossentry id="data"><glossterm>data</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> <xref linkend="XML" /> block used
          to store dynamic information, such as the results of a measurement.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="E">
      <title>E</title>
    </glossdiv>

    <glossdiv id="F">
      <title>F</title>
      <glossentry id="filter_chaining" xreflabel="filter chaining"><glossterm>filter chaining</glossterm>
        <glossdef>
          <para>
            Chaining operation that is akin to performing advanced selection or
            aggregation on a dataset.
          </para>
        </glossdef>
        <glossseealso otherterm="chaining">chaining</glossseealso>
        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>
    </glossdiv>

    <glossdiv id="G">
      <title>G</title>
    </glossdiv>

    <glossdiv id="H">
      <title>H</title>
      <glossentry id="HTTP"><glossterm>HTTP</glossterm>
        <glossdef>
          <para>Hypertext Transfer Protocol (HTTP) is a communications protocol
          used to transfer or convey information on intranets and the World
          Wide Web.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="I">
      <title>I</title>
    </glossdiv>

    <glossdiv id="J">
      <title>J</title>
    </glossdiv>

    <glossdiv id="K">
      <title>K</title>
    </glossdiv>

    <glossdiv id="L">
      <title>L</title>
    </glossdiv>

    <glossdiv id="M">
      <title>M</title>
      <glossentry id="merge_chaining" xreflabel="merge chaining"><glossterm>merge chaining</glossterm>
        <glossdef>
          <para>
            Chaining that combines linked metadata items into a new
            representation.
          </para>
        </glossdef>
        <glossseealso otherterm="filter_chaining">filter chaining</glossseealso>
        <glossseealso otherterm="chaining">chaining</glossseealso>
      </glossentry>
      <glossentry id="metadata"><glossterm>metadata</glossterm>
        <glossdef>
          <para>An <xref linkend="NMWG" /> <xref linkend="XML" /> block used
          to store static information, such as the specific parameters of a
          measurement.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="N">
      <title>N</title>
      <glossentry id="NMWG"><glossterm>NM-WG</glossterm>
        <glossdef>
          <para>The performance of most grid applications is dependent on the
          performance of the networks forming the grid. The Network
          Measurements Working Group (NMWG) identifies network metrics
          (aka <xref linkend="characteristic" />) useful to grid applications
          and middleware, and develops standard mechanisms to describe and
          publish these characteristics to the Grid.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="O">
      <title>O</title>
    </glossdiv>

    <glossdiv id="P">
      <title>P</title>
      <glossentry id="perfSONAR"><glossterm>perfSONAR</glossterm>
        <glossdef>
          <para>Network performance monitoring framework.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="Q">
      <title>Q</title>
    </glossdiv>

    <glossdiv id="R">
      <title>R</title>
      <glossentry id="RPM"><glossterm>RPM</glossterm>
        <glossdef>
          <para>(originally Red Hat Package Manager, abbreviated RPM) is a
          package management system. The name RPM refers to two things: a
          software package file format, and software packaged in this format.
          RPM was intended primarily for Linux distributions; the file format
          RPM is the baseline package format of the Linux Standard Base.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="S">
      <title>S</title>
      <glossentry id="schema"><glossterm>schema</glossterm>
        <glossdef>
          <para>XML specification, normally written in XML.</para>
        </glossdef>
        <glossseealso otherterm="schemata">schemata</glossseealso>
      </glossentry>
      <glossentry id="schemata"><glossterm>schemata</glossterm>
        <glossdef>
          <para>Plural of schema.</para>
        </glossdef>
        <glossseealso otherterm="schema">schema</glossseealso>
      </glossentry>
      <glossentry id="snmp"><glossterm>SNMP</glossterm>
        <glossdef>
          <para>The Simple Network Management Protocol (SNMP) forms part of
          the internet protocol suite as defined by the Internet Engineering
          Task Force (IETF). SNMP is used in network management systems to
          monitor network-attached devices for conditions that warrant
          administrative attention.</para>
        </glossdef>
      </glossentry>
      <glossentry id="SOAP"><glossterm>SOAP</glossterm>
        <glossdef>
          <para>SOAP originally stood for Simple Object Access Protocol, and
          lately also Service Oriented Architecture Protocol, but is now
          simply SOAP is a protocol for exchanging XML-based messages over
          computer networks, normally using <xref linkend="HTTP" />.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="T">
      <title>T</title>
    </glossdiv>

    <glossdiv id="U">
      <title>U</title>
      <glossentry id="up2date"><glossterm>up2date</glossterm>
        <glossdef>
          <para>The Red Hat Update Agent, is a tool used by Red Hat Enterprise
          Linux, CentOS and early versions of Fedora Core that downloads and
          installs new software and upgrades to the operating system. </para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="V">
      <title>V</title>
    </glossdiv>

    <glossdiv id="W">
      <title>W</title>
    </glossdiv>

    <glossdiv id="X">
      <title>X</title>
      <glossentry id="XML"><glossterm>XML</glossterm>
        <glossdef>
          <para>The Extensible Markup Language (XML) is a general-purpose markup
          language. It is classified as an extensible language because it
          allows its users to define their own tags. Its primary purpose is
          to facilitate the sharing of structured data across different
          information systems, particularly via the Internet.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="Y">
      <title>Y</title>
      <glossentry id="yum"><glossterm>yum</glossterm>
        <glossdef>
          <para>The Yellow dog Updater, Modified (YUM) is a free software/open
          source command line package management utility for <xref linkend="RPM" />-compatible
          Linux operating systems. </para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="Z">
      <title>Z</title>
    </glossdiv>

  </glossary>


  <bibliography id="bibliography">
    <title>References</title>

    <biblioentry>
      <abbrev>Perl</abbrev>
      <title>
        <ulink url="http://www.perl.org">Perl Programing Language</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>log4perl</abbrev>
      <title>
        <ulink url="http://log4perl.sourceforge.net/">log4perl</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>SNMP</abbrev>
      <title>
        <ulink url="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol">Simple Network Management Protocol</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>MRTG</abbrev>
      <title>
        <ulink url="http://oss.oetiker.ch/mrtg/">Multi Router Traffic Grapher</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>SNAPP</abbrev>
      <title>
        <ulink url="http://tools.globalnoc.iu.edu/snapp.html">SNMP Network Analysis and Presentation Package</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>Cricket</abbrev>
      <title>
        <ulink url="http://cricket.sourceforge.net/">Cricket</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>CACTI</abbrev>
      <title>
        <ulink url="http://cacti.net/">CACTI</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>RRD</abbrev>
      <title>
        <ulink url="http://oss.oetiker.ch/rrdtool/">RRDTool</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>NM-WG</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu">Network Measurements Working Group</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>perfSONAR</abbrev>
      <title>
        <ulink url="http://www.perfSONAR.net">perfSONAR</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>perfSONAR-UI</abbrev>
      <title>
        <ulink url="http://perfsonar.acad.bg/">perfSONAR-UI</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>XML</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML">Extensible Markup Language (XML)</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>ping</abbrev>
      <title>
        <ulink url="http://en.wikipedia.org/wiki/Ping">Ping - Wikipedia</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>RELAX-NG</abbrev>
      <title>
        <ulink url="http://relaxng.org/">RELAX-NG Schema Language</ulink>
      </title>
    </biblioentry>

    <biblioentry xreflabel="XSD">
      <abbrev>XSD</abbrev>
      <title>
        <ulink url="http://www.w3.org/XML/Schema">XML Schema</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>GGF/OGF</abbrev>
      <title>
        <ulink url="http://www.ogf.org/">(Global|Open) Grid Forum</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>CDF</abbrev>
      <title>
        <ulink url="http://en.wikipedia.org/wiki/Cumulative_distribution_function">Cumulative distribution function - Wikipedia</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>NMWG-Schema</abbrev>
      <title>
        <ulink url="http://nmwg.internet2.edu/nm-schema-base.html">NMWG Base Schema</ulink>
      </title>
    </biblioentry>

    <biblioentry>
      <abbrev>Zurawski06Scalable</abbrev>
      <title>A Scalable Framework for Representation and Exchange of Network Measurements</title>
      <authorgroup>
        <author><personname>
          <firstname>J.</firstname><surname>Zurawski</surname>
        </personname></author>
        <author><personname>
          <firstname>M.</firstname><surname>Swany</surname>
        </personname></author>
        <author><personname>
          <firstname>D.</firstname><surname>Gunter</surname>
        </personname></author>
      </authorgroup>
      <confgroup>
        <confdates>March, 2006</confdates>
        <conftitle>2nd International IEEE/Create-Net Conference on Testbeds and Research Infrastructures for the Development of Networks and Communities</conftitle>
        <address>Barcelona, Spain</address>
        <confsponsor>IEEE/Create-Net</confsponsor>
      </confgroup>
    </biblioentry>

    <biblioentry>
      <abbrev>Hanemann05PerfSONAR</abbrev>
      <title>PerfSONAR: A Service-Oriented Architecture for Multi-Domain Network Monitoring </title>
      <authorgroup>
        <author><personname>
          <firstname>A.</firstname><surname>Hanemann</surname>
        </personname></author>
        <author><personname>
          <firstname>J.</firstname><surname>Boote</surname>
        </personname></author>
        <author><personname>
          <firstname>E.</firstname><surname>Boyd</surname>
        </personname></author>
        <author><personname>
          <firstname>J.</firstname><surname>Durand</surname>
        </personname></author>
        <author><personname>
          <firstname>L.</firstname><surname>Kudarimoti</surname>
        </personname></author>
        <author><personname>
          <firstname>R.</firstname><surname>Lapacz</surname>
        </personname></author>
        <author><personname>
          <firstname>M.</firstname><surname>Swany</surname>
        </personname></author>
        <author><personname>
          <firstname>S.</firstname><surname>Trocha</surname>
        </personname></author>
        <author><personname>
          <firstname>J.</firstname><surname>Zurawski</surname>
        </personname></author>
      </authorgroup>
      <confgroup>
        <confdates>2005</confdates>
        <conftitle>International Conference on Service Oriented Computing</conftitle>
      </confgroup>
    </biblioentry>

  </bibliography>

</article>



