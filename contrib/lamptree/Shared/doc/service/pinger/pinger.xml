<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>perfSONAR-PS PingER - Complete Documentation</title>

    <authors>
      <firstname>Maxim</firstname>

      <surname>Grigoriev</surname>

      <affiliation>
        <address><email>maxim@fnal.gov</email></address>
      </affiliation>

      <firstname>Yee-Ting</firstname>

      <surname>Li</surname>

      <affiliation>
        <address><email>ytl@slac.stanford.edu</email></address>
      </affiliation>
    </authors>

    <copyright>
      <year>2007</year>

      <year>2008</year>

      <holder>Internet2</holder>
    </copyright>
  </articleinfo>

  <section id="changes" xreflabel="Document Change Log">
    <title>Document Changes</title>

    <table align="center" frame="all" halign="center" id="table.1" width="80%">
      <title>Change Log</title>

      <tgroup align="left" cols="4" colsep="1" rowsep="1">
        <colspec colname="c1" colnum="1" width="10%" />

        <colspec colname="c2" colnum="2" width="10%" />

        <colspec colname="c3" colnum="3" width="50%" />

        <colspec colname="c4" colnum="4" width="30%" />

        <thead>
          <row>
            <entry>Version</entry>

            <entry>Date</entry>

            <entry>Description</entry>

            <entry>Author(s)</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>1.0</entry>

            <entry>01/01/2008</entry>

            <entry>First Draft Issued</entry>

            <entry>Maxim Grigoriev</entry>
          </row>
        </tbody>

        <tbody>
          <row>
            <entry>1.1</entry>

            <entry>01/09/2008</entry>

            <entry>Conversion to DocBook, addition of configuration and
            installation documentation. Addition of MP and LS interface
            descriptions</entry>

            <entry>Yee-Ting Li</entry>
          </row>
        </tbody>

        <tbody>
          <row>
            <entry>1.2</entry>

            <entry>03/21/2008</entry>

            <entry>Updated MP configuration, MetaDataKey response and
            SetupData response messages, added RelaxNG compact schemas</entry>

            <entry>Maxim Grigoriev</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="general-information" xreflabel="General Information">
    <title>General Information</title>

    <para><emphasis>Service Name:</emphasis> perfSONAR-PS-PingER-1.0</para>

    <para><emphasis>Service Type:</emphasis> MA and MP</para>

    <para><emphasis>Version/release:</emphasis> 1.0</para>

    <para><emphasis>Service Description:</emphasis> This service provides the
    capability to publish data from the Measurement Archive, interact with
    remote Lookup Service and schedule and execute ping measurements and store
    measured data and metadata into the service storage SQL database.</para>

    <para><emphasis>Contact Person(s):</emphasis> Maxim Grigoriev, Yee-Ting
    Li</para>

    <para><emphasis>Contact Information:</emphasis> maxim at fnal dot gov, ytl
    at slac dot stanford dot edu</para>
  </section>

  <section id="introduction" xreflabel="Introduction">
    <title>Introduction</title>

    <para><emphasis>perfSONAR-PS</emphasis> is an implementation of the
    <citation>perfSONAR</citation> standard written in the
    <citation>Perl</citation> programming language.
    <emphasis>perfSONAR-PS</emphasis> aims for complete compatibility with all
    other implementations of the <emphasis>perfSONAR</emphasis>
    standard.</para>

    <para>The PingER suite utilizes the libraries and design of the
    perfSONAR-PS suite to provide network performance information regarding
    network latencies, jitter and reachability (between monitored network
    hosts) and presents the via a <emphasis>perfSONAR</emphasis> compatible
    interface.</para>

    <para>This document describes the details of the
    <emphasis>perfSONAR-PS</emphasis> PingER service. In the following text
    the functionality of the PingER Measurement Archive and Measurement Point
    will be described. For detailed protocol specifications see "PingER
    service Protocol Specification". In addition to outlining the installation
    and configuration steps, a detailed guide of interface and functional
    behavior is included. The interface specification is meant to give a
    <emphasis>black box</emphasis> understanding of the workings of the
    service, while the functional specification describes the inner workings
    of the service decision making process.</para>

    <para>This software offers the ability to <emphasis>collect</emphasis> and
    <emphasis>publish</emphasis> data collected via ICMP "ping" packets. This
    particular release focuses on data that offers certain <xref
    linkend="characteristic" /> of the network, namely network
    <emphasis>latency (Round Trip Time)</emphasis>,
    <emphasis>jitter</emphasis>, and <emphasis>reachability</emphasis>. These
    three metrics are collected by the PingER <emphasis>MP</emphasis> using
    the standard "ping" program which is available on all supported systems.
    The results of these measurements are stored in Relational Databases such
    as <citation>MySQL</citation>, <citation>Postgres</citation>, and
    <citation>sqlite</citation>.</para>

    <para>The <emphasis>publishing</emphasis> of <xref linkend="data" /> is
    accomplished by exposing the data located in <emphasis>SQL</emphasis>
    databases by describing the <xref linkend="metadata" /> (i.e. static
    information about the data such as how/where it was collected, etc.) A Web
    Services (<citation>WS</citation>) interface is offered that allows client
    applications such as <citation>perfSONAR-UI</citation> to contact this
    service, query for specific resources, and finally present graphs of the
    results.</para>
  </section>

  <section id="installation" xreflabel="Installation Procedures">
    <title>Installation Procedures</title>

    <para>Before installing <emphasis>PingER</emphasis> suite, be sure to
    check if the software listed in <xref linkend="prerequisites" /> is
    currently installed on the target system. This can be done in one of two
    ways: following <xref linkend="auto_installation" /> or <xref
    linkend="manual_installation" />. Software versions may change from prior
    releases of <emphasis>perfSONAR-PS</emphasis> without explicit
    notice.</para>

    <para>After installing the necessary prerequisite software, the actual
    software must be installed according to <xref
    linkend="service_installation" />. It is necessary to perform some basic
    configuration steps outlined in <xref linkend="service_configuration" />,
    followed by testing the configuration and installation in <xref
    linkend="service_testing" />. Finally we can start the service with
    instructions in <xref linkend="service_use" />.</para>

    <section id="prerequisites" xreflabel="Software Prerequisites">
      <title>Software Prerequisites</title>

      <para>To function properly, the <emphasis>PingER</emphasis> service
      requires the use of some prerequisite software to both store and mange
      the underlying data as well as assist with service duties such as
      parsing <xref linkend="XML" /> or managing the <xref linkend="SOAP" />
      over <xref linkend="HTTP" /> transportation.</para>

      <para>The following sections will guide the user through what is
      required, and how it may be installed as painlessly as possible.</para>

      <section id="perl_installation" xreflabel="Required Perl Modules">
        <title>Required Perl Modules</title>

        <para>There are several Perl modules that are required for the
        <emphasis>PingER</emphasis> to function properly. Some of these are
        included in the base Perl installation on many machines, although it
        is important to check all to be sure upgrades are not
        available.</para>

        <para>The following is a list of the necessary modules for the
        <emphasis>PingER</emphasis>.</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para><ulink
            url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/strict.pm">strict</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/warnings.pm">warnings</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/Exporter.pm">Exporter</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~kwilliams/PathTools-3.25/Cwd.pm">Cwd</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~nwclark/perl-5.8.8/ext/POSIX/POSIX.pod">POSIX</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~nwclark/perl-5.8.8/ext/Fcntl/Fcntl.pm">Fcntl</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~jv/Getopt-Long-2.37/lib/Getopt/Long.pm">Getopt::Long</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~mschilli/Log-Log4perl-1.14/lib/Log/Log4perl.pm">Log::Log4perl</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~drolsky/Params-Validate-0.89/lib/Params/Validate.pm">Params::Validate</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~drolsky/Log-Dispatch-2.20/lib/Log/Dispatch.pm">Log::Dispatch</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~drolsky/Log-Dispatch-2.20/lib/Log/Dispatch/Screen.pm">Log::Dispatch::Screen</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~markpf/Log-Dispatch-FileRotate-1.16/FileRotate.pm">Log::Dispatch::FileRotate</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~gbarr/IO-1.2301/IO/File.pm">IO::File</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~drolsky/Time-Local-1.18/lib/Time/Local.pm">Time::Local</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~gaas/libwww-perl-5.808/lib/HTTP/Daemon.pm">HTTP::Daemon</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~gaas/libwww-perl-5.808/lib/LWP/UserAgent.pm">LWP::UserAgent</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~msergeant/XML-XPath-1.13/XPath.pm">XML::XPath</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~pajas/XML-LibXML-1.65/LibXML.pod">XML::LibXML</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~tjenness/File-Temp-0.19/Temp.pm">File::Temp</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~nwclark/perl-5.8.8/lib/File/Basename.pm">File::Basename</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~jhi/Time-HiRes-1.9708/HiRes.pm">Time::HiRes</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~kane/Module-Load-0.12/lib/Module/Load.pm">Module::Load</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~rclamp/Pod-Coverage-0.19/lib/Pod/Coverage.pm">Pod::Coverage</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/~sburke/Pod-Escapes-1.04/lib/Pod/Escapes.pm">Pod::Escapes</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/EVO/Clone-PP-1.02/PP.pm">Clone::PP</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/DROLSKY/DateTime-Locale-0.35/lib/DateTime/Locale.pm">DateTime::Locale</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/DROLSKY/Params-Validate-0.89/lib/Params/Validate.pm">Params::Validate</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/ADAMK/Task-Weaken-1.02/lib/Task/Weaken.pm">Task::Weaken</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/JSIRACUSA/Rose-Object-0.84/lib/Rose/Object.pm">Rose::Object</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/DAGOLDEN/Sub-Uplevel-0.18/lib/Sub/Uplevel.pm">Sub::Uplevel</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/STBEY/Bit-Vector-6.4/Vector.pod">Bit::Vector</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/ADAMK/Params-Util-0.31/lib/Params/Util.pm">Params::Util</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/RJBS/Sub-Install-0.924/lib/Sub/Install.pm">Sub::Install</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/JSIRACUSA/Time-Clock-0.11/lib/Time/Clock.pm">Time::Clock</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/AUDREYT/YAML-Syck-1.00/lib/YAML/Syck.pm">YAML::Syck</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/RDF/Clone-0.28/Clone.pm">Clone</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/RICKM/DateTime-Format-Strptime-1.0702/lib/DateTime/Format/Strptime.pm">DateTime::Format::Strptime</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/RJBS/Data-OptList-0.103/lib/Data/OptList.pm">Data::OptList</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/RJBS/Sub-Exporter-0.978/lib/Sub/Exporter.pm">Sub::Exporter</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/CHANSEN/SQL-ReservedWords-0.7/lib/SQL/ReservedWords.pm">SQL::ReservedWords</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/JSIRACUSA/Rose-DateTime-0.532/lib/Rose/DateTime.pm">Rose::DateTime</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/VPARSEVAL/List-MoreUtils-0.22/lib/List/MoreUtils.pm">List::MoreUtils</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/DROLSKY/DateTime-0.41/lib/DateTime.pm">DateTime</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/DMAKI/DateTime-Format-Pg-0.16001/lib/DateTime/Format/Pg.pm">DateTime::Format::Pg</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/TIMB/DBI-1.601/DBI.pm">DBI</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/MSERGEANT/DBD-SQLite-1.14/lib/DBD/SQLite.pm">DBD::SQLite</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/CAPTTOFU/DBD-mysql-4.006/lib/DBD/mysql.pm">DBD::Pg</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/CAPTTOFU/DBD-mysql-4.006/lib/DBD/mysql.pm">DBD::mysql</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/JSIRACUSA/Rose-DB-0.737/lib/Rose/DB.pm">Rose::DB</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/JSIRACUSA/Rose-DB-Object-0.766/lib/Rose/DB/Object.pm">Rose::DB::Object</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/JPEACOCK/version-0.74/lib/version.pod">version</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/MSCHWERN/Carp-Assert-0.20/lib/Carp/Assert.pm">Carp::Assert</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/MSCHWERN/Class-Fields-0.203/lib/Class/Fields.pm">Class::Fields</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/GRANTM/XML-SAX-0.16/SAX.pm">XML::SAX</ulink></para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://search.cpan.org/author/WAZZUTEKE/Clone-Fast-0.93/lib/Clone/Fast.pm">Clone::Fast</ulink></para>
          </listitem>
        </itemizedlist>

        <para>It is recommended that users utilize the installation method
        described in <xref linkend="auto_installation" />, failing back to
        <xref linkend="manual_installation" /> if problems occur.</para>
      </section>

      <section id="auto_installation" xreflabel="Automatic Installation">
        <title>Automatic Installation</title>

        <para>An automatic installation script has been developed that will
        take care of obtaining libraries and software needed for this
        application as described in <xref linkend="perl_installation" />. The
        script is named <emphasis>configure.PL</emphasis> and can be executed
        in the following manner.</para>

        <programlisting>    
          sudo perl configure.PL
        </programlisting>

        <para>The script will check for required perl libraries and use
        <emphasis>CPAN</emphasis> to install any that are missing or old. The
        script will report any errors that <emphasis>CPAN</emphasis>
        encountered due to missing components. Please see <xref
        linkend="perl_installation_issues" /> if the process is not
        successful.</para>
      </section>

      <section id="manual_installation" xreflabel="Manual Installation">
        <title>Manual Installation</title>

        <para>The most straightforward way to install Perl modules is through
        the <emphasis>CPAN</emphasis> administrative interface available on
        most machines:</para>

        <programlisting> 
          sudo perl -MCPAN -e shell
        </programlisting>

        <para>If this is your first time using <emphasis>CPAN</emphasis>,
        there will be several questions to answer as you prepare the
        interface. You will eventually be presented with a shell
        prompt.</para>

        <programlisting> 
          cpan[1]&gt;
        </programlisting>

        <para>Modules may be installed by typing:</para>

        <programlisting> 
          cpan[1]&gt;install MODULE::NAME
        </programlisting>

        <para>Instructions may appear as the installation proceeds, errors may
        also occur that will need to be handled. If a module is installed, a
        message may appear:</para>

        <programlisting> 
          cpan[1]&gt; install MODULE::NAME
          MODULE::NAME is up to date (x.yz).   
        </programlisting>
      </section>

      <section id="installation_issues"
               xreflabel="Known Installation Problems">
        <title>Known Installation Problems</title>

        <para>Issues regarding the installation of and Perl modules are well
        documented for the <emphasis>perfSONAR-PS</emphasis> services. We
        present some of these issues here as a brief introduction to items
        that the installer/developer should be aware of.</para>

        <section id="perl_installation_issues" xreflabel="Perl Modules">
          <title>Perl Modules</title>

          <para>Some modules require software libraries that may not be
          installed on most systems. Although it is normally the job of the
          module designer to take care of these situations, this is not always
          the case. Specifically the XML modules
          (<emphasis>XML::XPath</emphasis>, <emphasis>XML::LibXML</emphasis>)
          require the the XML::Parser module that depends on several internal
          libraries.</para>

          <para>If you system is equipped with a software management system
          (such as <xref linkend="apt" />, <xref linkend="yum" />, or <xref
          linkend="up2date" />) try and locate the
          <emphasis>xml-parser-perl</emphasis> package via the search
          interface. This is the easiest way to avoid trouble with
          <emphasis>CPAN</emphasis>. Additionally, ensure that
          <emphasis>libxml2-dev</emphasis>, the <emphasis>LibXML</emphasis>
          version 2 development libraries, are also available.</para>
        </section>
      </section>

      <section id="post_installation" xreflabel="Post Installation Tasks">
        <title>Post Installation Tasks</title>

        <para>There is no database engine/server supplied with PingER
        distribution. The sysadmin of the host, where the PingER MA/Mp will be
        deployed, should provide access to the any of supported databases. The
        list of databases for PingER Ma consists of MySQL, SQLite, Postgresql,
        Oracle. The PingER APi was tested mainly on MySQL and SQLite. The
        corresponded perl modules ( DBD::mysql, DBD::sqlite and DBD::Pg) are
        among other pre-requisites. The PingER database can be easily created
        by executing supplied sql files, see notes below.</para>

        <section id="mysql_notes" xreflabel="MySQL Notes">
          <title>MySQL Notes</title>

          <para>Locate the MySQL DB server on the intented host or install it
          from the RPM (YUM). Find out the version of the MySQL server by
          running: <command>mysql --version</command>. Find out or set up your
          MySQL DB root account password. Run <command>&gt;mysql -v -u root
          -p'root_pass' &gt; util/create_pingerMA_MySQL.sql </command> Or log
          on the MySQl server and execute <command>&gt;source
          util/create_pingerMA_MySQL.sql</command></para>
        </section>

        <section id="sqlite_notes" xreflabel="SQLite Notes">
          <title>SQLite Notes</title>

          <para>Locate the SQLite executable on the intented host or install
          it from the RPM (YUM). Find out the version of the SQLite server by
          running: <command>&gt;sqlite3</command>. Please notice that only
          SQLite version 3 and higher is supported. Run <command>&gt;sqlite3
          -init util/create_pingerMA_SQLite.sql </command></para>
        </section>
      </section>
    </section>

    <section id="service_installation" xreflabel="Service Installation">
      <title>Service Installation</title>

      <para>After installing the prerequisite software, the remaining steps to
      getting the <emphasis>PingER</emphasis> working are few. The software
      directory should be placed in a common location such as
      <command>/usr/local</command> or <command>/opt</command>. This is not a
      requirement. Note that other paths (particularly in configuration files)
      may need to be changed to reflect this move.</para>

      <para>There are three major configuration files that may be adjusted,
      although the software is configured to run <emphasis>out of the
      box</emphasis>. The configurations files can be adjusted to personalize
      settings, and to add the metrics you are collecting of course.</para>
    </section>

    <section id="service_configuration"
             xreflabel="Basic Service Configuration">
      <title>Basic Service Configuration</title>

      <para>There are three major configuration files for the
      <emphasis>PingER</emphasis> service. Each file is configured to run
      <emphasis>out of the box</emphasis>, so modifying these files is only
      necessary to <emphasis>customize</emphasis> the behavior of this service
      (or make it available for non-<emphasis>localhost</emphasis>
      viewing).</para>

      <para>A more detailed explanation of the various configuration options
      and the reasoning behind each is available in <xref
      linkend="configuration" />.</para>

      <section id="logging_configuration" xreflabel="Logging Configuration">
        <title>Logging Configuration via logger.conf</title>

        <para>This file contains information regarding logging in the
        <emphasis>perfSONAR-PS</emphasis> architecture. Under normal
        circumstances the file will not need to be changed. All logging
        options can be configured by setting options to
        <command>perfsonar-daemon.pl</command>. The only real choice worth
        noting during testing is choosing between the following three output
        methods.</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para><command>log4perl.appender.A1=Log::Dispatch::Screen</command></para>
          </listitem>

          <listitem>
            <para><command>log4perl.appender.A1=Log::Dispatch::Syslog</command></para>
          </listitem>

          <listitem>
            <para><command>log4perl.appender.A1=Log::Dispatch::FileRotate</command></para>
          </listitem>
        </itemizedlist>

        <para>The <emphasis>Screen</emphasis> method sends log files to the
        output screen, The <emphasis>Syslog</emphasis> method will append the
        log messages directly to the Syslog system, and the
        <emphasis>FileRotate</emphasis> method appends log messages to a
        specified log file (specified via
        <emphasis>log4perl.appender.A1.filename</emphasis>) and will
        automatically rotate when they get too large (specified via
        <emphasis>log4perl.appender.A1.size</emphasis>).</para>

        <para>The default setting is to log to the screen.</para>
      </section>

      <section id="service_information_configuration"
               xreflabel="Service Configuration">
        <title>Service Configuration via pinger.conf</title>

        <para>This file contains detailed information and settings that help
        operate the <emphasis>PingER</emphasis> software suite. A major
        listing of all directives and their full meaning is available in <xref
        linkend="configuration_service" />.</para>

        <para>need some input/reference to aaron's daemon code for this</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para><command>METADATA_DB_FILE</command> - Location of the
            <emphasis>store.xml</emphasis> file</para>
          </listitem>

          <listitem>
            <para><command>RRDTOOL</command> - Path to
            <emphasis>RRDtool</emphasis>.</para>
          </listitem>

          <listitem>
            <para><command>PORT</command> - Listen port for the
            application</para>
          </listitem>

          <listitem>
            <para><command>ENDPOINT</command>This is used in conjunction with
            the port and hostname:
            <emphasis>http://HOST:PORT/end/Point/String</emphasis></para>
          </listitem>
        </itemizedlist>

        <para>A helper utility named <emphasis>configure.pl</emphasis>
        (located in <command>util/</command>) can help create this file by
        providing questions regarding each value.</para>

        <para>It is possible run the MP and MA on different physical machines.
        This can be achieved by defining solely the MP or the MA on the
        relevant machine - i.e. exclusion of a either service from
        <emphasis>pinger.conf</emphasis> disables its functionality. However,
        in order for the MP to insert the data into the database that the MA
        uses, both configuration files must point to the same SQL
        engine.</para>
      </section>

      <section id="mp_configuration" xreflabel="MP Configuration">
        <title>MP Configuration</title>

        <para>The MP performs the task of collecting measurement information
        and inserting the relevant network performance characteristics into
        the backend SQL database.</para>

        <para>The MP configuration file
        <emphasis>pinger-landmarks.xml</emphasis> defines a list of end hosts
        that should be 'ping'd' from the service and hence also network
        performance measurements that should be performed. As such, this file
        contains the descriptions of the end sites.</para>

        <para>The format of the <emphasis>pinger-landmarks.xml</emphasis> file
        is compatible with the <emphasis>perfSONAR-PS topology
        service</emphasis> which allows geographical and administration
        information storage and querying of the sites in question.</para>

        <para>Further motivation as to how this file is organized,
        constructed, and the reasons why it exists are available in <xref
        linkend="configuration" />.</para>
      </section>
    </section>

    <section id="service_testing" xreflabel="Post Installation Tests">
      <title>Post Installation Tests</title>

      <para>The entire PingER suite (both the MA and MP) can be run from a
      command line given the relevant configuration settings in
      <emphasis>pinger.conf</emphasis>. The following assumes that you are
      running both the MP and MA from the same machine and that the SQL
      database is local to both services.</para>

      <para>In the first terminal, enter the directory where the software is
      installed, run the following command.</para>

      <programlisting>
        ./pinger.pl --verbose
      </programlisting>

      <para>You will see output similar to the following example.</para>

      <programlisting>
         TBA 
      </programlisting>

      <para>Assuming default configurations, this starts both the MP and MA
      PingER services. They will both also register data with an a predefined
      <command>LS</command> service. The MP will initiate its' internal
      schedule of tests (as defined in
      <emphasis>pinger-landmarks.xml</emphasis>) and the MA will start
      listening for requests for PingER performance data.</para>

      <para>The <command>LS</command> registration functionality is disabled
      by default.</para>

      <para>In the second terminal, enter the directory where the software is
      installed, change into the <emphasis>client</emphasis> directory, and
      run this command as follows.</para>

      <programlisting>
      ./client.pl --server=localhost --port=8081 --endpoint=perfSONAR_PS/services/pinger/ma 
        requests/MetadataKeyRequest.xml
      </programlisting>

      <para>This will tell the client to contact the <command>MA</command>
      which is running on</para>

      <para><emphasis>http://localhost:8081/perfSONAR_PS/services/pinger/ma</emphasis>.</para>

      <para>And will send a simple <emphasis>MetaDataKeyRequest</emphasis>
      message (to see if the server is active). The client will see this
      output if everything is running smoothly.</para>

      <programlisting>
         TBA 
      </programlisting>

      <para>If you are not seeing a similar message, you may see something
      such as this.</para>

      <programlisting>
        
      2007/10/31 13:32:29 (32494) DEBUG&gt; Transport.pm:145 perfSONAR_PS::Transport::getHttpURI - 
        Created URI: http://localhost:8081//perfSONAR_PS/services/PingERMA
      2007/10/31 13:32:29 (32494) DEBUG&gt; Transport.pm:346 perfSONAR_PS::Transport::sendReceive - 
        Sending information to "http://localhost:8081//perfSONAR_PS/services/PingERMA".
      2007/10/31 13:32:29 (32494) DEBUG&gt; Transport.pm:356 perfSONAR_PS::Transport::sendReceive - 
        Send to "http://localhost:8081//perfSONAR_PS/services/PingERMA" failed.
      Empty String at ./client.pl line 106
        
      </programlisting>

      <para>This message indicates that the server is not properly listening
      on the port you are contacting, perhaps it is listening on another, the
      port is firewalled, or it may not be started at all. Please check the
      above steps, and try again.</para>

      <para>In the first terminal, this information will appear when the call
      comes in.</para>

      <programlisting>
         TBA 
      </programlisting>

      <para>The other messages in the <emphasis>client/requests</emphasis> may
      also be tried, with similar results.</para>
    </section>

    <section id="service_use" xreflabel="Service Use">
      <title>Service Use</title>

      <para>The software can be run as the following command.</para>

      <programlisting>
        ./pinger.pl
      </programlisting>

      <para>This will background the process automatically. Be sure to adjust
      your logging settings in <emphasis>logger.conf</emphasis>.</para>
    </section>
  </section>

  <section id="configuration" xreflabel="Metadata and System Configuration">
    <title>Metadata and System Configuration</title>

    <para>***** This shoudl be the same as that for the general new daemon
    architecture documentation. *****</para>

    <para>In <xref linkend="service_configuration" /> we briefly introduced
    some of the configuration that is necessary for the
    <emphasis>PingER</emphasis> suite in the context of getting the deployment
    to work smoothly. We will build upon the previous explanations in this
    section with a deeper description of the three configuration files, as
    well as some theory regarding the design and layout of these files.</para>

    <section id="configuration_logging" xreflabel="Logging Configuration">
      <title>Detailed Logging Configuration</title>

      <para>The logging facility used in this software is
      <citation>log4perl</citation>, a derivative of the popular
      <emphasis>log4j</emphasis> logging package used in Java. Log4perl offers
      the same ease of use as <emphasis>log4j</emphasis> does by allowing the
      user to control the <emphasis>level</emphasis> of logging used, thus
      increase or decreasing the amount of reported information. The ability
      to log is delivered through the use of a small log object, and single
      method calls based on level to output information.</para>

      <para>The logging is controlled via a very small configuration file,
      included in this package. Most interesting options are included in this
      file already, and under normal circumstances it should not be edited.
      The following brief overview describes the various directives of this
      file and how they may be twiddled to better suit the interested user.
      Those interested in adding options not included with the software may do
      so, but at their own risk.</para>

      <itemizedlist mark="opencircle">
        <listitem>
          <para><command>log4perl.logger.perfSONAR_PS=DEBUG, A1</command> -
          Establishes the <emphasis>top</emphasis> of the hierarchy for the
          logging object (perfSONAR_PS), sets the default log level
          (<emphasis>DEBUG</emphasis> in this case, you are free to choose
          <emphasis>TRACE</emphasis>, <emphasis>DEBUG</emphasis>,
          <emphasis>INFO</emphasis>, <emphasis>WARN</emphasis>,
          <emphasis>ERROR</emphasis>, or <emphasis>FATAL</emphasis>), and
          finally gives the object a <emphasis>localname</emphasis> (A1 in
          this case). The local name will be used to set other options on this
          new object we have created.</para>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1=DISPATCHER</command> - Pick one
          of several dispatching entities to record the log messages that are
          thrown. The common choices are as follows.</para>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>log4perl.appender.A1=Log::Dispatch::Screen</command>
              - Output log messages directly to the screen.</para>
            </listitem>

            <listitem>
              <para><command>log4perl.appender.A1=Log::Dispatch::Syslog</command>
              - Output log messages to the syslog facility.</para>
            </listitem>

            <listitem>
              <para><command>log4perl.appender.A1=Log::Dispatch::FileRotate</command>
              - Output log messages to the log file specified by
              <emphasis>log4perl.appender.A1.filename</emphasis>. The log file
              (<emphasis>log4perl.appender.A1.filename=log/perfSONAR.log</emphasis>)
              will then be <emphasis>rotated</emphasis> according to size
              (<emphasis>log4perl.appender.A1.max</emphasis>) and number
              (<emphasis>log4perl.appender.A1.size</emphasis>).</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1.filename=log/perfSONAR.log</command>
          - specify the location of a log file, can be absolute (i.e.
          <emphasis>/path/to/file</emphasis>) or relative (i.e.
          <emphasis>./path/to/file</emphasis>). Be sure the user running the
          service has permission to write the log file. Note that this option
          is really only valid when used with the
          <emphasis>log4perl.appender.A1=Log::Dispatch::FileRotate</emphasis>
          option.</para>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1.max=5</command> - Signifies the
          <emphasis>number</emphasis> of old log files to keep around when
          rotating logs. Note that this option is really only valid when used
          with the
          <emphasis>log4perl.appender.A1=Log::Dispatch::FileRotate</emphasis>
          option.</para>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1.size=16777216</command> -
          Signifies the <emphasis>size</emphasis> a log file can attain before
          being rotated out. Note that this option is really only valid when
          used with the
          <emphasis>log4perl.appender.A1=Log::Dispatch::FileRotate</emphasis>
          option.</para>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1.mode=append</command> - Sets the
          mode to append, this should not be altered.</para>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1.layout=Log::Log4perl::Layout::PatternLayout</command>
          - Uses a standard logging pattern when recording info. We will alter
          this with
          <emphasis>log4perl.appender.A1.layout.ConversionPattern</emphasis>.</para>
        </listitem>

        <listitem>
          <para><command>log4perl.appender.A1.layout.ConversionPattern=%d (%P)
          %p&gt; %F{1}:%L %M - %m%n</command> - Sets the logging output to be
          the date and time, the PID, the logging mode, the module name, the
          line number, the module object hierarchy, the function, and finally
          the message to be printed.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section id="configuration_service" xreflabel="Service Configuration">
      <title>Detailed Service Configuration</title>

      <para>The <emphasis>pinger.conf</emphasis> file describes configurable
      options about the service that can be specified by the user. Items that
      deal with important system information (i.e.
      <command>METADATA_DB_FILE</command>), performance(i.e.
      <command>MAX_WORKER_PROCESSES</command>), and style (i.e.
      <command>SERVICE_NAME</command>) are included in this file. The
      following listing describes the various options that can be adjusted in
      detail.</para>

      <para>***** THIS SHOULD BE UPDATED WITH AARON's STUFF *****</para>
    </section>

    <section id="configuration_mp" xreflabel="MP Configuration">
      <title>Detailed MP Configuration</title>

      <para>The MP has two configuration files; a service definition as
      defined in <xref linkend="configuration_service" /> that uses
      <emphasis>pinger.conf</emphasis>, and a measurement configuration
      defined in the <emphasis>pinger.conf</emphasis> that uses
      <emphasis>pinger-landmarks.xml</emphasis>. This section defines the
      schema and details of the latter and how to customize PingER to perform
      the necessary measurements to a defined list of hosts.</para>

      <para><emphasis>pinger-landmarks.xml</emphasis> is responsible for
      describing the list of end hosts to perform network measurements to, as
      well as providing some basic topology information regarding the contact
      for each remote site and the geographical location of those remote
      hosts.</para>

      <para>The format of <emphasis>pinger-landmarks.xml</emphasis> is such
      that is it compatible with the <emphasis>perfSONAR-PS topology
      service</emphasis> and the configuration file can be directly used by
      the topology service to facilitate discovery and mapping of PingER
      landmarks.</para>

      <section id="configuration_mp_structure" xreflabel="MP Structure">
        <title>PingER MP Configuration Structure</title>

        <para>The following description represents a
        <emphasis>complete</emphasis> markup of the possible elements that may
        be used in describing an PingER landmark host in the <emphasis>PingER
        MP</emphasis> service. The XML is also completely annotated with
        values, namespaces, and related prefixes. We will examine each of
        these items in turn.</para>

        <programlisting>
        
        &lt;pingertopo:topology xmlns:pingertopo="http://ogf.org/ns/nmwg/tools/pinger/landmarks/1.0/"
                xmlns:nmtl2="http://ogf.org/schema/network/topology/l2/20070707/" 
                xmlns:nmtl3="http://ogf.org/schema/network/topology/l3/20070707/"
                xmlns:nmtl4="http://ogf.org/schema/network/topology/l4/20070707/" 
                xmlns:nmtb="http://ogf.org/schema/network/topology/base/20070707/"
                xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"&gt;
                &lt;nmtb:domain id="urn:ogf:network:domain=slac.stanford.edu"&gt;
                  &lt;nmtb:node id="urn:ogf:network:domain=slac.stanford.edu:node=pinger"&gt;
                    &lt;nmtb:name type="string"&gt;pinger&lt;/nmtb:name&gt;
                    &lt;nmtb:hostName&gt;pinger.slac.stanford.edu&lt;/nmtb:hostName&gt;
                    &lt;nmtb:description&gt;&lt;/nmtb:description&gt;
                    &lt;nmwg:parameters id="1000B"&gt;
                      &lt;nmwg:parameter name="packetSize"&gt;1000&lt;/nmwg:parameter&gt;
                      &lt;nmwg:parameter name="count"&gt;10&lt;/nmwg:parameter&gt;
                      &lt;nmwg:parameter name="packetInterval"&gt;1&lt;/nmwg:parameter&gt;
                      &lt;nmwg:parameter name="ttl"&gt;32&lt;/nmwg:parameter&gt;
                      &lt;nmwg:parameter name="measurementPeriod"&gt;60&lt;/nmwg:parameter&gt;
                      &lt;nmwg:parameter name="measurementOffset"&gt;0&lt;/nmwg:parameter&gt;
                    &lt;/nmwg:parameters&gt;
                    &lt;nmtl3:port id="urn:ogf:network:domain=slac.stanford.edu:node=pinger:port=134.79.18.163"&gt;
                      &lt;nmtl3:ipAddress type="IPv4"&gt;134.79.240.30&lt;/nmtl3:ipAddress&gt;
                    &lt;/nmtl3:port&gt;
                  &lt;/nmtb:node&gt;
                &lt;/nmtb:domain&gt;
        &lt;/pingertopo:topology&gt;
        
        </programlisting>

        <section id="configuration_mp_domain" xreflabel="Domain">
          <title>Domain</title>

          <programlisting>
            
        &lt;nmtb:domain id="STRING"&gt;
                &lt;nmtb:node id="STRING"/&gt;
        &lt;/nmtb:domain&gt;
            
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - domain</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ogf.org/schema/network/topology/base/20070707/</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - node</para>
            </listitem>

            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>

          <para>The domain element encloses all <emphasis>static</emphasis>
          descriptors for a domain to be measured. As such, it contains a list
          of <emphasis>node</emphasis> descriptors which define the nodes
          within the domain to be measured. The namespace of this object is
          always the same and the object <command>is</command>
          required.</para>

          <para>There is only one required element that must be enclosed in a
          <command>domain</command> description as well as one attribute. At
          least one <xref linkend="configuration_mp_node" /> element is
          required for this element. The <emphasis>id</emphasis> element is
          required and should contain a unique identifier for the
          domain.</para>
        </section>

        <section id="configuration_mp_node" xreflabel="MP Node">
          <title>Node</title>

          <programlisting>
            
        &lt;nmtb:node id="STRING"&gt;
          &lt;nmtb:name type="string"&gt;STRING&lt;/nmtb:name&gt;
          &lt;nmtb:hostName&gt;STRING&lt;/nmtb:hostName&gt;
          &lt;nmtb:description&gt;STRING&lt;/nmtb:description&gt;
          &lt;nmwg:parameters/&gt;
          &lt;nmtl3:port/&gt;
        &lt;/nmtb:node&gt;
                                                
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - node</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ogf.org/schema/network/topology/base/20070707/"&gt;</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - name, hostName,
              description, parameters, port</para>
            </listitem>

            <listitem>
              <para><command>required</command> - yes</para>
            </listitem>
          </itemizedlist>

          <para>The <command>node</command> element encloses the description
          of the entity being measured. For the <emphasis>PingER MP</emphasis>
          the <command>node</command> MUST <command>always</command> contain a
          <xref linkend="configuration_mp_hostName" /> and <xref
          linkend="configuration_mp_parameters" /> element. The id attribute
          is also required and serves as a unique identification of the node
          for cross service lookup. The other elements allow further
          administrative descriptions of node and are not directly used by the
          PingER MP service.</para>

          <para>The optional inclusion of the <xref
          linkend="configuration_mp_port" /> element will allow the MP service
          to use the defined IP address rather than do a dynamic host lookup
          of the host. This is particular useful in situations where the DNS
          reliability of end sites are somewhat questionable or
          unreliable.</para>
        </section>

        <section id="configuration_mp_hostName" xreflabel="Parameters">
          <title>hostName</title>

          <programlisting>
            
        &lt;nmtb:hostName&gt;STRING&lt;/nmtb:hostName&gt;
            
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - hostName</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ogf.org/schema/network/topology/base/20070707/</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - none</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>

            <listitem>
              <para><command>required</command> - flexible</para>
            </listitem>
          </itemizedlist>

          <para>The <command>hostName</command> element MUST contain a valid
          fully qualified host name for the host. It is important that the
          text entry within this element should be resolvable by registered
          DNS servers as it will be used by the PingER MP as the destination
          address for ping measurements. Optionally, the definition of a <xref
          linkend="configuration_mp_port" /> allows the use of a fixed IP
          address to be used instead of the DNS hostname.</para>
        </section>

        <section id="configuration_mp_name" xreflabel="MP Name">
          <title>name</title>

          <programlisting>
            
        &lt;nmtb:name&gt;STRING&lt;/nmtb:name&gt;
            
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - name</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ogf.org/schema/network/topology/base/20070707/</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - none</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>

            <listitem>
              <para><command>required</command> - flexible</para>
            </listitem>
          </itemizedlist>

          <para>The <command>name</command> element describes the unqualified
          <emphasis>name</emphasis> of the node. This element can only be from
          the <emphasis>nmtb</emphasis> namespace, and should not have any
          attributes or elements. It must contain text that describes the
          local (unqualified) host name.</para>
        </section>

        <section id="configuration_mp_description" xreflabel="MP Description">
          <title>Description</title>

          <programlisting>
            
        &lt;nmtb:description&gt;STRING&lt;/nmtb:description&gt;
            
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - description</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ogf.org/schema/network/topology/base/20070707/</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - none</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - text</para>
            </listitem>

            <listitem>
              <para><command>required</command> - flexible</para>
            </listitem>
          </itemizedlist>

          <para>The <command>description</command> element serves as a general
          human readable description of the node.</para>
        </section>

        <section id="configuration_mp_parameters" xreflabel="MP Parameters">
          <title>Parameters</title>

          <programlisting>
            
        &lt;nmwg:parameters id="REQUIRED"&gt;
          &lt;nmwg:parameter name="packetSize"/&gt;
          &lt;nmwg:parameter name="count"/&gt;
          &lt;nmwg:parameter name="packetInterval"/&gt;
          &lt;nmwg:parameter name="ttl"/&gt;
          &lt;nmwg:parameter name="measurementPeriod"/&gt;
          &lt;nmwg:parameter name="measurementOffset"/&gt;
        &lt;/nmwg:parameters&gt;            
                                        
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - parameters</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ggf.org/ns/nmwg/base/2.0/</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - parameter</para>
            </listitem>

            <listitem>
              <para><command>required</command> - flexible</para>
            </listitem>
          </itemizedlist>

          <para>The <command>parameters</command> element serves as a
          definition for a measurement to be taken by the MP for the parent
          <command>node</command> definition. As such, the nested content
          describes parameters and test scheduling information pertinent to
          the running of ping measurements. At least one
          <command>parameters</command> element MUST be present in a <xref
          linkend="configuration_mp_node" /> element.</para>

          <para></para>

          <section id="configuration_mp_parameters_packetsize"
                   xreflabel="PacketSize">
            <title>Parameter</title>

            <programlisting>
                    
        &lt;nmwg:parameter name="packetSize"&gt;STRING&lt;/nmwg:parameter&gt;
                                                        
                  </programlisting>

            <itemizedlist mark="opencircle">
              <listitem>
                <para><command>localname</command> - packetSize</para>
              </listitem>

              <listitem>
                <para><command>namespace</command> -
                http://ggf.org/ns/nmwg/base/2.0/</para>
              </listitem>

              <listitem>
                <para><command>attributes</command> - none</para>
              </listitem>

              <listitem>
                <para><command>nested elements</command> - packetSize, count,
                packetInterval, ttl, measurementPeriod,
                measurementOffset</para>
              </listitem>

              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>The <emphasis>packetSize</emphasis> attribute is used to
            specify the ping packet size to use for the <xref
            linkend="configuration_mp_parameters" />.</para>
          </section>

          <section id="configuration_mp_parameters_count" xreflabel="Count">
            <para>The <emphasis>count</emphasis> attribute is used to specify
            the number of sequential ping packets to send for the <xref
            linkend="configuration_mp_parameters" />.</para>
          </section>

          <section id="configuration_mp_parameters_interval"
                   xreflabel="Interval">
            <para>The <emphasis>packetInterval</emphasis> attribute specifies
            the inter-packet time to wait between sending sequential ping
            packets for the <xref
            linkend="configuration_mp_parameters" />.</para>
          </section>

          <section id="configuration_mp_parameters_ttl" xreflabel="TTL">
            <para>The <emphasis>ttl</emphasis> attribute is used to specify
            the time-to-live value of the ping packets sent for the <xref
            linkend="configuration_mp_parameters" />.</para>
          </section>

          <section id="configuration_mp_parameters_period" xreflabel="Period">
            <para>The <emphasis>measurementPeriod</emphasis> attribute is used
            to schedule the time between subsequent measurements of the
            defined <xref linkend="configuration_mp_parameters" />. In
            conjunction with the <xref
            linkend="configuration_mp_parameters_offset" /> element, it
            defines the time in seconds between measurements.</para>
          </section>

          <section id="configuration_mp_parameters_offset" xreflabel="Offset">
            <para>The <emphasis>measurementOffset</emphasis> attribute is used
            to schedule the time between subsequent measurements of the
            defined <xref linkend="configuration_mp_parameters" />. In
            conjunction with the <xref
            linkend="configuration_mp_parameters_period" /> element, it
            defines the time in seconds between measurements. In particular, a
            random number is generated with the maximum of the
            <command>offset</command> value which is used such that the next
            measurement time is equal to <command>period</command> plus/minus
            <command>rand( offset )</command>.</para>
          </section>
        </section>

        <section id="configuration_mp_port" xreflabel="MP Port">
          <title>Port</title>

          <programlisting>
            
        &lt;nmtl3:port id="STRING"&gt;
          &lt;nmtl3:ipAddress type="STRING"/&gt;
        &lt;/nmtl3:port&gt;
            
          </programlisting>

          <itemizedlist mark="opencircle">
            <listitem>
              <para><command>localname</command> - port</para>
            </listitem>

            <listitem>
              <para><command>namespace</command> -
              http://ogf.org/schema/network/topology/l3/20070707/</para>
            </listitem>

            <listitem>
              <para><command>attributes</command> - id</para>
            </listitem>

            <listitem>
              <para><command>nested elements</command> - ipAddress</para>
            </listitem>

            <listitem>
              <para><command>required</command> - no</para>
            </listitem>
          </itemizedlist>

          <para>The <emphasis>port</emphasis> element is used to specify the
          IP address of the <xref linkend="configuration_mp_node" /> so that
          upon measurement, a DNS lookup is <emphasis>not</emphasis> performed
          and the IP address defined within it's child element <xref
          linkend="configuration_mp_port_ipAddress" /> is used instead. A
          single attribute <command>id</command> is used to uniquely identify
          the ip address which should follow the URN conventions.</para>

          <section id="configuration_mp_port_ipAddress"
                   xreflabel="MP IpAddress">
            <title>IpAddress</title>

            <programlisting>
                    
        &lt;nmtl3:ipAddress type="STRNG"&gt;STRING&lt;/nmtl3:ipAddress&gt;                    
                                                        
                  </programlisting>

            <itemizedlist mark="opencircle">
              <listitem>
                <para><command>localname</command> - ipAddress</para>
              </listitem>

              <listitem>
                <para><command>namespace</command> -
                http://ogf.org/schema/network/topology/l3/20070707/</para>
              </listitem>

              <listitem>
                <para><command>attributes</command> - type</para>
              </listitem>

              <listitem>
                <para><command>nested elements</command> - text</para>
              </listitem>

              <listitem>
                <para><command>required</command> - yes</para>
              </listitem>
            </itemizedlist>

            <para>The <emphasis>ipAddress</emphasis> element is used to
            specify the IP Address of the parent <xref
            linkend="configuration_mp_node" />. This element is required if
            the parent element <xref linkend="configuration_mp_port" /> is
            present. It must contain a single attribute
            <command>type</command> which defines the format of the text
            element enclosed. The two possible values are 'IPv4' and 'IPv6'
            and should represent the IP address format present within its text
            element.</para>
          </section>
        </section>
      </section>
    </section>

    <section id="configuration_mp_schema"
             xreflabel="MP XML Schema Definitions">
      <title>MP XML Schema Definitions</title>

      <para>An XML <xref linkend="schema" /> is typically used to describe the
      structure and internal content of a given XML instance. This description
      can sometimes be expressed in XML itself. This abstract is generally
      created to allow programmatic validation of XML instances and to protect
      a service from receiving a poorly constructed message.</para>

      <para>Two schema definitions are presented here, the first being the
      native form of all <emphasis>NM-WG</emphasis> schemata written in the
      <citation>RELAX-NG</citation> language and the second being a derived
      version written in <citation>XSD</citation>.</para>

      <para>The following schema fragments validate the
      <emphasis>pinger-landmarks.xml</emphasis> file, note that these are self
      contained fragments that should be viewed more as a useful supplement
      instead of functional code. Those interested in a complete schema
      overview should consult the <emphasis>perfSONAR</emphasis> and
      <emphasis>NMWG</emphasis> subversion repositories.</para>

      <section id="configuration_mp_schema_relax" xreflabel="MP RELAX-NG">
        <title>RELAX-NG</title>

        <para><emphasis>NM-WG</emphasis> schemata is always expressed in terms
        of the RELAX-NG schema language. This tool, unlike similar XML schema
        languages, does not utilize XML markup. The syntax is similar to that
        of a regular language, and allows for a rather compact description.
        Note that this <command>will</command> only validate
        <emphasis>pinger-landmarks.xml</emphasis> files used for this service.
        Other schemas can be found in <citation>NMWG-Schema</citation>.</para>

        <programlisting>
        
        namespace pingertopo =
          "http://ogf.org/ns/nmwg/tools/pinger/landmarks/1.0/"

        # external schema files
        include "topo/nmtypes.rnc"
        include "topo/nmtopo_base.rnc"
        include "topo/nmtopo_l3.rnc"

        start |= Topology

        Topology = element pingertopo:topology {
          Domain+
        }

        Domain = element pingertopo:domain {
          Identifier?
          &amp; element nmtb:comments { xsd:string }?
          &amp; Node+
        }

        Node = element pingertopo:node { BaseNodeContent }
        BaseNodeContent =
          Identifier?
          &amp; BaseName?
          &amp; element nmtb:hostName { xsd:string }+
          &amp; element nmtb:description { xsd:string }?
          &amp; element nmtb:location { LocationContent }?
          &amp; element nmtb:contact { ContactInformationContent }?
          &amp; element nmtb:comments { xsd:string }?
          &amp; PingERParameters+
          &amp; Port*

        PingERParameters = element nmwg:parameters { PingERParametersContent }
        PingERParametersContent =
          Identifier?
          &amp; element nmwg:parameter {
              attribute name { "packetSize" } &amp;
              (
                attribute value { text } |
                text
              )
          &amp; element nmwg:parameter {
              attribute name { "count" } &amp;
              (
                attribute value { text } |
                text
              )
          &amp; element nmwg:parameter {
              attribute name { "packetInterval" } &amp;
              (
                attribute value { text } |
                text
              )
          &amp; element nmwg:parameter {
             attribute name { "ttl" } &amp;
             (
               attribute value { text } |
               text
             )
           &amp; element nmwg:parameter {
              attribute name { "measurementPeriod" } &amp;
              (
                attribute value { text } |
                text
              )
          &amp; element nmwg:parameter {
             attribute name { "measurementOffset" } &amp;
             (
               attribute value { text } |
               text
             )

        BaseName =
          element nmtb:name {
            attribute type { xsd:string }?
            &amp; xsd:string
          }

        Port = element nmtl3:port { BasePortContent }
        BasePortContent =
          Identifier?
          &amp; element nmtl3:ipAddress {
                                L3Address
                        }
        
        </programlisting>
      </section>

      <section id="configuration_mp_schema_xsd" xreflabel="MP XSD">
        <title>XSD</title>

        <para>This particular description was produced using tools such as
        <citation>MSV</citation> and <citation>Trang</citation> to
        programatically convert between schema languages. XSD is a more widely
        accepted schema format for validation, thus we present this definition
        for use in <emphasis>perfSONAR</emphasis> services.</para>

        <programlisting>
        
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
  ##############################################################
  
  File:    pinger-landmarks.rnc - Schema to describe pinger 
           network elements
  Version: $Id: nmtopo_base.rnc 277 2007-09-28 20:47:38Z aaron $
                          
  ##############################################################
--&gt;
&lt;!--
  ##############################################################
  Namespace definitions
  ##############################################################
--&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://ggf.org/ns/nmwg/topology/base/20070707/" xmlns:nmtb="http://ggf.org/ns/nmwg/topology/base/20070707/" xmlns:pingertopo="http://ogf.org/ns/nmwg/tools/pinger/landmarks/1.0/" xmlns:nmtl3="http://ggf.org/schema/network/topology/l3/20070707/" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"&gt;
  &lt;xs:import namespace="http://ggf.org/ns/nmwg/base/2.0/" schemaLocation="nmwg.xsd"/&gt;
  &lt;xs:import namespace="http://ggf.org/schema/network/topology/l3/20070707/" schemaLocation="nmtl3.xsd"/&gt;
  &lt;xs:import namespace="http://ogf.org/ns/nmwg/tools/pinger/landmarks/1.0/" schemaLocation="pingertopo.xsd"/&gt;
  &lt;!-- generate PingER Topology can be a root elements --&gt;
  &lt;xs:attributeGroup name="Identifier"&gt;
    &lt;xs:attribute name="id" use="required" type="xs:string"/&gt;
  &lt;/xs:attributeGroup&gt;
  &lt;xs:element name="comments" type="xs:string"/&gt;
  &lt;xs:complexType name="BaseNodeContent"&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:element ref="nmtb:name"/&gt;
      &lt;xs:element ref="nmtb:hostName"/&gt;
      &lt;xs:element ref="nmtb:description"/&gt;
      &lt;xs:element ref="nmtb:location"/&gt;
      &lt;xs:element ref="nmtb:contact"/&gt;
      &lt;xs:element ref="nmtb:comments"/&gt;
      &lt;xs:element ref="nmwg:parameters"/&gt;
      &lt;xs:element ref="nmtl3:port"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:attribute name="id" type="xs:string"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="hostName" type="xs:string"/&gt;
  &lt;xs:element name="description" type="xs:string"/&gt;
  &lt;xs:element name="location" type="nmtb:LocationContent"/&gt;
  &lt;xs:element name="contact" type="nmtb:ContactInformationContent"/&gt;
  &lt;xs:complexType name="PingERParametersContent"&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:group ref="nmwg:parameter"/&gt;
      &lt;xs:group ref="nmwg:parameter1"/&gt;
      &lt;xs:group ref="nmwg:parameter2"/&gt;
      &lt;xs:group ref="nmwg:parameter3"/&gt;
      &lt;xs:group ref="nmwg:parameter4"/&gt;
      &lt;xs:group ref="nmwg:parameter5"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:attribute name="id" type="xs:string"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="name"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:simpleContent&gt;
        &lt;xs:extension base="xs:string"&gt;
          &lt;xs:attribute name="type" type="xs:string"/&gt;
        &lt;/xs:extension&gt;
      &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="BasePortContent"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="nmtl3:ipAddress"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="id" type="xs:string"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:attributeGroup name="L3Address"&gt;
    &lt;xs:attribute name="value" type="xs:string"/&gt;
    &lt;xs:attribute name="type" use="required" type="xs:string"/&gt;
  &lt;/xs:attributeGroup&gt;
  &lt;xs:complexType name="ContactInformationContent"&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:element ref="nmtb:email"/&gt;
      &lt;xs:element ref="nmtb:phoneNumber"/&gt;
      &lt;xs:element ref="nmtb:administrator"/&gt;
      &lt;xs:element ref="nmtb:institution"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="email" type="xs:string"/&gt;
  &lt;xs:element name="phoneNumber" type="xs:string"/&gt;
  &lt;xs:element name="administrator" type="xs:string"/&gt;
  &lt;xs:element name="institution" type="xs:string"/&gt;
  &lt;xs:complexType name="LocationContent"&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:element ref="nmtb:continent"/&gt;
      &lt;xs:element ref="nmtb:country"/&gt;
      &lt;xs:element ref="nmtb:zipcode"/&gt;
      &lt;xs:element ref="nmtb:state"/&gt;
      &lt;xs:element ref="nmtb:institution"/&gt;
      &lt;xs:element ref="nmtb:city"/&gt;
      &lt;xs:element ref="nmtb:streetAddress"/&gt;
      &lt;xs:element ref="nmtb:floor"/&gt;
      &lt;xs:element ref="nmtb:room"/&gt;
      &lt;xs:element ref="nmtb:cage"/&gt;
      &lt;xs:element ref="nmtb:rack"/&gt;
      &lt;xs:element ref="nmtb:shelf"/&gt;
      &lt;xs:element ref="nmtb:latitude"/&gt;
      &lt;xs:element ref="nmtb:longitude"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="continent" type="xs:string"/&gt;
  &lt;xs:element name="country" type="xs:string"/&gt;
  &lt;xs:element name="zipcode" type="xs:integer"/&gt;
  &lt;xs:element name="state" type="xs:string"/&gt;
  &lt;xs:element name="city" type="xs:string"/&gt;
  &lt;xs:element name="streetAddress" type="xs:string"/&gt;
  &lt;xs:element name="floor" type="xs:string"/&gt;
  &lt;xs:element name="room" type="xs:string"/&gt;
  &lt;xs:element name="cage" type="xs:string"/&gt;
  &lt;xs:element name="rack" type="xs:string"/&gt;
  &lt;xs:element name="shelf" type="xs:string"/&gt;
  &lt;xs:element name="latitude" type="xs:float"/&gt;
  &lt;xs:element name="longitude" type="xs:float"/&gt;
&lt;/xs:schema&gt;

        
        </programlisting>
      </section>
    </section>

    <section id="configuration_ma" xreflabel="MA Configuration">
      <title>MA Configuration</title>

      <para>The MA configuration is defined in the<emphasis> pigner.conf
      </emphasis>file and followed the configuration requirements implied by
      daemon architecture.</para>
    </section>
  </section>

  <section id="general_functional"
           xreflabel="General Functional Specification">
    <title>General Functional Specification</title>

    <section id="general_functional_introduction"
             xreflabel="General Functional Introduction">
      <title>Introduction</title>

      <para>Two general interfaces are provided with the
      <emphasis>PingER</emphasis> suite. The first, an <xref
      linkend="general_functional_echo" /> service enables a client to
      determine the availability of the service. The second and <xref
      linkend="general_functional_ls" /> service allows (de)registration of
      service information to a Lookup Server for service discovery by
      perfSONAR clients.</para>
    </section>

    <section id="general_functional_echo" xreflabel="General Functional Echo">
      <title>Echo</title>

      <para>The <emphasis>Echo Protocol</emphasis> is a very simple
      <emphasis>request</emphasis> and <emphasis>response</emphasis> exchange
      that is meant to allow any service to check on the availability of some
      other service. This available can be simple (i.e. checking for
      responsiveness) or it may be more complex (i.e. testing database
      connectivity).</para>

      <section id="functional_echo_success" xreflabel="Success">
        <title>Success</title>

        <para>A successful <emphasis>Echo</emphasis> exchange involves reading
        the <emphasis>response</emphasis> message for a given
        <emphasis>request</emphasis> and being able to interpret the result
        code as being successful. See the <emphasis>Echo Protocol</emphasis>
        document for hints on what is considered a success.</para>
      </section>

      <section id="functional_echo_failure" xreflabel="Failure">
        <title>Failure</title>

        <para>Failure for this operation is defined as receiving an error
        message from the service indication that one of these conditions may
        be true:</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>The message was improperly formatted.</para>
          </listitem>

          <listitem>
            <para>The service does not participate in this sort of
            exchange.</para>
          </listitem>

          <listitem>
            <para>Internal service or system errors may have occurred.</para>
          </listitem>

          <listitem>
            <para>The service is down, or otherwise unreachable.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="functional_echo_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>There is only one exchange that is available for, that has a
        single request and response format.</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>EchoRequest</para>
          </listitem>

          <listitem>
            <para>EchoResponse</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="general_functional_ls"
             xreflabel="General Functional LS Interaction">
      <title>Lookup Service</title>

      <para>The <command>Lookup Service</command> is a
      <emphasis>perfSONAR</emphasis> infrastructure service that allows for
      the registration of local data sets in an effort to draw away the
      sometimes time consuming queries for data made by client applications as
      well as related services. The <command>LS</command> relies on services
      to have knowledge of it's existence, and then accepts messages they
      initiate to insert, delete, and otherwise maintain records of the time
      sensitive data sets.</para>

      <para>The PingER service is capable of registering information about
      itself and its capabilities with the Lookup Service. In order to do so,
      it communicates with the LS (Lookup Service) by by
      <emphasis>Registering</emphasis> information,
      <emphasis>Deregistering</emphasis> information, and <emphasis>Keeping
      Alive</emphasis> already registered information. All of these
      interactions rely on the service's backend configuration as the
      underlying data store, and some self knowledge of the service itself to
      form an identity.</para>

      <para>All transactions must involve two major parts to a message:
      service identification information (in the form of a
      <emphasis>service</emphasis> description or an <command>LS</command>
      issued <emphasis>key</emphasis>) and data (in the native form from the
      <command>metaID</command> or an <command>LS</command> issued
      <emphasis>key</emphasis>).</para>

      <section id="general_functional_ls_success" xreflabel="Success">
        <title>Success</title>

        <para>Success for interacting with the <command>LS</command> involves
        interpreting the result codes that are returned in each
        <emphasis>response</emphasis> message for the triggering
        <emphasis>request</emphasis>. If a non-successful error code is seen
        the <emphasis>PingER</emphasis> service must be nimble enough to
        interpret the result and take the appropriate action.</para>

        <para>Successful results that are returned for any of the operations
        indicate that the internal state of the <command>LS</command> has been
        updated to reflect the reality of the <emphasis>PingER </emphasis>
        service.</para>
      </section>

      <section id="general_functional_ls_failure" xreflabel="Failure">
        <title>Failure</title>

        <para>Failure for this operation is defined as receiving an error
        message from the service indication that one of these conditions may
        be true:</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>The message was improperly formatted.</para>
          </listitem>

          <listitem>
            <para>The backend storage is improperly configured.</para>
          </listitem>

          <listitem>
            <para>The contacted <command>LS</command> does not participate in
            this sort of exchange (or may be beyond your permissions to
            use).</para>
          </listitem>

          <listitem>
            <para>There is nothing matching a particular query.</para>
          </listitem>

          <listitem>
            <para>Internal service or system errors may have occurred.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="functional_ls_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>There are three major message types that are possible when
        interacting with the <command>LS</command>, each with the appropriate
        <emphasis>request</emphasis>/<emphasis>response</emphasis>
        pair.</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>LSRegistrationRequest</para>
          </listitem>

          <listitem>
            <para>LSRegistrationResponse</para>
          </listitem>

          <listitem>
            <para>LSDeregistrationRequest</para>
          </listitem>

          <listitem>
            <para>LSDeregistrationResponse</para>
          </listitem>

          <listitem>
            <para>LSKeepaliveRequest</para>
          </listitem>

          <listitem>
            <para>LSKeepalivResponse</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section id="mp_functional" xreflabel="MP Functional Specification">
    <title>Measurement Point Functional Specification</title>

    <section id="mp_functional_introduction"
             xreflabel="MP Functional Specification Introduction">
      <title>Introduction</title>

      <para>The PingER MP currently does not expose an external interface and
      hence has no functional specification.</para>
    </section>
  </section>

  <section id="ma_functional" xreflabel="MA Functional Specification">
    <title>Measurement Archive Functional Specification</title>

    <section id="ma_functional_introduction"
             xreflabel="MA Functional Specification Introduction">
      <title>Introduction</title>

      <para>This section focuses on the functionalities offered by the PingER
      MA, namely in response to external requests in the form of messages but
      also for periodic events the service performs. The following sections
      will discuss the broad concepts as well as the potential causes, and
      outcomes that may occur for each. Note that this description does not
      focus on the actions of particular functions in the source code, but
      favors an expanded view at individual actions.</para>

      <para>This section should be compared with that of the <xref
      linkend="ma_interface" /> which describes the service as a black box
      capable of receiving and responding two external output. The messages
      and their respective outcomes will be described there in greater
      detail.</para>
    </section>

    <section id="ma_functional_key" xreflabel="MA Functional Key Retrieval">
      <title>Key Retrieval</title>

      <para>The <emphasis>PingER MA</emphasis> relies on the backend SQL
      database to map <emphasis>metadata</emphasis> to
      <emphasis>data</emphasis>. This functionality allows processing metadata
      in order to determine the <command>Key</command> of the metadata in the
      backend SQL store. PingER metadata is described completely by the set of
      static parameters associated with ping facility in order to provide
      Layer3 monitoring capabilities between two end nodes. The pair of end
      nodes can be described by Layer3 or Layer4 topology elements. The
      <command>Key</command> returned is specifically the primary key in the
      <command>metaData</command> table of the SQL database. The service takes
      metadata from the request and based on the content of metadata entry in
      the metaData SQL table returns the Key along with whole metadata.</para>

      <section id="ma_functional_key_success"
               xreflabel="MA Functional Key Retrieval Success">
        <title>Success</title>

        <para>The service returns the metaID Key when metadata provided in the
        request is matched to some entry in the metaData table of the service
        storage database.</para>
      </section>

      <section id="ma_functional_key_failure"
               xreflabel="MA Functional Key Retrieval Failure">
        <title>Failure</title>

        <para>Failure for this operation is defined as receiving an error
        message from the service indication that one of these conditions may
        be true:</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>The message was improperly formatted.</para>
          </listitem>

          <listitem>
            <para>The backend storage is improperly configured.</para>
          </listitem>

          <listitem>
            <para>The service does not participate in this sort of
            exchange.</para>
          </listitem>

          <listitem>
            <para>There is nothing matching your query.</para>
          </listitem>

          <listitem>
            <para>Resource limitations prevent the service from returning the
            results of the query.</para>
          </listitem>

          <listitem>
            <para>Internal service or system errors may have occurred.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="ma_functional_key_messages"
               xreflabel="MA Functional Key Retrieval Messages">
        <title>Messages</title>

        <para>There are only two messages that can initiate a key exchange,
        although it is possible for many messages to use keys in
        general</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>MetadataKeyRequest</para>
          </listitem>

          <listitem>
            <para>MetadataKeyResponse</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section id="ma_functional_data" xreflabel="MA Functional Data Retrieval">
      <title>Data Retrieval</title>

      <para>This functionality implements publishing of the PingER monitoring
      data in form of the XML response message to the
      <command>SetupDataRequest</command>. Similarly to <xref
      linkend="ma_functional_key" /> the service will be posed a query
      consisting of a partial or full <emphasis>metadata</emphasis> element
      (potentially an already retrieved <emphasis>key</emphasis>) and should
      return data from the backend storage that is related to this initial
      request.</para>

      <para>The PingER MA service can accept requests with
      <emphasis>metadata</emphasis> <command>Key</command> or <xref
      linkend="chaining" /> (filter or unfiltered) of the
      <emphasis>metadata</emphasis> elements and return all found
      <emphasis>metadata</emphasis> elements and data chunks identified by
      found <command>metaID</command> of the
      <emphasis>metadata</emphasis>elements for requested time range</para>

      <section id="ma_functional_data_success"
               xreflabel="MA Functional Key Retrieval Success">
        <title>Success</title>

        <para>The service returns data either when a Key is provided or
        metadata is provided. The Key must correspond to existing metaID
        primary Key in the metadata storage SQL database while metadata must
        describe measurement parameters data in the way it is described in
        metaData SQL table.</para>
      </section>

      <section id="ma_functional_data_failure"
               xreflabel="MA Functional Key Retrieval Failure">
        <title>Failure</title>

        <para>Failure for this operation is defined as receiving an error
        message from the service indication that one of these conditions may
        be true:</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>The message was improperly formatted.</para>
          </listitem>

          <listitem>
            <para>The backend storage (<emphasis>data</emphasis> or
            <emphasis>metadata</emphasis>) is improperly configured.</para>
          </listitem>

          <listitem>
            <para>The service does not participate in this sort of
            exchange.</para>
          </listitem>

          <listitem>
            <para>There is nothing matching your query or key.</para>
          </listitem>

          <listitem>
            <para>Resource limitations prevent the service from returning the
            results of the query.</para>
          </listitem>

          <listitem>
            <para>Internal service or system errors may have occurred.</para>
          </listitem>
        </itemizedlist>
      </section>

      <section id="ma_functional_data_messages" xreflabel="Messages">
        <title>Messages</title>

        <para>There are only two messages that can initiate a
        <emphasis>data</emphasis> exchange.</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>SetupDataRequest</para>
          </listitem>

          <listitem>
            <para>SetupDataResponse</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>

  <section id="general_interface" xreflabel="General Interface Specification">
    <title>General Interface Specification</title>

    <section id="general_interface_introduction"
             xreflabel="General Interface Introduction">
      <title>Introduction</title>

      <para>Two general interfaces are provided with the
      <emphasis>PingER</emphasis> suite. The first, an <xref
      linkend="general_interface_echo" /> service enables a client to
      determine the availability of the service. The second and <xref
      linkend="general_interface_ls" /> service allows (de)registration of
      service information to a Lookup Server for service discovery by
      perfSONAR clients.</para>

      <section id="general_interface_echo" xreflabel="General Interface Echo">
        <title>Echo</title>

        <para>The PingER suite provides a <emphasis>echo</emphasis> feature
        with which clients and any other users interested in finding out the
        status of a service can send an echo message and get back a echo
        reply. Both the PingER MA and PingER MP service provide such
        functionality. If no <emphasis>success.echo</emphasis> reply was got
        back then the client/user can assume that the service is down (even
        though there might not be a 404 error response). Depending on the
        requested endpoint the service will return echo response for MA or
        MP.</para>

        <para>Please see the "Echo Service Specification" for further
        information.</para>

        <section id="general_interface_echo_request"
                 xreflabel="General Interface Echo Request">
          <title>Echo Request</title>
        </section>

        <section id="general_interface_echo_response"
                 xreflabel="General Interface Echo Response">
          <title>Echo Response</title>
        </section>
      </section>

      <section id="general_interface_ls"
               xreflabel="General Interface LS Interaction">
        <title>LS Interaction</title>

        <para>The PingER service is capable of registering information about
        itself and its capabilities with the Lookup Service. In order to do
        so, it communicates with the LS (Lookup Service) by sending messages
        of registration, de-registration, etc.</para>

        <section id="general_interface_registerls"
                 xreflabel="General Interface LS Registration">
          <title>LS Registration</title>

          <para>TBA</para>
        </section>

        <section id="general_interface_deregisterls"
                 xreflabel="General Interface LS Deregistration">
          <title>LS Deregistration</title>

          <para>TBA</para>
        </section>
      </section>
    </section>
  </section>

  <section id="mp_interface" xreflabel="MP Interface Specification">
    <title>Measurement Point Interface Specification</title>

    <section id="mp_interface_introduction"
             xreflabel="MP Interface Introduction">
      <title>Introduction</title>

      <para>The <emphasis>PingER MP</emphasis> is designed to provide
      interface to the ping facility in order to allow scheduling of ping
      measurements. The PingER MP currently provides no externally accessible
      interface.</para>
    </section>
  </section>

  <section id="ma_interface" xreflabel="MA Interface Specification">
    <title>Measurement Archive Interface Specification</title>

    <section id="ma_interface_key"
             xreflabel="MA Key Retrieval Interface Specification">
      <title>MA Key Retrieval</title>

      <section id="ma_interface_key_introduction"
               xreflabel="MA Key Retrieval Introduction">
        <title>Introduction</title>

        <para>The <emphasis>Key Retrieval</emphasis> functionality aims to
        allow users to perform searches on the <emphasis>metadata</emphasis>
        information stored within the installed service. With the help of such
        searches, the user can easily check what data can be retrieved from
        the service. This functionality is made available to the users via
        <emphasis>MetadataKeyRequest</emphasis> and
        <emphasis>MetadataKeyResponse</emphasis> messages. Whenever the user
        makes a <emphasis>MetadataKeyRequest</emphasis>, the response from the
        service is always a <emphasis>MetadataKeyResponse</emphasis> (not
        considering underlying transport protocol errors). If the service
        encountered one or more problems, they are reported using error codes.
        These error codes are contained within the
        <emphasis>MetadataKeyResponse</emphasis> as well. Currently, the
        PingER MA service supports requests with metadata supporting only one
        eventType -
        <command>http://ggf.org/ns/nmwg/tools/pinger/2.0/</command>,
        registered under the "pinger" namespace.</para>

        <para>Number of request messages supported: 1</para>

        <para>Number of possible error-free response message types: 1</para>
      </section>

      <section id="ma_interface_key_request" xreflabel="MA MetadataKeyRequest">
        <title>MetadataKeyRequest</title>

        <para>The .rnc file for the request message can be found in Appendix.
        This .rnc file is based on NMWG v2 (base 2) xml protocol definitions
        and completely describes request message.</para>

        <para>At a high level, the request message may consist of multiple
        metadata elements and multiple data elements where each data element
        must refer to the metadata element by
        <emphasis>metadataIdRef</emphasis>. The data element with missing
        metadata element will be marked as orphaned and will be skipped in the
        message processing. The error code will be returned for such element.
        Multiple metadata elements may refer to each other and the complete
        metadata sections can be assembled by chaining. Chaining will work
        only for the metadata elements with the same
        <emphasis>evenType</emphasis> elements. The presence of the key
        element will result in the immediate query to the metadata storage
        engine.</para>

        <para>The number of the data elements in response message might be
        limited by optional message parameter from the nmwg:parameters
        namespace with name <emphasis>setLimit</emphasis>. Also, two types of
        time format are supported "iso" and "unix" by setting
        <emphasis>timeType</emphasis> parameter for the whole message.</para>
      </section>

      <section id="ma_interface_key_response"
               xreflabel="MA MetadataKeyResponse">
        <title>MetadataKeyResponse</title>

        <para>The .rnc file for the response message can be found in Appendix.
        This .rnc file is based on NMWG v2 xml protocol definitions and
        completely describes response message.</para>

        <para>The MetadataKeyResponse message will contain at least one
        metadata-data chain under all circumstances (apart from transport
        layer errors). Each chain will contain a metadata element and data
        element. There can be as many chains as there are matches for the
        given MetadataKeyRequest message. If the system error was encountered,
        there will be only one chain in the response and this chain will
        contain the error code.</para>

        <para>The metadata element can also contain a key. This happens when a
        key was passed in the metadataKeyRequest. In such a case the original
        key will be passed back and the same key will be passed inside of the
        data element.</para>

        <para>If a result code in the metadata element is passed back, it is
        contained in an eventType element directly in the metadata block. The
        data block will also contain a datum element (nmwgr namespace) and the
        datum element will provide more information about the error.</para>

        <para>If no errors occurred and no error codes were passed back, the
        linked data block will contain a key. This key element contains a
        metaID primary key from the metaData table of the storage SQL
        database. This key might be encrypted by the server in the
        future.</para>
      </section>

      <section id="ma_interface_key_examples"
               xreflabel="MA handle-metadata Examples">
        <title>Examples</title>

        <para>A simple MetadataKeyRequest is in the first example below with
        partial subject for broader search criteria</para>

        <programlisting>
                        
        &lt;nmwg:message id="message1"
                type="MetadataKeyRequest"
                xmlns="http://ggf.org/ns/nmwg/base/2.0/" 
                xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"
                xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"
                xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"&gt;

                &lt;nmwg:parameters&gt;
                        &lt;nmwg:parameter name="setLimit" value="10"/&gt;
                        &lt;nmwg:parameter name="timeType" value="unix"/&gt;
                &lt;/nmwg:parameters&gt;
                &lt;nmwg:metadata id="meta1"&gt;
                        &lt;pinger:subject  id="subject1"&gt;
                          &lt;nmwgt:endPointPair&gt;
                            &lt;nmwgt:dst type="hostname" value="pinger.fnal.gov"/&gt; 
                         &lt;/nmwgt:endPointPair&gt;
                        &lt;/pinger:subject&gt;
                        &lt;nmwg:eventType&gt;http://ggf.org/ns/nmwg/tools/pinger/2.0/&lt;/nmwg:eventType&gt;
                 &lt;/nmwg:metadata&gt;
                 &lt;nmwg:data id="data1" metadataIdRef="meta1"/&gt;
        &lt;/nmwg:message&gt; 
                        
                      </programlisting>

        <para>A MetadataKeyResponse for the above request is in the example
        below:</para>

        <programlisting>
          
        &lt;nmwg:message type="MetadataKeyResponse" 
          id="message.2455708" 
          xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"                  
          xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/" 
          xmlns:select="http://ggf.org/ns/nmwg/ops/select/2.0/" 
          xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"&gt;
                &lt;nmwg:parameters&gt;
                  &lt;nmwg:parameter name="setLimit" value="10"/&gt;
                  &lt;nmwg:parameter name="timeType" value="unix"/&gt;
                &lt;/nmwg:parameters&gt;
                &lt;nmwg:metadata id="meta1"&gt;
                        &lt;pinger:subject id="subj330229"&gt;
                                &lt;nmwgt:endPointPair&gt;
                                        &lt;nmwgt:src value="lhcopnmon1-mgm.fnal.gov" type="hostname"/&gt;
                                        &lt;nmwgt:dst value="pinger.fnal.gov" type="hostname"/&gt;
                                &lt;/nmwgt:endPointPair&gt;
                        &lt;/pinger:subject&gt;
                         &lt;pinger:parameters id="params330229"&gt;
                            &lt;nmwg:parameter value="10" name="count"/&gt;
                            &lt;nmwg:parameter value="1000" name="packetSize"/&gt;
                            &lt;nmwg:parameter value="32" name="ttl"/&gt;
                            &lt;nmwg:parameter value="ICMP" name="transport"/&gt;
                            &lt;nmwg:parameter value="1" name="packetInterval"/&gt;
                          &lt;/pinger:parameters&gt;
                          &lt;nmwg:key id="meta330229"/&gt;
                        &lt;nmwg:eventType&gt;http://ggf.org/ns/nmwg/tools/pinger/2.0/&lt;/nmwg:eventType&gt;
                &lt;/nmwg:metadata&gt;
                &lt;nmwg:data metadataIdRef="meta1" id="data1"&gt;
                        &lt;nmwg:key id="330229"/&gt;
                &lt;/nmwg:data&gt;
        &lt;/nmwg:message&gt;
                      
                      </programlisting>
      </section>
    </section>

    <section id="ma_interface_data"
             xreflabel="MA Data Interface Specification">
      <title>MA Data</title>

      <para>PingER MA provides the ability to retrieve data:</para>

      <section id="ma_interface_data_introduction"
               xreflabel="MA Data Retrieval Introduction">
        <title>Introduction</title>

        <para>The Handle Data functionality provides the capability to request
        the service for retrieval of measurement data stored in backend
        storage.</para>

        <para>There are many ways in which data can be retrieved. The service
        also supports bulk data retrievals wherein many requests can be put
        into one request whereby many overheads can be avoided. It also
        supports usage of keys in requests. These keys would have to be
        retrieved previously using <emphasis>handle-metadata</emphasis>
        functionality. Such measures when used will help in increasing the
        efficiency of the server and also increasing the speed with which data
        is available for consumption by the client. There is one interface
        message supported - SetupDataRequest and it returns
        SetupDataResponse.</para>

        <para>Currently MA service supports requests with metadata supporting
        only one eventType -
        <emphasis>http://ggf.org/ns/nmwg/tools/pinger/2.0/</emphasis>,
        registered under pinger namespace.</para>

        <para>If the service encountered one or more problems, they are
        reported using error codes. These error codes are contained within the
        SetupDataResponse as well.</para>

        <para>Number of request messages supported: 1</para>

        <para>Number of possible error-free response message types: 1</para>
      </section>

      <section id="ma_interface_data_retrieve" xreflabel="MA Retrieve Data">
        <title>MA Retrieve Data</title>

        <section id="ma_interface_data_retrieve_request"
                 xreflabel="MA SetupDataRequest">
          <title>SetupDataRequest</title>

          <para>The .rnc file for the request message can be found in Appendix
          II. This .rnc file is based on NMWG v2 (base 2) xml protocol
          definitions and completely describes request message.</para>

          <para>The set of rules from building MetaDataRequest applied here as
          well. The same metadata-data and multiple metadata chaining is
          supported by daemon Request Handler.</para>

          <para>There are several use cases considered for the
          requests.</para>

          <para>Requests without keys: there is one metadata element and one
          data element. Time range select can be inserted as select parameters
          of the metadata. If time range will me missing then default time
          range is 24 hours past current time in UTC.</para>

          <para>Requests with keys: A simple request for data can also be made
          by providing a <emphasis>key</emphasis> in the metadata section of
          the request with <emphasis>id</emphasis> attribute set to the actual
          metaID primary key of the particular metadata in the metadata
          storage. The usage of the keys is preferred in case of the bulk
          requests.</para>

          <para>Requests with filters: both types of requests from above can
          be utilized with additional metadata element and linked by
          metadataIdRef.</para>

          <para>A response for such filter chained request will contain the
          main metadata section with found metadata, requested time range in
          form of the linked metadata element and linked data element with
          collection of <emphasis>nmwg:commonTime</emphasis> sub-elements
          identified by the unique timestamp.</para>

          <para>All requests can be extensively chained with unlimited depth
          by matching the same eventType in the chained metadata. In this case
          the same parameters from the metadata elements will be
          overwritten.</para>

          <para>The number of either metadata or data elements in response
          message might be limited by optional message parameter from the
          nmwg:parameters namespace with name setLimit. Also, two types of
          time format are supported by setting timeType to
          <emphasis>iso</emphasis> or <emphasis>unix</emphasis> parameter for
          the whole message.</para>
        </section>

        <section id="ma_interface_data_retrieve_response"
                 xreflabel="MA SetupDataResponse">
          <title>SetupDataResponse</title>

          <para>The .rnc file for the request message can be found in Appendix
          II. This .rnc file is based on NMWG v2 (base 2) xml protocol
          definitions and completely describes response message.</para>

          <para>A Typical Response Message of type SetupDataResponse may
          contain multiple metadata elements paired with data elements and
          actual measured data will be contained as multiple datums inside of
          <emphasis>nmwg:commonTime</emphasis> sub-elements.</para>

          <para>If a match for the given metadata was found on the service,
          the service will return all known metadata elements and will fill up
          the data section with data values from the data table of the storage
          SQL database for the matched metadata. If data is unavailable for
          the given metadata or there is no metadata element in the request
          then an error code will be sent back in the response. If no matching
          metadata were found, a result error message will be sent back saying
          <emphasis>no metadata found</emphasis>. If service storage does not
          contain datum for requested metadata and time range then error
          message <emphasis>no data found</emphasis> will be returned. In both
          cases eventType of the metadata will signify the error nature of the
          result datum.</para>
        </section>

        <section id="ma_interface_data_retrieve_examples"
                 xreflabel="MA Data Retrieval Examples">
          <title>Examples</title>

          <para>SetupDataRequest with extra filter chained metadata with
          specified time range select</para>

          <programlisting>
                        
        &lt;nmwg:message id="message1" 
            type="SetupDataRequest"
              xmlns="http://ggf.org/ns/nmwg/base/2.0/" 
              xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"
              xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"
              xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/" 
              xmlns:select="http://ggf.org/ns/nmwg/ops/select/2.0/"&gt;

  &lt;nmwg:metadata id="meta2"&gt;
       &lt;pinger:subject xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/" id="subject1"&gt;
      &lt;nmwgt:endPointPair xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"&gt;
         &lt;nmwgt:src type="hostname" value="tukki.fnal.gov"/&gt; 
         &lt;nmwgt:dst type="hostname" value="pinger.slac.stanford.edu"/&gt; 
    &lt;/nmwgt:endPointPair&gt;
  &lt;/pinger:subject&gt;
      &lt;pinger:parameters&gt;
          &lt;nmwg:parameter name="packetSize"&gt;1000&lt;/nmwg:parameter&gt;
          &lt;nmwg:parameter name="count"&gt;10&lt;/nmwg:parameter&gt;
     &lt;/pinger:parameters&gt;
   &lt;nmwg:eventType&gt;http://ggf.org/ns/nmwg/tools/pinger/2.0/&lt;/nmwg:eventType&gt;
  &lt;/nmwg:metadata&gt;
   
  &lt;nmwg:metadata id="meta1"&gt;
    &lt;select:subject id="sel1" metadataIdRef="meta2"/&gt;    
    &lt;select:parameters id="param2c"&gt;    
      &lt;nmwg:parameter name="startTime"&gt;1205176292&lt;/nmwg:parameter&gt;
      &lt;nmwg:parameter name="endTime"&gt;1205186292&lt;/nmwg:parameter&gt;
    &lt;/select:parameters&gt;
     &lt;nmwg:eventType&gt;http://ggf.org/ns/nmwg/ops/select/2.0/&lt;/nmwg:eventType&gt;
  &lt;/nmwg:metadata&gt;
  &lt;nmwg:data id="data1" metadataIdRef="meta1"/&gt;

&lt;/nmwg:message&gt; 
                              
                      </programlisting>

          <para>And corresponded SetupDataResponse message:</para>

          <programlisting>
                        
          &lt;nmwg:message messageIdRef="message1" id="message.11165462" type="SetupDataResponse" xmlns:nmwg="http://ggf.org/ns/nmwg/base/2.0/"&gt;
         &lt;nmwg:metadata id="meta1"&gt;
            &lt;select:subject id="subj1" xmlns:select="http://ggf.org/ns/nmwg/ops/select/2.0/"/&gt;
            &lt;select:parameters id="params1" xmlns:select="http://ggf.org/ns/nmwg/ops/select/2.0/"&gt;
               &lt;nmwg:parameter value="1205176292" name="startTime"/&gt;
               &lt;nmwg:parameter value="1205186292" name="endTime"/&gt;
            &lt;/select:parameters&gt;
            &lt;nmwg:eventType&gt;http://ggf.org/ns/nmwg/ops/select/2.0/&lt;/nmwg:eventType&gt;
         &lt;/nmwg:metadata&gt;
         &lt;nmwg:metadata metadataIdRef="1" id="meta2"&gt;
            &lt;pinger:subject id="subj3000" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"&gt;
               &lt;nmwgt:endPointPair xmlns:nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"&gt;
                  &lt;nmwgt:src value="tukki.fnal.gov" type="hostname"/&gt;
                  &lt;nmwgt:dst value="pinger.slac.stanford.edu" type="hostname"/&gt;
               &lt;/nmwgt:endPointPair&gt;
            &lt;/pinger:subject&gt;
            &lt;pinger:parameters id="params3000" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"&gt;
               &lt;nmwg:parameter value="10" name="count"/&gt;
               &lt;nmwg:parameter value="1000" name="packetSize"/&gt;
               &lt;nmwg:parameter value="255" name="ttl"/&gt;
               &lt;nmwg:parameter value="ICMP" name="transport"/&gt;
               &lt;nmwg:parameter value="1" name="packetInterval"/&gt;
            &lt;/pinger:parameters&gt;
            &lt;nmwg:key id="meta3000"/&gt;
            &lt;nmwg:eventType&gt;http://ggf.org/ns/nmwg/tools/pinger/2.0/&lt;/nmwg:eventType&gt;
         &lt;/nmwg:metadata&gt;
         &lt;nmwg:data metadataIdRef="meta2" id="data1"&gt;
            &lt;nmwg:commonTime value="1205184605" type="unix"&gt;
               &lt;pinger:datum value="53.114" name="minRtt" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
               &lt;pinger:datum value="54.084" name="maxRtt" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
               &lt;pinger:datum value="53.25" name="medianRtt" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
               &lt;pinger:datum value="53.37" name="meanRtt" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
               &lt;pinger:datum value="0.2" name="iqrIpd" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
               &lt;pinger:datum value="0.9" name="maxIpd" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
               &lt;pinger:datum value="0.278" name="meanIpd" xmlns:pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"/&gt;
            &lt;/nmwg:commonTime&gt;
         &lt;/nmwg:data&gt;
      &lt;/nmwg:message&gt;
                              
                      </programlisting>
        </section>
      </section>

      <section id="ma_interface_data_store" xreflabel="MA Store Data">
        <title>MA Store Data</title>

        <para>The PingER MA currently only implements a read-only interface.
        Therefore PingER MA does not currently support the storage of
        da</para>
      </section>
    </section>
  </section>

  <appendix id="Appendix1">
    <title>RelaxNG Message schemas</title>

    <section id="rnc_mdkreq" xreflabel="MetaDataKey Request">
      <title>RelaxNG compact schema for MetaDataKey Request</title>

      <para><programlisting>namespace nmtl3 = "http://ggf.org/schema/network/topology/l3/20070707/"
namespace nmtl4 = "http://ggf.org/schema/network/topology/l4/20070707/"
namespace nmwg = "http://ggf.org/ns/nmwg/base/2.0/"
namespace nmwgt = "http://ggf.org/ns/nmwg/topology/2.0/"
namespace pinger = "http://ggf.org/ns/nmwg/tools/pinger/2.0/"

 
start = element nmwg:message { MessageContent }
  
MessageContent =
    Identifier?
    &amp; attribute messageIdRef { xsd:string }?
    &amp; attribute type { "MetadataKeyRequest" }
    &amp; MessageParameters?
    &amp;    (
                Metadata &amp;
                Data ?
        )+
MessageParameters = element nmwg:parameters { Identifier &amp; MessageParameter+ }
MessageParameter =
    element nmwg:parameter {
        attribute name { "setLimit" | "timeType" }
        &amp; (attribute value { text }
           | text)
    }
Identifier = attribute id { xsd:string }
MetadataIdentifierRef = attribute metadataIdRef { xsd:string }
Metadata =
    element nmwg:metadata {
        Identifier
        &amp; MetadataIdentifierRef?
        &amp;  
        PingerSubject?  &amp;  
        PingERParameters ? &amp;  
        EventType &amp;
        MetadataKeyContent?
    }
PingerSubject =
    element pinger:subject { Identifier? &amp; MetadataIdentifierRef? &amp;  (                   
              EndpointPair |
              L4EndpointPair
             )  
       }
PingERParameters = element pinger:parameters { Identifier? &amp; PingERParameter+ }
PingERParameter =
    element nmwg:parameter {
        attribute name {
            "count"
            | "packetInterval"
            | "packetSize"
            | "ttl"
            | "valueUnits"
            | "protocol"
            | "transport"
        }
        &amp; (attribute value { text }
           | text)
    }
MetadataKeyContent =
    element nmwg:key {
        attribute id { xsd:string } | text
    }
EventType = element nmwg:eventType { xsd:string    }
Data = element nmwg:data { Identifier &amp; MetadataIdentifierRef } 
EndpointPair = 
        element nmwgt:endPointPair {
                EndpointPairContent
        }
EndpointPairContent =
        element nmwgt:src {
                EndpointContent
        } &amp;
        element nmwgt:dst {
                EndpointContent
        }  
 
Endpoint = 
        element nmwgt:endPoint {
                EndpointContent
        }

EndpointContent = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string } &amp;
        attribute port { xsd:string }?
L4EndpointPair = 
        element nmtl4:endPointPair {
                L4EndpointPairContent
        }
L4EndpointPairContent =
        (
                L4Endpoint &amp;
                L4Endpoint
        )
 
L4Endpoint = 
        element nmtl4:endPoint {
                L4EndpointContent
        }
L3Interface = 
        element nmtl3:interface {
                L3InterfaceContent
        }
L3InterfaceIdRef =
            attribute interfaceIdRef { xsd:string }  
L3InterfaceContent = 
        Identifier? &amp;
        L3InterfaceIdRef? &amp;
        element nmtl3:ipAddress {
                L3Address
        }? &amp;
        element nmtl3:netmask { xsd:string }? &amp;
        element nmtl3:ifName { xsd:string }? &amp;
        element nmtl3:ifDescription { xsd:string }? &amp;
        element nmtl3:ifAddress {
                L3Address
        }? &amp;
        element nmtl3:ifHostName { xsd:string }? &amp;
        element nmtl3:ifIndex { xsd:string }? &amp;
        element nmtl3:type { xsd:string }? &amp;
        element nmtl3:capacity { xsd:string }?

L3Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }

L4EndpointContent = 
        attribute port { xsd:string }? &amp;
        attribute protocol { xsd:string }? &amp;
        attribute index { xsd:string }? &amp;
        L4Role? &amp;
        (
                element nmtl4:address {
                        L4Address
                } |
                element nmtl3:interface {
                        L3Interface
                }
        )
 
L4Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }

L4Role = 
        (
                attribute role { xsd:string } |
                element nmwgt:role { xsd:string }
        )     </programlisting></para>
    </section>

    <section id="rnc_mdkres" xreflabel="MetaDataKey Response">
      <title>RelaxNG compact schema for MetaDataKey Response</title>

      <para><programlisting>namespace nmtl3 = "http://ggf.org/schema/network/topology/l3/20070707/"
namespace nmtl4 = "http://ggf.org/schema/network/topology/l4/20070707/"
namespace nmwg = "http://ggf.org/ns/nmwg/base/2.0/"
namespace nmwgt = "http://ggf.org/ns/nmwg/topology/2.0/"
namespace pinger = "http://ggf.org/ns/nmwg/tools/pinger/2.0/"
namespace nmwgr="http://ggf.org/ns/nmwg/result/2.0/"
 
start = element nmwg:message { MessageContent }
  
MessageContent =
    Identifier?
    &amp; attribute messageIdRef { xsd:string }?
    &amp; attribute type { "MetadataKeyResponse" | "ErrorResponse"}
    &amp; MessageParameters?
    &amp; 
    Metadata+ 
    &amp;
    Data+  
    
MessageParameters = element nmwg:parameters { Identifier &amp; MessageParameter+ }
MessageParameter =
    element nmwg:parameter {
        attribute name { "setLimit" | "timeType" }
        &amp; (attribute value { text }
           | text)
    }
Identifier = attribute id { xsd:string }
MetadataIdentifierRef = attribute metadataIdRef { xsd:string }
Metadata =
    element nmwg:metadata {
        Identifier
        &amp; MetadataIdentifierRef?
        &amp;  
       PingerSubject?  &amp; 
       PingERParameters ?  &amp; 
       EventType &amp;
      MetadataKeyContent?
    }
PingerSubject =
    element pinger:subject { Identifier? &amp; MetadataIdentifierRef? &amp;  (                   
              EndpointPair |
              L4EndpointPair
            )   
       }
PingERParameters = element pinger:parameters { Identifier? &amp; PingERParameter+ }
PingERParameter =
    element nmwg:parameter {
        attribute name {
            "count"
            | "packetInterval"
            | "packetSize"
            | "ttl"
            | "valueUnits"
            | "protocol"
            | "transport"
        }
        &amp; (attribute value { text }
           | text)
    }
MetadataKeyContent =
    element nmwg:key {
        attribute id { xsd:string } |  text
    }
EventType = element nmwg:eventType { xsd:string    }
Data = element nmwg:data { 
           Identifier &amp; 
            MetadataIdentifierRef &amp;
           (MetadataKeyContent |
          element nmwgr:datum { xsd:string }
      ) 
  } 
 
EndpointPair = 
        element nmwgt:endPointPair {
                EndpointPairContent
        }
EndpointPairContent =
        element nmwgt:src {
                EndpointContent
        }? &amp;
        element nmwgt:dst {
                EndpointContent
        }?  
 
Endpoint = 
        element nmwgt:endPoint {
                EndpointContent
        }

EndpointContent = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string } &amp;
        attribute port { xsd:string }?

L4EndpointPair = 
        element nmtl4:endPointPair {
                L4EndpointPairContent
        }
L4EndpointPairContent =
        (
                L4Endpoint? &amp;
                L4Endpoint?
        )
 
L4Endpoint = 
        element nmtl4:endPoint {
                L4EndpointContent
        }
L3Interface = 
        element nmtl3:interface {
                L3InterfaceContent
        }
L3InterfaceIdRef =
            attribute interfaceIdRef { xsd:string }  
L3InterfaceContent = 
        Identifier? &amp;
        L3InterfaceIdRef? &amp;
        element nmtl3:ipAddress {
                L3Address
        }? &amp;
        element nmtl3:netmask { xsd:string }? &amp;
        element nmtl3:ifName { xsd:string }? &amp;
        element nmtl3:ifDescription { xsd:string }? &amp;
        element nmtl3:ifAddress {
                L3Address
        }? &amp;
        element nmtl3:ifHostName { xsd:string }? &amp;
        element nmtl3:ifIndex { xsd:string }? &amp;
        element nmtl3:type { xsd:string }? &amp;
        element nmtl3:capacity { xsd:string }?

L3Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }


L4EndpointContent = 
        attribute port { xsd:string }? &amp;
        attribute protocol { xsd:string }? &amp;
        attribute index { xsd:string }? &amp;
        L4Role? &amp;
        (
                element nmtl4:address {
                        L4Address
                } |
                element nmtl3:interface {
                        L3Interface
                }
        )
 
L4Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }

L4Role = 
        (
                attribute role { xsd:string } |
                element nmwgt:role { xsd:string }
        )     </programlisting></para>
    </section>

    <section id="rnc_sdreq" xreflabel="SetupData Request">
      <title>RelaxNG compact schema for SetupData Request</title>

      <para><programlisting>namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
namespace pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"
namespace nmtl3="http://ggf.org/schema/network/topology/l3/20070707/"
namespace nmtl4="http://ggf.org/schema/network/topology/l4/20070707/"
namespace nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"
namespace nmwgr="http://ggf.org/ns/nmwg/result/2.0/"
namespace select =  "http://ggf.org/ns/nmwg/ops/select/2.0/"
    
start = element nmwg:message { MessageContent }
 
MessageContent =
        Identifier? &amp;
        attribute messageIdRef { xsd:string }? &amp;
        attribute type { "SetupDataRequest" } &amp;
        MessageParameters? 
        &amp; 
        Metadata+ 
        &amp;
        Data+   
MessageParameters = element nmwg:parameters {
                Identifier &amp;        
                MessageParameter+
  }
MessageParameter =    element nmwg:parameter { 
                attribute name {   "setLimit"  |  "timeType"  } &amp;
                (
                        attribute value { text } |
                        text
                )
        }
Identifier =   attribute id { xsd:string }
MetadataIdentifierRef =   attribute metadataIdRef { xsd:string }
Metadata =  element nmwg:metadata {
                        Identifier &amp;
                        MetadataIdentifierRef? &amp;
                        (
                         (
                           PingerSubject ? &amp;
                          PingERParameters ? 
                          ) ?  |
                          FilterMetadataContent ?
                        ) &amp;
                        EventType  &amp;
                        MetadataKeyContent?
          }
PingerSubject =       element pinger:subject { 
                Identifier? &amp;
                MetadataIdentifierRef? &amp;
            (                   
              EndpointPair |
              L4EndpointPair
            )   
}
FilterMetadataContent =     element select:subject     {
               Identifier?  &amp;
               MetadataIdentifierRef? 
        }?,
        SelectParameters
SelectParameters  =element select:parameters {
                Identifier? &amp; 
                MetadataIdentifierRef? &amp; 
                element nmwg:parameter {
                     attribute name {   "startTime" | "endTime"  } &amp;
                     (
                        attribute value { text } |
                        text
                     )
                 }+
 }
PingERParameters =
        element pinger:parameters {
                Identifier? &amp;        
                PingERParameter+
        }
PingERParameter = 
        element nmwg:parameter { 
                attribute name { 
                                "count" | "packetInterval" | 
                                "packetSize" | "ttl" |   
                                "valueUnits" | "protocol"|               
                                "transport"                                
                                } &amp;
                (
                        attribute value { text } |
                        text
                )
        } 
MetadataKeyContent =
            element nmwg:key
                {
                        attribute id {xsd:string} | text
                }
EventType =   element nmwg:eventType {  xsd:string  }
Data = (ResultData|ResultCodeData)
ResultData = element nmwg:data      {
                Identifier &amp;
                MetadataIdentifierRef &amp;
                PingERCommonTime+
        }
PingERCommonTime =    element nmwg:commonTime {
               attribute type { "unix" }  &amp;
               attribute value { xsd:string } &amp;
               PingERDatum+  
        } 
ResultCodeData =   element nmwg:data {
                attribute id {xsd:string} &amp;
                attribute metadataIdRef {xsd:string} &amp;
                element nmwgr:datum { text }
        }
PingERDatum =        element pinger:datum {
                (
                     (
                        attribute value { xsd:float } &amp;
                        attribute valueUnits { xsd:string }? &amp;        
                        attribute seqNum { xsd:int }? &amp;
                        attribute numBytes { xsd:int }? &amp;
                        attribute ttl { xsd:int }?
                     ) |
                    (
                        attribute name {  "minRtt" | "maxRtt" | 
                                          "meanRtt" | "medianRtt" |
                                          "lossPercent" | "clp" |
                                          "minIpd" | "maxIpd" | 
                                          "iqrIpd" | "meanIpd" } &amp;
                        attribute value { xsd:float } &amp;
                        attribute valueUnits { xsd:string }?
                    ) |
                    (
                        attribute name { "outOfOrder" | "duplicates" } &amp;
                        attribute value { xsd:boolean }
                    )
                )     
       }
 
EndpointPair = 
        element nmwgt:endPointPair {
                EndpointPairContent
        }
EndpointPairContent =
        element nmwgt:src {
                EndpointContent
        }? &amp;
        element nmwgt:dst {
                EndpointContent
        }?   
Endpoint = 
        element nmwgt:endPoint {
                EndpointContent
        }

EndpointContent = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string } &amp;
        attribute port { xsd:string }?

L4EndpointPair = 
        element nmtl4:endPointPair {
                L4EndpointPairContent
        }
L4EndpointPairContent =
        (
                L4Endpoint? &amp;
                L4Endpoint?
        ) 
L4Endpoint = 
        element nmtl4:endPoint {
                L4EndpointContent
        }
L3Interface = 
        element nmtl3:interface {
                L3InterfaceContent
        }
L3InterfaceIdRef =
            attribute interfaceIdRef { xsd:string }  
L3InterfaceContent = 
        Identifier? &amp;
        L3InterfaceIdRef? &amp;
        element nmtl3:ipAddress {
                L3Address
        }? &amp;
        element nmtl3:netmask { xsd:string }? &amp;
        element nmtl3:ifName { xsd:string }? &amp;
        element nmtl3:ifDescription { xsd:string }? &amp;
        element nmtl3:ifAddress {
                L3Address
        }? &amp;
        element nmtl3:ifHostName { xsd:string }? &amp;
        element nmtl3:ifIndex { xsd:string }? &amp;
        element nmtl3:type { xsd:string }? &amp;
        element nmtl3:capacity { xsd:string }?

L3Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }

L4EndpointContent = 
        attribute port { xsd:string }? &amp;
        attribute protocol { xsd:string }? &amp;
        attribute index { xsd:string }? &amp;
        L4Role? &amp;
        (
                element nmtl4:address {
                        L4Address
                } |
                element nmtl3:interface {
                        L3Interface
                }
        )
  
L4Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }

L4Role = 
        (
                attribute role { xsd:string } |
                element nmwgt:role { xsd:string }
        )</programlisting></para>
    </section>

    <section id="rnc_sdres" xreflabel="SetupData Response">
      <title>RelaxNG compact schema for SetupData Response</title>

      <para><programlisting>namespace nmwg="http://ggf.org/ns/nmwg/base/2.0/"
namespace pinger="http://ggf.org/ns/nmwg/tools/pinger/2.0/"
namespace nmtl3="http://ggf.org/schema/network/topology/l3/20070707/"
namespace nmtl4="http://ggf.org/schema/network/topology/l4/20070707/"
namespace nmwgt="http://ggf.org/ns/nmwg/topology/2.0/"
namespace nmwgr="http://ggf.org/ns/nmwg/result/2.0/"
namespace select =  "http://ggf.org/ns/nmwg/ops/select/2.0/"
   
start = element nmwg:message { MessageContent }
 
MessageContent =
        Identifier? &amp;
        attribute messageIdRef { xsd:string }? &amp;
        attribute type { "SetupDataResponse" | "ErrorResponse"} &amp;
        MessageParameters? &amp; 
        Metadata+ &amp;
        Data+  
MessageParameters = element nmwg:parameters {
                Identifier &amp;        
                MessageParameter+
  }
MessageParameter =    element nmwg:parameter { 
                attribute name {   "setLimit"  |  "timeType"  } &amp;
                (
                        attribute value { text } |
                        text
                )
        }
Identifier =   attribute id { xsd:string }
MetadataIdentifierRef =   attribute metadataIdRef { xsd:string }
Metadata =  element nmwg:metadata {
                        Identifier &amp;
                        MetadataIdentifierRef? &amp;
                        ( 
                           (
                            PingerSubject ? &amp;
                            PingERParameters ? 
                          ) ?  |
                          FilterMetadataContent ?
                        ) &amp;
                        EventType  &amp;
                      MetadataKeyContent?
            }
PingerSubject =       element pinger:subject { 
                Identifier?  &amp;
                MetadataIdentifierRef? &amp;
            (                   
              EndpointPair |
              L4EndpointPair
            )   
}
FilterMetadataContent =     element select:subject     {
               Identifier?  &amp;
               MetadataIdentifierRef? 
        }?,
        SelectParameters
SelectParameters  =element select:parameters {
                Identifier?  &amp; 
                MetadataIdentifierRef? &amp; 
                element nmwg:parameter {
                     attribute name {   "startTime" | "endTime"  } &amp;
                     (
                        attribute value { text } |
                        text
                     )
                 }+
 }
PingERParameters =
        element pinger:parameters {
                Identifier?  &amp;        
                PingERParameter+
        }
PingERParameter = 
        element nmwg:parameter { 
                attribute name { 
                                "count" | "packetInterval" | 
                                "packetSize" | "ttl" |   
                                "valueUnits" | "protocol"|               
                                "transport"                                
                                } &amp;
                (
                        attribute value { text } |
                        text
                )
        }
 
MetadataKeyContent =
            element nmwg:key
                {
                        attribute id {xsd:string} | text
                }
EventType =   element nmwg:eventType {  xsd:string  }
Data = (ResultData|ResultCodeData)
ResultData = element nmwg:data      {
                Identifier &amp;
                MetadataIdentifierRef &amp;
                PingERCommonTime+
        }
PingERCommonTime =    element nmwg:commonTime {
               attribute type { "unix" }  &amp;
               attribute value { xsd:string } &amp;
               PingERDatum+  
        } 
ResultCodeData =   element nmwg:data {
                attribute id {xsd:string} &amp;
                attribute metadataIdRef {xsd:string} &amp;
                element nmwgr:datum { text }
        }
PingERDatum =        element pinger:datum {
                (
                     (
                        attribute value { xsd:float } &amp;
                        attribute valueUnits { xsd:string }? &amp;        
                        attribute seqNum { xsd:int }? &amp;
                        attribute numBytes { xsd:int }? &amp;
                        attribute ttl { xsd:int }?
                     ) |
                    (
                        attribute name {  "minRtt" | "maxRtt" | 
                                          "meanRtt" | "medianRtt" |
                                          "lossPercent" | "clp" |
                                          "minIpd" | "maxIpd" | 
                                          "iqrIpd" | "meanIpd" } &amp;
                        attribute value { xsd:float } &amp;
                        attribute valueUnits { xsd:string }?
                    ) |
                    (
                        attribute name { "outOfOrder" | "duplicates" } &amp;
                        attribute value { xsd:boolean }
                    )
                )     
       } 
EndpointPair = 
        element nmwgt:endPointPair {
                EndpointPairContent
        }
EndpointPairContent =
        element nmwgt:src {
                EndpointContent
        }? &amp;
        element nmwgt:dst {
                EndpointContent
        }?  
 
Endpoint = 
        element nmwgt:endPoint {
                EndpointContent
        }

EndpointContent = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string } &amp;
        attribute port { xsd:string }?
L4EndpointPair = 
        element nmtl4:endPointPair {
                L4EndpointPairContent
        }
L4EndpointPairContent =
        (
                L4Endpoint? &amp;
                L4Endpoint?
        )
L4Endpoint = 
        element nmtl4:endPoint {
                L4EndpointContent
        }
L3Interface = 
        element nmtl3:interface {
                L3InterfaceContent
        }
L3InterfaceIdRef =
            attribute interfaceIdRef { xsd:string }  
L3InterfaceContent = 
        Identifier? &amp;
        L3InterfaceIdRef? &amp;
        element nmtl3:ipAddress {
                L3Address
        }? &amp;
        element nmtl3:netmask { xsd:string }? &amp;
        element nmtl3:ifName { xsd:string }? &amp;
        element nmtl3:ifDescription { xsd:string }? &amp;
        element nmtl3:ifAddress {
                L3Address
        }? &amp;
        element nmtl3:ifHostName { xsd:string }? &amp;
        element nmtl3:ifIndex { xsd:string }? &amp;
        element nmtl3:type { xsd:string }? &amp;
        element nmtl3:capacity { xsd:string }?

L3Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }
L4EndpointContent = 
        attribute port { xsd:string }? &amp;
        attribute protocol { xsd:string }? &amp;
        attribute index { xsd:string }? &amp;
        L4Role? &amp;
        (
                element nmtl4:address {
                        L4Address
                } |
                element nmtl3:interface {
                        L3Interface
                }
        )
  
L4Address = 
        (
                attribute value { xsd:string } |
                text
        ) &amp;
        attribute type { xsd:string }

L4Role = 
        (
                attribute role { xsd:string } |
                element nmwgt:role { xsd:string }
        )    </programlisting></para>
    </section>
  </appendix>

  <glossary id="glossary">
    <title>Terms</title>

    <glossdiv id="A">
      <title>A</title>

      <glossentry id="apt">
        <glossterm>apt</glossterm>

        <glossdef>
          <para>Advanced Packaging Tool, or APT, is a front-end for the
          package management system used by Debian GNU/Linux and its
          derivatives.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="B">
      <title>B</title>
    </glossdiv>

    <glossdiv id="C">
      <title>C</title>

      <glossentry id="characteristic" xreflabel="characteristics">
        <glossterm>characteristic</glossterm>

        <glossdef>
          <para>Taken on the context of networking, these describe the
          intrinsic properties of a portion of the network that are related to
          the performance and reliability of the network. See <ulink
          url="http://www.ggf.org/documents/GFD.23.pdf">http://www.ggf.org/documents/GFD.23.pdf</ulink>
          for more information.</para>
        </glossdef>
      </glossentry>

      <glossentry id="chaining">
        <glossterm>chaining</glossterm>

        <glossdef>
          <para>The process of linking together elements in the <xref
          linkend="NMWG" /> XML specification.</para>
        </glossdef>

        <glossseealso otherterm="filter_chaining">filter
        chaining</glossseealso>

        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>
    </glossdiv>

    <glossdiv id="D">
      <title>D</title>

      <glossentry id="data">
        <glossterm>data</glossterm>

        <glossdef>
          <para>An <xref linkend="NMWG" /> <xref linkend="XML" /> block used
          to store dynamic information, such as the results of a
          measurement.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="E">
      <title>E</title>
    </glossdiv>

    <glossdiv id="F">
      <title>F</title>

      <glossentry id="filter_chaining" xreflabel="filter chaining">
        <glossterm>filter chaining</glossterm>

        <glossdef>
          <para>Chaining operation that is akin to performing advanced
          selection or aggregation on a dataset.</para>
        </glossdef>

        <glossseealso otherterm="chaining">chaining</glossseealso>

        <glossseealso otherterm="merge_chaining">merge chaining</glossseealso>
      </glossentry>
    </glossdiv>

    <glossdiv id="G">
      <title>G</title>
    </glossdiv>

    <glossdiv id="H">
      <title>H</title>

      <glossentry id="HTTP">
        <glossterm>HTTP</glossterm>

        <glossdef>
          <para>Hypertext Transfer Protocol (HTTP) is a communications
          protocol used to transfer or convey information on intranets and the
          World Wide Web.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="I">
      <title>I</title>
    </glossdiv>

    <glossdiv id="J">
      <title>J</title>
    </glossdiv>

    <glossdiv id="K">
      <title>K</title>
    </glossdiv>

    <glossdiv id="L">
      <title>L</title>
    </glossdiv>

    <glossdiv id="M">
      <title>M</title>

      <glossentry id="merge_chaining" xreflabel="merge chaining">
        <glossterm>merge chaining</glossterm>

        <glossdef>
          <para>Chaining that combines linked metadata items into a new
          representation.</para>
        </glossdef>

        <glossseealso otherterm="filter_chaining">filter
        chaining</glossseealso>

        <glossseealso otherterm="chaining">chaining</glossseealso>
      </glossentry>

      <glossentry id="metadata">
        <glossterm>metadata</glossterm>

        <glossdef>
          <para>An <xref linkend="NMWG" /> <xref linkend="XML" /> block used
          to store static information, such as the specific parameters of a
          measurement.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="N">
      <title>N</title>

      <glossentry id="NMWG">
        <glossterm>NM-WG</glossterm>

        <glossdef>
          <para>The performance of most grid applications is dependent on the
          performance of the networks forming the grid. The Network
          Measurements Working Group (NMWG) identifies network metrics (aka
          <xref linkend="characteristic" />) useful to grid applications and
          middleware, and develops standard mechanisms to describe and publish
          these characteristics to the Grid.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="O">
      <title>O</title>
    </glossdiv>

    <glossdiv id="P">
      <title>P</title>

      <glossentry id="perfSONAR">
        <glossterm>perfSONAR</glossterm>

        <glossdef>
          <para>Network performance monitoring framework.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="Q">
      <title>Q</title>
    </glossdiv>

    <glossdiv id="R">
      <title>R</title>

      <glossentry id="RPM">
        <glossterm>RPM</glossterm>

        <glossdef>
          <para>(originally Red Hat Package Manager, abbreviated RPM) is a
          package management system. The name RPM refers to two things: a
          software package file format, and software packaged in this format.
          RPM was intended primarily for Linux distributions; the file format
          RPM is the baseline package format of the Linux Standard
          Base.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="S">
      <title>S</title>

      <glossentry id="schema">
        <glossterm>schema</glossterm>

        <glossdef>
          <para>XML specification, normally written in XML.</para>
        </glossdef>

        <glossseealso otherterm="schemata">schemata</glossseealso>
      </glossentry>

      <glossentry id="schemata">
        <glossterm>schemata</glossterm>

        <glossdef>
          <para>Plural of schema.</para>
        </glossdef>

        <glossseealso otherterm="schema">schema</glossseealso>
      </glossentry>

      <glossentry id="snmp">
        <glossterm>SNMP</glossterm>

        <glossdef>
          <para>The Simple Network Management Protocol (SNMP) forms part of
          the internet protocol suite as defined by the Internet Engineering
          Task Force (IETF). SNMP is used in network management systems to
          monitor network-attached devices for conditions that warrant
          administrative attention.</para>
        </glossdef>
      </glossentry>

      <glossentry id="SOAP">
        <glossterm>SOAP</glossterm>

        <glossdef>
          <para>SOAP originally stood for Simple Object Access Protocol, and
          lately also Service Oriented Architecture Protocol, but is now
          simply SOAP is a protocol for exchanging XML-based messages over
          computer networks, normally using <xref linkend="HTTP" />.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="T">
      <title>T</title>
    </glossdiv>

    <glossdiv id="U">
      <title>U</title>

      <glossentry id="up2date">
        <glossterm>up2date</glossterm>

        <glossdef>
          <para>The Red Hat Update Agent, is a tool used by Red Hat Enterprise
          Linux, CentOS and early versions of Fedora Core that downloads and
          installs new software and upgrades to the operating system.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="V">
      <title>V</title>
    </glossdiv>

    <glossdiv id="W">
      <title>W</title>

      <glossentry id="WS">
        <glossterm>WS</glossterm>

        <glossdef>
          <para>The programmatic interfaces for application to application
          communication are referred as Web service <ulink
          url="http://www.w3.org/2002/ws">W3 Web Services Site</ulink></para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="X">
      <title>X</title>

      <glossentry id="XML">
        <glossterm>XML</glossterm>

        <glossdef>
          <para>The Extensible Markup Language (XML) is a general-purpose
          markup language. It is classified as an extensible language because
          it allows its users to define their own tags. Its primary purpose is
          to facilitate the sharing of structured data across different
          information systems, particularly via the Internet.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="Y">
      <title>Y</title>

      <glossentry id="yum">
        <glossterm>yum</glossterm>

        <glossdef>
          <para>The Yellow dog Updater, Modified (YUM) is a free software/open
          source command line package management utility for <xref
          linkend="RPM" />-compatible Linux operating systems.</para>
        </glossdef>
      </glossentry>
    </glossdiv>

    <glossdiv id="Z">
      <title>Z</title>
    </glossdiv>
  </glossary>

  <bibliography id="bibliography">
    <title>References</title>

    <biblioentry>
      <abbrev>Perl</abbrev>

      <title><ulink url="http://www.perl.org">Perl Programing
      Language</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>log4perl</abbrev>

      <title><ulink
      url="http://log4perl.sourceforge.net/">log4perl</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>SNMP</abbrev>

      <title><ulink
      url="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol">Simple
      Network Management Protocol</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>MRTG</abbrev>

      <title><ulink url="http://oss.oetiker.ch/mrtg/">Multi Router Traffic
      Grapher</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>SNAPP</abbrev>

      <title><ulink url="http://tools.globalnoc.iu.edu/snapp.html">SNMP
      Network Analysis and Presentation Package</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>Cricket</abbrev>

      <title><ulink
      url="http://cricket.sourceforge.net/">Cricket</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>CACTI</abbrev>

      <title><ulink url="http://cacti.net/">CACTI</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>RRD</abbrev>

      <title><ulink
      url="http://oss.oetiker.ch/rrdtool/">RRDTool</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>NM-WG</abbrev>

      <title><ulink url="http://nmwg.internet2.edu">Network Measurements
      Working Group</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>perfSONAR</abbrev>

      <title><ulink url="http://www.perfSONAR.net">perfSONAR</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>perfSONAR-UI</abbrev>

      <title><ulink
      url="http://perfsonar.acad.bg/">perfSONAR-UI</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>XML</abbrev>

      <title><ulink url="http://www.w3.org/XML">Extensible Markup Language
      (XML)</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>ping</abbrev>

      <title><ulink url="http://en.wikipedia.org/wiki/Ping">Ping -
      Wikipedia</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>RELAX-NG</abbrev>

      <title><ulink url="http://relaxng.org/">RELAX-NG Schema
      Language</ulink></title>
    </biblioentry>

    <biblioentry xreflabel="XSD">
      <abbrev>XSD</abbrev>

      <title><ulink url="http://www.w3.org/XML/Schema">XML
      Schema</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>GGF/OGF</abbrev>

      <title><ulink url="http://www.ogf.org/">(Global|Open) Grid
      Forum</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>CDF</abbrev>

      <title><ulink
      url="http://en.wikipedia.org/wiki/Cumulative_distribution_function">Cumulative
      distribution function - Wikipedia</ulink></title>
    </biblioentry>

    <biblioentry>
      <abbrev>NMWG-Schema</abbrev>

      <title><ulink url="http://nmwg.internet2.edu/nm-schema-base.html">NMWG
      Base Schema</ulink></title>
    </biblioentry>

    <biblioentry id="zur06sc" xreflable="Zurawski06Scalable">
      <abbrev>Zurawski06Scalable</abbrev>

      <title>A Scalable Framework for Representation and Exchange of Network
      Measurements</title>

      <authorgroup>
        <author>
          <personname>
            <firstname>J.</firstname>

            <surname>Zurawski</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>M.</firstname>

            <surname>Swany</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>D.</firstname>

            <surname>Gunter</surname>
          </personname>
        </author>
      </authorgroup>

      <confgroup>
        <confdates>March, 2006</confdates>

        <conftitle>2nd International IEEE/Create-Net Conference on Testbeds
        and Research Infrastructures for the Development of Networks and
        Communities</conftitle>

        <address>Barcelona, Spain</address>

        <confsponsor>IEEE/Create-Net</confsponsor>
      </confgroup>
    </biblioentry>

    <biblioentry>
      <abbrev>Hanemann05PerfSONAR</abbrev>

      <title>PerfSONAR: A Service-Oriented Architecture for Multi-Domain
      Network Monitoring</title>

      <authorgroup>
        <author>
          <personname>
            <firstname>A.</firstname>

            <surname>Hanemann</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>J.</firstname>

            <surname>Boote</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>E.</firstname>

            <surname>Boyd</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>J.</firstname>

            <surname>Durand</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>L.</firstname>

            <surname>Kudarimoti</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>R.</firstname>

            <surname>Lapacz</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>M.</firstname>

            <surname>Swany</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>S.</firstname>

            <surname>Trocha</surname>
          </personname>
        </author>

        <author>
          <personname>
            <firstname>J.</firstname>

            <surname>Zurawski</surname>
          </personname>
        </author>
      </authorgroup>

      <confgroup>
        <confdates>2005</confdates>

        <conftitle>International Conference on Service Oriented
        Computing</conftitle>
      </confgroup>
    </biblioentry>
  </bibliography>
</article>